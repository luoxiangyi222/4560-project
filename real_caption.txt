<start> name and we're going to say string file name equals internal string <end><start> basically we're working with g open gl yes for mobile development you want <end><start> so what we're going to do is we're going so what we're going to do is we're <end><start> going to put it within this linear layout here so just open up that <end><start> we're going to say view flipper we're going to call it flippy and what <end><start> and negative 1 in the z direction and again we're just gonna call this point <end><start> delete the one that it's set up for us and hit paste and we're going to <end><start> and our arraylist that we set up so we call that arraylist called pin <end><start> our edit text is and now we just need to label this key so we're gonna say i <end><start> use them for debugging so we're going to say catch exception and basically <end><start> that method so we're going to say test or we can set up a new string may <end><start> gonna set this equal to audio manager just the basic setup <end><start> for the x value again it's since it's center alignment we just kind of want <end><start> this clear command and how we do that is again i don't know what that symbol <end><start> to the windows tab for mac you want to go to your clips tab and then <end><start> what's up guys welcome your 44th android tutorial for the new boss and again <end><start> again with me travis and we're gonna do in this tutorial we're gonna set up <end><start> want to use the android code called back round i wasn't completely <end><start> get we're going to call this our request we're going to do we're going to <end><start> going to say i dot put extra and then we're going to refer to again the <end><start> up here calling are called setting up the jdk on your computer it kind <end><start> stream max volume and we're just gonna refer to the audio manager class <end><start> delay normal you know because this application is going to be <end><start> and then just start whatever we want to save so our drawable dot let's say <end><start> straight oops spell keyboard wrong and we want to <end><start> it's working the next thing that we're going to do is we're going to kind <end><start> modify that entry sql get information again that's going to just return <end><start> after we import our typeface we can set up that reference to our assets <end><start> we call it fos and what we're going to do is again we can just save <end><start> or whatever view you guys want we're going to change this add one button <end><start> we just hit upload pretty simple stuff i mean it's a pretty easy walkthrough <end><start> do all nevermind we're just gonna stick with kind of same familiar familiar <end><start> to do again refer the recognizer intent and we're going <end><start> the actual coding just some of the methods again we just set up our <end><start> that and now we have this class called my bring back what we're going to do <end><start> and when we're working with with this shared the shared preferences type <end><start> our class name so triangle e^x and this isn't gonna have any parameters <end><start> class so we're gonna say main dot this and then what we're gonna do is <end><start> first thing we need to do is say request window feature and then we hit <end><start> store and in space and in our path so <end><start> method what we're going to do is say remove updates so we're just going <end><start> layout and that's what this tutorial is going to be about just so again you <end><start> we're gonna say this for the request code we're gonna say zero for the <end><start> within our edit text we hit this go button it's going to set it to a <end><start> and we're gonna create a new helper with the context again that's being <end><start> do in this tutorials we're gonna relate to where we touch on the screen <end><start> referring to and then what we're going to do is we need to still set up <end><start> data then we're going to say get text again and to string here and now what <end><start> or whatever year guys's password was and then our key pass was also travis <end><start> make any other type of variable we define the type which is going to <end><start> our on pause method we're just going to disable that text-to-speech so <end><start> so there you go we set up our our song and now we can use it within our <end><start> new text view this and then we're going to set up <end><start> to override implement methods click that as you can see here's our activity <end><start> here and change instead of africom instead of it's starting up <end><start> dress dot get and we're gonna get the location which we set as zero and <end><start> entity and there we go we've set up our bufferedreader and again we just <end><start> most part but now we're just allowing people to type in their own <end><start> out the variable name again within our on create bracket so it'll be the <end><start> within its parameters first one is the context so we're just going to say <end><start> information of this string to that class so we're gonna say info dot set city <end><start> you know basically our whole screen is going to be our viewport or <end><start> and another method we can call is to get that progress again we have an <end><start> our class name so triangle e^x and this isn't gonna have any parameters <end><start> answer or something like that and also our value which is our set data there <end><start> in this so again as of now this means nothing the computer is like <end><start> obviously since this is an int but let's just take a look at it i pulled this <end><start> and call it gfx i don't know for graphics and you know as always what <end><start> equal to new remote views and then we refer to a context again <end><start> so we're going to say basically the context of this class which is <end><start> floats here we're just gonna call this color buff and then what we're gonna <end><start> method called get menu inflator so let's get menu inflator this will kind of <end><start> current time from the system so again we created a long to handle that and <end><start> sa and then check that out it's going to be aligned to the left what we're <end><start> know the app or the widget that called this class so what we want to return <end><start> the new boston as well and then we have a resource folder and here's <end><start> then we just hit upload and again we need at least two so i'm just going <end><start> is going to allow us to do is allow our application to process <end><start> here <end><start> we're just gonna say p index dot length times that by two for two bytes <end><start> shouldn't so we're going to open up our slider class and first thing we're <end><start> then we just need to add a string name to it so that's what we're going to <end><start> and we're just gonna call this point we're gonna set this equal to new <end><start> we're going to do what's ever within here and also case our id dot <end><start> class even though it's a little bit more complicated it's kind of harder <end><start> that's where i'm going to save it as i'm just going to call this t and b for <end><start> from eclipse org /downloads we're going to click on that and basically <end><start> that real quick up yeah i'm so again within this statement we can just say <end><start> open just to let you guys know so let's get into it we're going to say <end><start> say add constructor and we're also gonna hover over and add the <end><start> create method here we're gonna set up our ball reference real quickly <end><start> along for our package name but we're just going to call this google maps <end><start> we're going to click that and then refer to our overlay which we called t and <end><start> again kind of just a default that we're working with lastly and most <end><start> just going to say listview lv add our imports and there we <end><start> there's a function called hint and then you just hit equals and we're going <end><start> basically going to have to use a constructor and you're like what's <end><start> going to set this equal to textview and text view results so there we go <end><start> public boolean and say should override url loading and this is going to be <end><start> where hopefully we're gonna finish our widget widget application don't wanna <end><start> reference bridges so we're going to say button and we're going to say new <end><start> gonna hit ctrl v /e our key store name which we called maps key store so <end><start> call this display when those part that's decent name whatever and <end><start> something and what we're gonna set this canvas equal to is our holder and <end><start> and everything will make sense at the end especially this this these <end><start> is we're gonna say our save button dot set visibility and and what we want <end><start> tweet because basically now what we're going to do is refer to our time <end><start> value so we're going to say android weight sum is the command and <end><start> the beginning and how we're going to do that is we're going to define it <end><start> a new spec so we're going to say tab spec and we're going to call this <end><start> what's up guys welcome to your 108 androids tutorial for the new boston <end><start> this many times just to determine which button was pressed so that's one class <end><start> our deleting method we're going to you know add the try and the catch <end><start> layout width equals fill parent and android layout height is going to <end><start> have we have our map and then if we hold and let go for more than three <end><start> quotations we put our action name and we import intent and we also just say <end><start> give us sorry its gl disabled and what we're gonna disable is the dither so <end><start> you've downloaded it if you are living in the future because then it <end><start> called touched point so we can say touch point dot get latitude and that's <end><start> the target of google api s and level 8 so you're going to select that and <end><start> the activity that's gonna basically configure our widget we can get into <end><start> and then we're just going to finish it by ford slash less than sign and <end><start> url and we're just gonna call this website this is gonna be equal to <end><start> for the most part so we're gonna say check box just felt like that yeah <end><start> reference and android we can also do like summary let's do enter your <end><start> strings and there's a string called hello so it's using this reference <end><start> well and so there we go we have that set up might want to <end><start> forward to that and what we're gonna do is we're <end><start> clear well we can hit the clear button there and it'll clear it but we want <end><start> overlay item something like that and we're going to set this equal to a <end><start> a little bit different with this xml layout we're going to use a table <end><start> you know a certain email address as well so i'm just going to click gmail <end><start> say dot append and what we're gonna do is we're <end><start> the same set up here it's going to be vertical orientation again nothing <end><start> just create a variable we're gonna say while is running and then we have <end><start> is we're going to again semicolon and we're just gonna add one to each <end><start> that and again we just use our edit text which we called shared data dot get <end><start> that's going to open our preferences and also our exit which is going to <end><start> identifiers so you're gonna say like t dot t and that would be two <end><start> called create entry within our other class that we call where we're <end><start> and let's check that out so that's pretty good so that's <end><start> we're gonna get the bit the you know we can still use this kind of <end><start> to set the gravity to left so again it's just gravity dot left and then we <end><start> but again again just kind of clarify think of this some data or <end><start> external data is our class name if you guys are just <end><start> we're gonna type this or spell this folder a or r aw for our our our <end><start> it's like hey man do you you put the ball on there <end><start> something like that now let's do like 25 dp just so we get a desired result <end><start> going to set it up with with an on create method as well so i'm just <end><start> some layout weight to each text view so we're just going to add that <end><start> going to add to this relative layout and all we're going to do is we're <end><start> anytime we set up a new layout it's gonna give us this code as well i <end><start> here whatever you guys want again we can set up a toast dot make text <end><start> we're going to do is copy this button and paste it down there again within <end><start> text which we just looked at and forgot already called save file dot get <end><start> content view for this view that we just set up here just going to take a <end><start> point and then fx for a finishing next point and fy for our finishing y <end><start> internet data and this is going to throw an exception so now that we have <end><start> save it let's see i'm get in an air just got to finish off that statement <end><start> we want this to be a variable that we can use throughout our whole class <end><start> gonna create another class called gl so they're all kind of close together <end><start> gonna say we're gonna toggle between the satellite view and the street view <end><start> tutorial guys have a good one peace and just to show you it's sending <end><start> gonna set this equal to what we just pasted within quotations and there we <end><start> extra underscore prompt and then we can just say speak up son something <end><start> scanner connection or refer to that class and we're going to hit dot <end><start> this my bring back and again class name should be uppercase so we're going to <end><start> it's called public boolean on touch event and again this takes a <end><start> reading so we're going to say result is equal to basically result as well <end><start> but we're also going to do that first seconds as well so we're going to <end><start> the sensor event listener we're also going to set up just our you know our <end><start> part we're also going to do sub equals pretty much the same thing just <end><start> dot put extras takes a bundle and we're going to call our bundle is <end><start> and this time we're gonna set it equal to the gl 10 class dot gl on your <end><start> two to the left of and then we just oops sorry always for some <end><start> what we're going to do in this tutorial is learn how to write data through <end><start> from the view class you can pretty much think of it like <end><start> the back view so we're gonna go six five four all right and we're pretty <end><start> get into this in more detail later but just within parentheses put <end><start> i want you guys going to google and type java jdk hit enter it'll be the <end><start> strings like string called values equals 1 even though basically our <end><start> done is i've created again a class called simple browser and an xml <end><start> going to say android and it's actually a layout weight value so that's why we <end><start> we're also going to set up our listview to you know have that reference <end><start> about it so you guys understand it a little bit more thoroughly instead of <end><start> so we're going to just save fos dot i'm sorry fos equals open file <end><start> again this kind of review but we're just going to say public <end><start> project i'll catch you guys in the next tutorial or we'll start getting <end><start> eclipse is is an ide which will make developing a lot easier for us <end><start> and then we're going to say our class name which was called hot or <end><start> browser we click on it as of now nothing is there and then we're hopefully <end><start> bossin or what if you guys want to label this again if you don't have to <end><start> create an output stream and we're gonna call this os and we're just going to <end><start> result but for this tutorial we're just going to set up the xml layout so i <end><start> and we're going to use the method on it and again we have to define our <end><start> this textview is wrapping the content of the text so those are your two <end><start> gonna walk the canvas to start out with so we're gonna say walk canvas <end><start> that we just set up which is our array and that's going to return a lot <end><start> implement methods unimplemented methods and we have three methods that we <end><start> the new boston now this is where we're going to again create a workspace <end><start> string returned oops turned name equals and then we can <end><start> two buttons called start and stop all right no no no we need to call <end><start> we're gonna say open raw resources i think we've done this <end><start> have a array array list set up gonna add our imports make it happy and then <end><start> this equal to again just a new http get method and then or instance of <end><start> into our layouts here and pick one of our layouts let's go with let's go <end><start> that good stuff what we're going to do is we're going <end><start> to say something like you can also do 250 dp for density <end><start> what we're going to do is set up a not something called an id we're going <end><start> probably a few blocks away but just as every time that unchanged method <end><start> text of this one to get address something like that and the only <end><start> what we're going to use for this preference manager or this <end><start> and we're gonna create a new helper with the context again that's being <end><start> new my what was it to new my bring back surface <end><start> that integer is being passed in we're gonna just set one method up so we <end><start> to be called protected or it's going to be protected void on post x cubed <end><start> like that this is going to be equal to our url which is our edit text <end><start> let's set up our http client and we're going to call this just like <end><start> can do is we can set up kollene so we're gonna say gl dot gl enable dl dot <end><start> where we're going to set up this text-to-speech and also actually <end><start> in the last tutorial within our load button so it should look pretty bare <end><start> like as we run the program or run the application again yeah i press <end><start> then we can just return that variable called techsoup's that we just <end><start> bundle we're going to say got basket first then you guys will have to <end><start> something like that and it's not going to take anything within its <end><start> shared preferences the same file name so we know we're working with that <end><start> gonna say load and there's a few different ways to load if you guys <end><start> do it but the method is called start activity i believe that's from <end><start> setup now it's called our de id oops our dot layout dot sql view like <end><start> same shape basically when our emulator starts it's you know it has a width <end><start> set up within our constructor for our class so we're just going to say <end><start> use this blue that they have set up and there we go pretty much <end><start> instead of saying set content view we're basically going to setup our <end><start> keyup but in a different way through the event motion event so that's kind <end><start> browser application and so we're going to say our our spec dot set content <end><start> do is we're going to say random r is equal to new random pretty familiar <end><start> data we're going to say we're going to say jessica alba is dot dot dot and <end><start> return an end value and what we're gonna do is we're going to say location <end><start> it's going to set this equal to examples five and it's going to try to set up <end><start> unregister it so it's not always plain so i'm just gonna go to source <end><start> this in a try in a catch so we're just going to hover over <end><start> create a bundle you can kind of review for yes we're gonna set this equal <end><start> one more class that's going to handle all of our pretty much all of <end><start> class called slider extends activity then also create a layout called <end><start> class so we have to import this activity class which comes from the android <end><start> call this display when those part that's decent name whatever and <end><start> should say and then just get text to string again nothing new and we're <end><start> it's not too important so click the xml grab that and copy it all and then <end><start> have our bitmap set up all we have to do is draw it to the canvas so we're <end><start> to set the gravity to left so again it's just gravity dot left and then we <end><start> awesome stuff i just kind of wanted to go back you know it's just like when <end><start> what's going on but basically basically all we all want to show you guys is <end><start> that bundle so we're going to say oh actually we need to set up the <end><start> say st dot close and the third button is just going to toggle it whether <end><start> click on it and it says you've created a new tab and then we can click on <end><start> the mode what we're gonna do is gl ten dot gl underscore fastest that's <end><start> we need to define it as and then hit enter a few times so we can work <end><start> and then we give it again the file name which is a string comma context <end><start> is one and then we're also going to say get the content after we open up <end><start> basically can reference that and for example if it has the <end><start> activity and again give us some space within the opening bracket here <end><start> we can use some of the methods but what we can also do is we can implement <end><start> views so we're gonna say remote views we're just gonna call this v4 like <end><start> resource and then we're going to access where we set up our preferences <end><start> dot get drawable refer to maybe well a drawable folder if you guys put in <end><start> again it's gonna be of the type new boston and as you can see it opens <end><start> manager and then we're going to say get <end><start> this and you know paste it here which again is our key reference and it's <end><start> set our content view to our gl surface view so it was called our surface <end><start> can just put like one and if we don't want it to affect affect the i <end><start> get latitude and we're also going to say longy is equal to again casting in <end><start> and again it takes an nth value and that's why we set up our current <end><start> of the same reference as we do in java so let's check that <end><start> is looking for is a method called run so we need to set up this run method <end><start> uppercase so starting point starting to lose my voice i'm sorry but that's <end><start> in milliseconds here so this is one and seconds we're going to perform an <end><start> going to say set up a string called display we're gonna say display is <end><start> this save file two buttons confirm and <end><start> we're going to set up a reference for the subtract as well this is <end><start> call their method that would be our text so that's it's pretty much the <end><start> new array that we set up here which we called our gba vowels so that's <end><start> to say v right there and then we're just going to kind of delete it out of <end><start> hit http example and then it loads our last tweet so that's pretty sweet <end><start> basically our what we're checking here we're going to say if equals center <end><start> stream dot read with the parameters we're gonna give it a tard via <end><start> of code android padding and as you can see you can do padding around the <end><start> simple switching case that we're all so familiar familiar with get <end><start> errors in the next couple tutorials so alright what's up guys so here's <end><start> create a while loop and we're going to say as long as their line is equal to <end><start> touchy because we're going to have it handle all of our touch methods <end><start> let's set that up just cursor c equals let's set that up just cursor c <end><start> to our home screen click and hold go to widgets and we're gonna scroll down <end><start> whole class we're going to say new my bring back and then we're going to <end><start> our package name our project name go to write right click new android xml <end><start> can actually do some android programming and you click the first link it's <end><start> we're going to add a new folder to this that's going to hold all of our <end><start> equal to our text view so tv and then we just got a display our dialog so i <end><start> that's how much skill i have so if you guys you know really want me to i <end><start> class and we're going to say extends comp or overlay and then we have <end><start> just quickly do is we're gonna copy the one that prints the ball which was <end><start> and then factory so this is just this is just a variable we're gonna call <end><start> follow along along and what we're gonna do is we're gonna set up some <end><start> we go i mean that's basically gonna get rid of the title and set it to <end><start> while file input stream dot read does not and we're gonna say read data <end><start> within there but i'll give you the basic concepts so what we need to do is <end><start> yourself some time with the errors so i'm just going to do that real <end><start> and it gives us a string with it or we need to put a string within here <end><start> and then we can type our intent here so there we go that's basically we'll <end><start> going to call this x r for xml reader set this equal to our sax parser sp <end><start> new line when it's done reading that specific line and that's going to <end><start> basically again our webview so we're going to say our brow which is <end><start> we're going to say a drawable d and we're gonna set d which again is <end><start> stuff so we're going to do that within our on create method as well and <end><start> gonna do is say dot put and then we have to tell it you know what we want to <end><start> manager so we're gonna first set up our location <end><start> over to so it's basically going to get to this line and be like okay let's <end><start> then we hit dot and we're gonna say set flags so let's scroll down kind of <end><start> you can see added a few extra rows are actually going to delete <end><start> create method here we're gonna set up our ball reference real quickly <end><start> we start up our activity we scroll down to the weather xml parsing class <end><start> we need to do again is set up http response we're going to set this <end><start> to be called protected or it's going to be protected void on post x cubed <end><start> here so we're going to say <end><start> cool and you can see all the methods you can use for the toggle button <end><start> application we're going to actually have you know our bitmap on there in <end><start> text of this one to get address something like that and the only <end><start> city all we're gonna do is set up a string called city and we're gonna <end><start> content factory which is going to say create tab contact content and <end><start> going to set up you know the attractiveness or the hotness so <end><start> put one of those straight lines and we're just gonna say orientation and <end><start> trouble with so how we change or get it upgraded apk is we're just going to <end><start> say cv update dot put and again we just refer to our key name which we're <end><start> which comes from the tab host class so tab specs and we're going to call <end><start> the the plus height there we go i mean we're <end><start> gangsters gangstas and you know whatever else we want you <end><start> and let's check that out so that's pretty good so that's <end><start> gonna say oops at plus ford's f plus id ford / webview browser or something <end><start> down more as we use this method but basically we've set this method up <end><start> also fill the parent for both width and <end><start> because right now it's not really doing anything besides setting it to false <end><start> learn something a little bit about the return value for the on touch and <end><start> again so then we're going to say add drawable and then splash under <end><start> and then we can set it equal to our result which again will be whatever <end><start> string so you're going to click that and here we go we have our update <end><start> refer to we're going to refer to the app widget manager <end><start> variables so the first thing that we're going to do is we're going to <end><start> surface class so just get that set up and we're good to <end><start> that it text for the hotness ranking and also our row id so let's just copy <end><start> going to call this returned picture because once sorry our camera <end><start> here's our application bracket and within our application bracket we <end><start> string for our returned hotness pretty string for our returned hotness <end><start> going to say set up another add view and we're going to call this ad as well <end><start> also going to change this one to width and this one to height so there we go <end><start> to work i'm sorry i said that twice it's basically just not going to work <end><start> over to our xml data collected class and that's just gonna store some stuff <end><start> we're going to right click on our drawable and go to new android xml <end><start> and again the difference between the media player and soundpool is the <end><start> or instance of that object and we want to pass in the context so then we <end><start> let's see if i have it pulled up yeah see like right now if we put travis <end><start> called the edit text input so we're going to say input and we can it dot <end><start> that stuff so let's just hit our load data creates progress bar up states by <end><start> the beginning and how we're going to do that is we're going to define it <end><start> created five things sql lite example xml sql lite <end><start> going to set that up to what we call that one send yeah except i want to <end><start> with a textview trying to gather my thoughts here sorry and today i <end><start> loop so we're just gonna say for and i which we're just creating again is <end><start> if are checked if that box is checked we can also do sd dot lock and that <end><start> the y value as well so we're gonna say - test dot get height this time / - <end><start> do all nevermind we're just gonna stick with kind of same familiar familiar <end><start> class here and the first thing that we're going to do is we're going to <end><start> and there we go we set up a constructor and now when we pass in the context <end><start> it's going to code out everything until we do something like another <end><start> gonna do is we're gonna set up our byte buffer i know it's kind of <end><start> yatta print stack trace again this is just for debugging we'll get into <end><start> basically you know the subject of the email and we're going to say <end><start> kind of complex it's kind of hard to remember but that's why that's why <end><start> set up here to the left we're going to use our x value again that's going to <end><start> views so we're gonna say remote views we're just gonna call this v4 like <end><start> running is equal to false now so if this pause method gets called is running <end><start> know we can pick a color from here so let's do like <end><start> whoops it's the menu class don't worry about that so what we're gonna do <end><start> call our button again we have to import the button and set equal to or <end><start> maybe like plus our sensor x and then what we're gonna do for our you <end><start> after we import our typeface we can set up that reference to our assets <end><start> object called jason and there we go so now what we're going to do is wall <end><start> of 0 and that will return basically the information from our sensor event <end><start> hotness that's going to be the same thing for the most part again we set <end><start> entity we need to set up a json array and a json object that we're going <end><start> notification setup and then we're gonna just add you know what details we <end><start> method called should override url loading which takes in a web view and <end><start> we worked with arraylist but android r dot layout dot simple underscore <end><start> cases so we're gonna say case then we're gonna refer to the motion event <end><start> available to the user so we're going to do is we're going to set up a <end><start> and it's going to line the top with the top of this pretty much alignment <end><start> as well so don't worry about that so we're going to say button add tab <end><start> so i'm just going to move this down to the bottom just cuz i don't know i <end><start> so now what we can do within our save file again is make sure <end><start> the end of the tutorial pretty quickly pretty quick like i <end><start> find that button add one and we're just going to delete the text and we're <end><start> the value again it's just kind of fine-tuning everything getting you <end><start> or whatever year guys's password was and then our key pass was also travis <end><start> going to call this get data as well just like the last tutorial so you may <end><start> xml ns ads equals and then we have to put in http colon forward slash <end><start> programming and bit maps and now when we run our or <end><start> sure it still works all right so basically paste that <end><start> for the sake of time and then for uncheck change listener passing <end><start> and the value and the key reference is going to <end><start> photoshop or whatever and creating some bullseye that's gonna turn out <end><start> let's change that splash to like one second so i don't have to listen to <end><start> height so we're going to jump over to the developer page which i'm sure <end><start> so we're going to say bundle which is a bundle variable and we're going to <end><start> going to you know release our way clock so again just go to override methods <end><start> semicolon and we're just going to move the <end><start> false but read is going to be true and then the last state we're gonna say <end><start> to code but it's gonna it's gonna work for us so that's <end><start> have there as well so what we're going to do now is just copy or cut and <end><start> this tea and all we're gonna do is set our <end><start> say add unimplemented methods and down here is our online click listener <end><start> variables within our on create method so it kind of initial eyes does all of <end><start> stuff view bad d and then if everything's set up right we can run <end><start> the http forward slash forward slash wwe new boston or something like that <end><start> we're going to set up and basically you can think of a bundle as kind of <end><start> the context what that's gonna do is call this constructor custom pinpoint <end><start> string call e and this is gonna be equal to our info or edit text called info <end><start> click list interview to this as well so we're gonna do is we're just gonna <end><start> intent kind of holds the data this class and then or the context of this <end><start> it's called public boolean on touch event and again this takes a <end><start> actually let's do if changing y is less than a canvas dot get height then <end><start> result code is equal to results okay and that should be familiar so there we <end><start> to be two tutorials and then we're gonna basically wrap up our application <end><start> and then also another thing that we can do that's a problem oops as you can <end><start> going to basically put the index so index row for the most part and <end><start> let's just put a break there as well now that we have everything set up <end><start> what we're going to set up if the toggle is set to true or if it's checked on <end><start> bitmap and then we're gonna say extras which is basically this bundle <end><start> important one that we're going to refer to as well as the specific layout <end><start> name dot set text and we're going to set it to our returned name and then <end><start> is we're going to say if state and we can't compare strings like this is <end><start> need to set up our progress dialog is what it calls it so within this <end><start> ignore for the most part so we're just gonna say gl 10 dot gl back now <end><start> android title checkbox and android and we can set this checkbox if we want <end><start> gonna set this equal to be keyboard and then we need to put one of <end><start> going to set up a linear layout again nothing new for the most part <end><start> ball so that's our input stream what we're gonna save now we also need <end><start> to say toast toast dot make text context or class name which is called <end><start> url we're going to add to it is a question mark screen underscore <end><start> can say can whoops can go back so that's going to be like hey can we go back <end><start> to set it as final no law anymore so we're just going to delete the <end><start> clicking file new other and then android xml file you guys should be <end><start> let's just try and a you know create something so we're gonna have it <end><start> views so we're gonna say remote views we're just gonna call this v4 like <end><start> and it's going to line the top with the top of this pretty much alignment <end><start> this array paths up here the string array up here so it's the right <end><start> everything for the most part set up and so once we copy that all we're gonna <end><start> going to say i because that's what we're going to label our intent and now all <end><start> and we're going to still have all the access to our activity class so <end><start> up a http entity called e and we're going to call this our our dot <end><start> read the text and convert it into a string as always so we're going to <end><start> second all right let me try and get more in focus in this one all right there <end><start> that we defined earlier so we're going to refer to that we refer to that <end><start> parameters hit ok and there we go we have our <end><start> and since we set up our typeface in our constructor we're gonna put font <end><start> we haven't done too much but we do now kind of understand that some <end><start> google maps emulator something like that we're going to select our target <end><start> and we're just going to set up our can write dot set text to initially be <end><start> we're going to say sb going to set this equal to new string buffer and <end><start> called shared preferences so we just need to set up a little variable for <end><start> want to show you guys everything or not we're just going to set the content <end><start> something called an audio manager so we're gonna set that up above our <end><start> that's spelled wrong as well who cares stupid things that this person does <end><start> kind of has a reference and then any time we use this start activity for <end><start> over here so we're gonna say milliseconds seconds and oops no <end><start> a string because we're going to again get this string that we put in <end><start> your constructor you can delete the comment or not that's up to you what <end><start> just want to random position so just going to say our dot next int <end><start> say our file and say equal to new file and we're familiar with you know just <end><start> android layout height is going to wrap the content the only other thing <end><start> just a method that we need to set up and it's going to say which view we want <end><start> we're gonna relate to a pointer of some sort that's why again we had to use <end><start> textview android text nothing awesome but we're going to <end><start> and we're gonna call this exactly what we called you know this <end><start> comma negative 1 and in the y-direction then we can again leave a comment <end><start> we're again set up a byte buffer call this our point byte buffer or point <end><start> access our key so let's go into it again our preferences xml as you can see <end><start> equal to be null and we're going to call that buffer reader in and we're <end><start> going to set that equal to within parenthesis textview and find view by <end><start> errors that this application as and then we're going to fix <end><start> kind of the starting point so we're going to say display dot set gravity <end><start> done anything with a handle yet i mean with our sliding drawer yet so <end><start> button will appear so first we need to kind of disable the save button <end><start> dialog equals new progress dialog and it takes a context so we're going to <end><start> the tutorial probably that's gonna be it for this tutorial just <end><start> by right-clicking within the brackets going down to the source and then <end><start> set our text view said our textview variable is called <end><start> then paste equals and then some kind of a unique number oh and also we say <end><start> add a sleep within here so again this kind of review thread dot sleep <end><start> of the same reference as we do in java so let's check that <end><start> is going to say if status is not equal to text to speech dot err then <end><start> dot put and then we have to put our float array in there which we <end><start> variables to be int so we're gonna say and lat is equal to 0 to start out <end><start> say android theme is equal to at android : style swagga as they <end><start> key we set up to check box just like when we were working with sharing <end><start> up our on create method here for our database as we need to add <end><start> standard touching the screen but we want to change this to the fx right here <end><start> have those all set up and set our content view to the weather xml as <end><start> have that working but the problem that we may be having is again this is <end><start> method for the most part nothing too new <end><start> and again mine is just within and documents and then android apps here <end><start> press we're basically going to send the data back and then we're going to <end><start> some help just leave a comment on this paige and i'll check it out and i'll <end><start> width divided by two and we can just copy this just copy this and <end><start> update our canvas so what we're gonna do is say while true for now actually <end><start> we're going to go into the activity class and again just get our on <end><start> so we're going to add that real quickly so we're going to add that real <end><start> there so let's go over to the code so you guys can match up exactly to <end><start> we're going to do is we're going to go into our main xml the one that <end><start> little bit better but instead we're just going to have one class b or like <end><start> have our bitmap set up all we have to do is draw it to the canvas so we're <end><start> called random and so there we go every time this you know we call this <end><start> in a context so we're just gonna relate to the context of this class and <end><start> our application i'm just going to kind of get out of here and then run it <end><start> know put some other type of data in there or like a integer you'd say <end><start> set the results and send it back to our first text view and our button will <end><start> we're gonna call this our location set that equal to new geo point and <end><start> supposed to be wrap content again this will just wrap the content of our <end><start> kind of pinpoint on our map now well now what we want to do is <end><start> our whole class could use it so that's what we want to do and then now we <end><start> method now what we're going to do is we're going to scroll down to the <end><start> source override implement methods and we're just going to look for on <end><start> gonna set this equal to be keyboard and then we need to put one of <end><start> going to say int for integer and camera data and we're actually going to <end><start> going to catch it and we're just going to set this to false and we <end><start> tutorials on got things that you guys request so there we go we have our <end><start> the most part boat so think of it just you know kind of how i explained <end><start> pass in the context this class name and we have to import dialogue i'm not <end><start> prompt and we're going to basically type what is right here so pretty simple <end><start> sexy and are both and control shift f4 format you can do that in job as well <end><start> have to import our rail array adapter and we're pretty much done guys <end><start> example used for teaching android development you know and that's <end><start> i call this location manager and that's just going to help us manage <end><start> that's crazy format and height we're going to <end><start> overlay overlay item that we're passing in to be this geo point our <end><start> can just say show next so that's going to go into our next maybe that maybe <end><start> text view of our first tab so we're going to say show results <end><start> name and one for our hotness so i'm just going to hit plus here and hit <end><start> summary summary equals a check this box for the most part nothing <end><start> you know or float values for a sensor every time that our sensor is <end><start> stream dot read with the parameters we're gonna give it a tard via <end><start> let's add a box or a rectangle so what we're going to do is we're going to <end><start> surface holder so tight and we're gonna call <end><start> gonna say new hot or not and again pass in the context of this class and <end><start> and post it and that's basically it for this tutorial we set up a run method <end><start> i keep saying object dot gl underscore unassigned short or unsigned short <end><start> references the same so we're just gonna have our button be widget button <end><start> in our starting x and our starting y but first what we're going to do <end><start> forward slash capital t then theme dot capital dialogue or just dialogue with <end><start> to do is just say over we have to say we have to say overlay list and then we <end><start> going to be a response so we're going to set up http response we're going to <end><start> know get the default locale that's just gonna kind of process information <end><start> going to call this backpack get a new bundle nothing too new <end><start> layout what we want it to be what we want to cover so we're going to <end><start> you open up here we have this text view which we referred to as text view <end><start> house within our on click method hopefully you guys know why by <end><start> new http get and then we're going to refer to our url lowercase dot - <end><start> and then we can set it equal to our result which again will be whatever <end><start> want to make sure you change that otherwise it's not going to work <end><start> paint dot text size or set text size it's like 50 and one other thing <end><start> references available yet we i go over to our xml file save it i always <end><start> a class within another class is another example or no reason i did this and <end><start> textview that we set up which was called http stuff i believe we're just going <end><start> to this on progress update so now what we're going to do is we're going to <end><start> later as we go just know that this is a class what we're setting up all <end><start> send data we're going to say if it's crazy we're gonna say probably right <end><start> database is equal to basically our helper that we just set up so <end><start> second point so that's going to be at the reference 1 in the x-direction <end><start> and we're going to let it implement a location listener so we're gonna <end><start> interval and then what we have to do is we have to say flippy dot start <end><start> role i guess it's not again but we're just <end><start> hopefully you guys are kind of getting familiar with with xml even though <end><start> here to encompass our whole class and then we just have to close off our <end><start> going to say spinner equals again spinner and find view by id rg <end><start> the video but i this was see just change it to context so it's a little bit <end><start> working with floats as for now and we're just gonna save vert buffer or vert <end><start> am i saying all right three four and then zero that's gonna be our <end><start> triangle is clockwise so what we're going to do is we're going to relate <end><start> set this our fx equal to zero now when we start clicking so we're just gonna <end><start> we're going to set it to success and then what we're going to do is <end><start> well walk you through manifest again so we're just going to copy and paste <end><start> first thing we need to do is say request window feature and then we hit <end><start> so we're just gonna say and and we want to make sure a request code or i'm <end><start> say add uses permission and then select the choice for the internet which <end><start> return an end value and what we're gonna do is we're going to say location <end><start> that's we're going to call this so we're going to set send data up within <end><start> the gl ten class dot gl underscore color array and then we also have to set up <end><start> going to say set this equal to r the context of this and for our sensor <end><start> we're going to say view flipper we're going to call it flippy and what <end><start> new my what was it to new my bring back surface <end><start> boolean value that we copied and we're also going to do that for a modify <end><start> prompt and we're going to basically type what is right here so pretty simple <end><start> cover pretty much everything and then we'll just add the extra exceptions <end><start> android xml file just like always and we're going to call this <end><start> read can read and write so whoops we can either do that or we can just use <end><start> service and we're gonna pass in notification <end><start> might take one more tutorial or two more not sure to pay on how elaborate i <end><start> call this hot or not db something like <end><start> our image view right here and it has that picture i just took and then we <end><start> click method we had that load button it's going to call this first before <end><start> event and we're going to call that e and a map view which we're going to <end><start> to again we have our table name up here that we defined earlier so we're <end><start> spinner 1 and let's set that up within our external data class so now let's <end><start> say public public gl render x and then all we're gonna do is set up a <end><start> such as like action answer call if you're going to call someone for <end><start> client so we're going to say our <end><start> we're going to just set up a string variable called data return <end><start> list item here and each list item is going to have one position within <end><start> and then just on pause method here and we're going to unregister it right <end><start> a string that is going to be the user name something like that and we <end><start> data and we're going to since we copied our on click method i'm just going <end><start> set that up above our class so we can refer to it everywhere else so <end><start> our data collected class set up which we called the xml data collected all <end><start> statement of some sort so what we're going to do now is set up our <end><start> net next application so we're going to create a new xml file we'll going <end><start> boolean value that we copied and we're also going to do that for a modify <end><start> the x direction or the x axis and then again we're just going to say sensor <end><start> this agreement license so if you guys have some free time check that out <end><start> little you know painting to the canvas here so i'm just gonna run it make <end><start> like as we run the program or run the application again yeah i press <end><start> know put some other type of data in there or like a integer you'd say <end><start> face because we establish what's which side is the front side by the <end><start> that we just received so we're going to say data result all right what was <end><start> again have this equal and this is just setting up the reference to the xml <end><start> the methods for google maps and as you can see here our first activity <end><start> say new hot or not and we're gonna pass in the context of this this class or <end><start> did it work and we're going to set it equal to be true to start with and <end><start> down here graphical layout and main.xml basically what i'm gonna do in <end><start> called key and that's going to be basically a bread string and then <end><start> we go we basically have our linear layout set up for our first <end><start> update everything and rebuild it there we go we have our splash background <end><start> or whatever view you guys want we're going to change this add one button <end><start> save that and run it now and you know this is going to be our first <end><start> hopefully you guys are kind of understand this data thing a little <end><start> on create methods so just go within the brackets of our oncreate and we're <end><start> going to say spinner equals again spinner and find view by id rg <end><start> to this because we implemented it alright and we're also going to add <end><start> going to be 0 and our initial y is going to be 0 which will be the bottom <end><start> going to set this equal to b we're going to cast it as a location manager <end><start> messed me up for the most part with the edit text and what we're going to do <end><start> reference so we're gonna say string and we're gonna call this base url <end><start> add that and then add another one for our <end><start> and so once we get our onclicklistener set up let's go down here and setup <end><start> that's going to basically hide our keyboard so again once we're done <end><start> the whole xml thing by now i hope lisi understand how to do it and you can <end><start> set up a new paint variable and we're gonna call this text paint and <end><start> overlay item and we're gonna refer to our point our geo point called <end><start> because again we only have one thing within a list so that's what <end><start> going to copy this because again we want to be private <end><start> to register that fingerprint you need to go to the signup page here and then <end><start> called simple browser i kind of set up just basically out and edit text <end><start> the left top-left corner of our bitmap as well so would be a little <end><start> layout widget and then what we're gonna do is we're gonna set up the width <end><start> and convert it in ten ants so we're gonna say int temp is equal to <end><start> to our home screen click and hold go to widgets and we're gonna scroll down <end><start> talk through everything and then we'll run our application make sure it <end><start> and our can read dot set text to false as well so if we get a false we know <end><start> to change her to like a four and haha and then we're going to say edit <end><start> a great speech so we're just going to say text to speech dot cue whoops ah <end><start> we're going to say file output stream this and we're going to call fos <end><start> extends activity and what extends means is that we're extending the <end><start> 20 new variables and just get them going and i'm just <end><start> say our touch point or a geo point dot get longitude and again we're going <end><start> well or you'll see i'm sorry it's kind of hard to talk and think at the <end><start> here and after our background after we draw our background and we're gonna <end><start> refer to that later but let's get into it what we're going to do is we're <end><start> we're just going to say final static string and we're just going to call <end><start> method called on pause so this is where we're gonna kind <end><start> class what we want to do is we want to set up a content values <end><start> crap what our application works so there you go that's kind of introduced <end><start> widget stuff or whatever you guys want to call that those other things had <end><start> this equal to zero and you guys also need to say final static which <end><start> might give us an error so we're just going to quickly just say int is <end><start> pointer is the pointer that we set up called color buff and there we go <end><start> into a long type variable now what we want to do is again we're just gonna <end><start> so now cheese equals basically the position so the zero position <end><start> tab so it's kind of beneficial if you guys were creating some kind of <end><start> class name which is widget config and we're just gonna say dot this and <end><start> klaus so we can easily just hover over the air and say surround with try <end><start> part and and kind of what these methods mean because i haven't really <end><start> our sound pool now down here so we're gonna say our sound pool dot and <end><start> of 320 by 100 so again we're just gonna jump into the clips and for a width <end><start> is radio groups a radio group for the most part then we're going to go up <end><start> quotations at plus id /m v format view main something like that now <end><start> starting method and again we're just gonna right click go down to <end><start> you know like that and then we're gonna say or actually we might want to put <end><start> most part to do we set up an answers not positive no all right so we're gonna <end><start> array so we're going to say our string name that we want to save which we <end><start> http variable which we call the client and then we're just going to say <end><start> with our map stuff and quickly just to go back to the previous tutorial <end><start> to say let's slider implement on drawer open listener and then we just have <end><start> creating a widget this on delete method hopefully you <end><start> that the phone has in this one what we're going to call erb basically <end><start> nebraska or whatever the person searched for so we're gonna have say <end><start> some sort of location that's where we're going to set up basically what we <end><start> part but it's useful you know you can set again the orientation in <end><start> you know this if statement and we're going to change that value and so <end><start> gonna be like hey man you draw the background white it's gonna be like <end><start> int longy it's also equal to 0 and there we go we also want to change <end><start> by two so that's gonna give us the center for the y let's do something <end><start> their surface and resume it pretty pretty standard so that's the <end><start> but anyways so that's basically the <end><start> and then we also you know drawled or drew a bitmap on there kind of in <end><start> think of the shared preference as a folder and then we're going to say <end><start> sure it works so again this is a millisecond so when we hit let's <end><start> we're probably going to do something else and i'll see you then have a <end><start> method now what we're going to do is we're going to scroll down to the <end><start> sp to be equal to new sound pool object and within the constructor or <end><start> updates and we're gonna set that update probably in the next tutorial but <end><start> going to say main something like <end><start> have to import this and what we're going to do is we're going to say get <end><start> listeners - both are save and/or <end><start> and within parentheses we're going to give it a file name instead of a <end><start> we and we just want to build a string builder so we're going to say <end><start> to explain basically it resources everything that we have like the <end><start> to our canvas and say dot draw rec and then it takes a rectangle and a <end><start> we're still going to be working with our google maps activity what we're going <end><start> we're gonna go to extras and then we're gonna go to the google tab or the <end><start> intent is opening this class and we're gonna call that and we're just gonna <end><start> need to set up a reference so we can refer to it in java instead of xml <end><start> constructor because again any time this this class is accessed it's going to <end><start> and that's what we're gonna refer to for a few and so it's just gonna update <end><start> like chillin he's like hey guys what's up just hanging out here and it <end><start> our sound pool now down here so we're gonna say our sound pool dot and <end><start> the y value as well so we're gonna say - test dot get height this time / - <end><start> equal to 200 if we got some sort of an error so we're going to say <end><start> now i know i'm going fast and i'm not really explaining too much but <end><start> want to select even the music because i don't think we set up our path at <end><start> which catches the input-output exceptions and prints it to the <end><start> and button start watch and a stopwatch and button start watch and a <end><start> power manager and what we're going to do is we're going to <end><start> necessarily the way you want to do animations and such so i'll probably <end><start> setup now it's called our de id oops our dot layout dot sql view like <end><start> actually going to start is when this constructor is called so you know <end><start> dot-com 4/1 ford / statuses for / user underscore timeline dot json so <end><start> guys need permission for the internet so i forgot to add it to the menu <end><start> hear and see we again we can just you know mess with the music so <end><start> the method there and so then what we have to do is add the implement <end><start> finally so we're just going to use the finally so we're just going to use <end><start> going to do is we're going to set our up values to 0 then like 2 and <end><start> these methods called get name and get hotness and that's going to return <end><start> i'm just gonna set this equal to new you know handling xml stuff variable <end><start> they're side by side on the same row neck next we just need to add you <end><start> going to call this returned picture because once sorry our camera <end><start> we're gonna do is we're going to say get max address line index and that's <end><start> won't be asked so let's go into our data hit <end><start> the color and we set the depth and we have to you call the clear command <end><start> whatever the text is going to be i wasn't going to scroll to it but okay <end><start> to refer to again the power manager class and we're going to say full <end><start> our show result as those three variables so what we're going to do is <end><start> to say if like you know i n is not equal to null which you know for the most <end><start> to this in the next tutorial so i'm just gonna say next tutorial so we're <end><start> to be nine that's pretty good and then we're going to update database heck <end><start> now what we can do is you can say our controller and we can say dot animate <end><start> has and how we actually send this notification again to the <end><start> the input type class and hit dot type text and then variation and <end><start> so we're just gonna say and and we want to make sure a request code or i'm <end><start> bracket what we're going to do is we're bracket what we're going to do is <end><start> activity has full screen so where is that so we're just going to leave <end><start> you guys go there go to the tutorial section and that loads over here on <end><start> hover over a class ad unimplemented methods and we have two new <end><start> going to say spinner equals again spinner and find view by id rg <end><start> beginning so we're just gonna say dy equals d i'm sorry dx equals dy <end><start> create so that's basically saying hey if we don't have this file name we're <end><start> going to say key underscore row id and then we're going to hit plus <end><start> to refer to that string so we're just going to say public string because <end><start> is a context so private context can't spell and we're just gonna call this <end><start> that's getting passed in we're going to say if that's equal to result <end><start> in street view so we want to turn the street view off so we're just say <end><start> everything's okay if you guys remember again when we worked with bundles i <end><start> that website so we're going to set up a variable or instance of the class <end><start> reference find view by id and then it was sliding d was id we gave our <end><start> you know hit new view dot onclicklistener enter and it will set <end><start> widget which is the one i created just to get reference and then it <end><start> spec something like that we're going to set this equal to our <end><start> layout width equals fill parent and android layout height is going to <end><start> let's quickly just talk about what all these classes are gonna do before <end><start> refers to either being a successful or it not working so what we're going to <end><start> i'm just gonna set this equal to new you know handling xml stuff variable <end><start> google again and type android sdk basically the sdk has all these <end><start> textview and we're going to change this to button add <end><start> to set up a new workspace and we're also gonna we're going to do this within <end><start> have to set up a reference bridge so we're just going to say add view <end><start> say this is this ad is going to load when the oncreate method gets called <end><start> run through everything and check if that's true or not and i'll show <end><start> clickable and we're going to set that equal to be true because i believe <end><start> just going to hit enter and it's giving us an error because we need a <end><start> some brackets right here or some parentheses after we set up what type <end><start> error because we haven't set up this method but what we want to add to <end><start> the most part then we're gonna hit break because then we're done and now all <end><start> because it won't work on this one let's get into setting up a project and <end><start> going to be the code gravity center and gravity dot right all uppercase for <end><start> running is equal to false now so if this pause method gets called is running <end><start> create a new tab new tab new tab new tab so basically you can create new <end><start> sound pool we're just gonna say sound pool and we're going to call the <end><start> browser our brow something like that and again we're just gonna say find <end><start> reid extends async tasks it's been a while i think since we use this but <end><start> we're going to change this to long which is just again a type of variable <end><start> class but just to show you guys maybe leave a comment example setting <end><start> string so we're gonna say string f i don't know and we're gonna get our <end><start> that we implemented so what that onclicklistener is going to do <end><start> text which we just looked at and forgot already called save file dot get <end><start> for the next few tutorials if you choose so what we're gonna do is we're going <end><start> the most part here but we're just setting up the setting up all the <end><start> over the place but hopefully we aren't doing anything new yet for the most <end><start> made sense guys but that's kind of how you can use java by instead of typing <end><start> string c or whatever we're getting passed in c and then what we're gonna <end><start> our arraylist that we set up right here results sorry alright and then we <end><start> test and then we're also going to call one plus that's going to be the <end><start> to implemented it that's cool but we're just going to say new <end><start> know what this is we're going to say create a class our view client <end><start> two buttons called start and stop all right no no no we need to call <end><start> webview here find view by id and then we're just gonna say our dot id dot <end><start> so we're basically editing our shared preference variable and then we're <end><start> sensors of a certain type so we're going to click that and then we're going <end><start> this key reference check box it's not really good this isn't <end><start> to add our imports and add our unimplemented methods for click <end><start> it out of this onclicklistener in those part and now it's going to <end><start> two and so we're gonna just set up a switching case for that so we refer <end><start> method and we're going to set compass equal to new my location overlay <end><start> the initialize method and just kind of have to refer that pretty <end><start> set text and we're going to do is set this equal to whatever the input is <end><start> that and then create the import or import our bit my bitmap class so we <end><start> again whatever you guys labeled your highlighted image as and then finish <end><start> as an int because over here in our gen folder our our java just to open that <end><start> and over until you know it's read through the whole document and then <end><start> going to call this get data as well just like the last tutorial so you may <end><start> camera up again at this position zero zero negative five and it's looking <end><start> state which we're going to call s this is gonna be our edit text which i <end><start> title to hekia and there we go and then we also need <end><start> so we're gonna say private sql light database and our database so we set <end><start> choices for you such as center so we're going to click center and then <end><start> public and we're gonna say hot or not and it's gonna take in a context i <end><start> pass we're gonna call it pass toggle or pass hog like that and set that equal <end><start> into your emulator or virtual devices we're going to create a new one <end><start> our string buffer dot to string and then what we're going to say is return <end><start> some stuff so we're just gonna hit ctrl-v and set both of our texts <end><start> gonna do is we're gonna kind of scale it down so we're just gonna say our <end><start> and basically add our overlay to our list within again this if statement <end><start> going to be equal to fill parent and android layout height can fill <end><start> be useful we're also gonna create one new folder and we're gonna call this <end><start> make sure activity works runs for 5 seconds on the splash and then opens <end><start> here again the content referring to our our linear layout so we're going to <end><start> want to update to our description later and all that good stuff as well as <end><start> int and again our location dot get longitude so that's just going to <end><start> that and then just forward slash closed off for <end><start> what we're gonna do is we're going to set up a media player variable or <end><start> final again and the type for each of these variables and it's pretty <end><start> going to set up our array adapter is just typing a ray adapter russia <end><start> that we're going to set up is just going to initialize all of our <end><start> clip the video because that my emulator wasn't started external data no <end><start> delete samantha so we're just going to delete samantha so we're just going <end><start> so as you can see here's our webview actually that's going to load up <end><start> parameters the text so we're going to refer to our random text that we <end><start> to zero to start out with and semicolon and then we're gonna say as long as i <end><start> so i don't know if you guys want to leave a comment just wakelock <end><start> install that google api package what you're going to do is you're going to <end><start> stream music as well and that's gonna get the current volume and pass it in <end><start> our sliding drawer class and what i've done is i've set up the java <end><start> mouse cursor but basically before we extended the view class and you <end><start> from zero and then that's just a way we can do air checking so we're just <end><start> our splash we need to start a thread so what we're going to do is we're <end><start> see what we can set up and then set up some stuff so greater than sign and <end><start> we're gonna do is we're gonna open our hot or not so we can write to it <end><start> name dot set text and we're going to set it to our returned name and then <end><start> to do is we have to add a permission to our manifest so we can write to <end><start> function within our map so we're just going to set that up real <end><start> finally bracket the start activity is pretty simple there's a few ways you <end><start> linear layout just so we have something there so we're gonna say textview <end><start> statements only going to draw if x and y is not equal to 0 so what we can do <end><start> since we're reading xml we're just going to create an xml reader and we're <end><start> and also you might want to change the text size up just to kind of get <end><start> on our project go to prop or android tools and go to export <end><start> and then we're gonna say dot media mounted so if our state is equal to <end><start> in there as well we what we need to do again to set up a byte array <end><start> real quick real easy last thing we're going to do for this graphic <end><start> plus equals plus again and then whatever we're passing in so l row 1 and then <end><start> to check out that website because obviously i didn't it so let's go <end><start> to access our file name so we're going to just say file name and then comma <end><start> really probably the best thing but just to show you guys what it does i'll <end><start> tutorial we're just going to quickly just code that drawer and i'm going <end><start> is radio groups a radio group for the most part then we're going to go up <end><start> basically it's only three lines of code and then it refers to our either our <end><start> new my what was it to new my bring back surface <end><start> exactly what we want because the height i'm sorry <end><start> you can see when we draw our bitmap test we're just going to change this to <end><start> all the text from the edit views and convert it to the string variables <end><start> here we're going to go go within these brackets or if statement this is <end><start> whatever i'm actually going to introduce you guys to is something called a <end><start> going to divide it by a 1 e to the 6th like that and then we're also going <end><start> refer to a class called glu and we're just gonna say dot glu glu look at <end><start> manager which i'll explain what that does here in a second but we're <end><start> and grab the entire class and cut it so don't grab your imports or your <end><start> want to set up the android config to be android config changes and we're <end><start> everything else so we're going to say android weight sum equals 100 and <end><start> date button what we're going to do is we're going to just set up two <end><start> and it looks kind of complicated but it's really not that bad and <end><start> stuff so we're just going to right click on our project go to prop or <end><start> great resource for the most part oh i mean this series is because once <end><start> if it's in satellite mode what we want is our map dot set satellite to be <end><start> methods is set load with overview mode and the set use wide viewport <end><start> reid extends async tasks it's been a while i think since we use this but <end><start> on seek bar change listener so there we go and then we just have to add our <end><start> maybe like plus our sensor x and then what we're gonna do for our you <end><start> to set up that reference as always so we're going to just say webview <end><start> it and again we have to export it so we're going to go to android <end><start> it away so what we're going to do is we're going to say gl again <end><start> is we're gonna say our save button dot set visibility and and what we want <end><start> google maps emulator something like that we're going to select our target <end><start> int and again our location dot get longitude so that's just going to <end><start> preferences once we open up our preferences we're going to go to <end><start> working with that pretty soon so that's it for this tutorial guys we <end><start> gangster-style just going to hit dot stop and then tts dot shut down <end><start> good so now what we're gonna do is we're basically going to go into our you <end><start> going to do is just say text-to-speech dot set language and we're going to <end><start> the initialize method and just kind of have to refer that pretty <end><start> called input that we set up we're going to say input we're going to say dot <end><start> and drop it within our class here now let's just check of references make <end><start> is we're gonna say we're in say again <end><start> public boolean and say should override url loading and this is going to be <end><start> we're gonna say - and then we take our bitmap so we're gonna say - bitmap <end><start> sure it works and i'll show you guys how we can use those preferences <end><start> missing equals and then within quotations banner all up case and <end><start> so you won't have to worry about it i mean we can change that to fill <end><start> whoa what's going on alright we're going to create a new string array and <end><start> we're gonna go above our class and we're gonna set this equal to static final <end><start> we're gonna say instead of city we're gonna say temp underscore f and <end><start> too new in this tutorial as you can see the image view is new i guess we <end><start> make sure it works oops and we're just going to scroll <end><start> this and above our try we're just going to set up this string here so <end><start> for the x value again it's since it's center alignment we just kind of want <end><start> again alright hopefully everything works now but uh alright that's better <end><start> activity has full screen so where is that so we're just going to leave <end><start> by yourself but we're going to say data we're going to call the main one <end><start> and then type sinner and that's about it we can change the text back just to <end><start> say our main dot this which is referring to the context of remain class and <end><start> say dot set text to our new string that we just created called the returned <end><start> our map view then we're gonna say dot get projections or get projection <end><start> slash s ch e ma s android.com forward slash a pk for /li b forward slash <end><start> if it's button set picture or take picture i'll do this method within <end><start> then we have to implement our class implement that that class so we're <end><start> cut off the bottom 10 pixels so we're going to find our toggle button and <end><start> of what i wanted to show you guys and then one other thing that we can do <end><start> called and notify method we're just gonna say finish and after we hear <end><start> do whatever is right here we're going to hit break and if it was the case <end><start> clicked this cheese variable is going to equal starting point the fifth <end><start> to the mode so basically what the mode says is it's kind of the way that <end><start> visibility of our button in this tutorial anyway so what we're gonna <end><start> have to import this and what we're going to do is we're going to say get <end><start> going to create a string and we're going to say this is our data we're going <end><start> we're gonna call this columns and we're gonna say new string array and <end><start> what we're gonna do is we're gonna say new alert dialog and then we say <end><start> just set up our variables such as button make sure it's the exact same as <end><start> we're going to click that and i thought i would have taken us to where we <end><start> trying to think what we can do that's <end><start> widget config and that's gonna basically widget config and that's gonna <end><start> just finish it because the other problems pretty simple as well so <end><start> is if extras is equal to null which we want it to be so our extras which <end><start> android and tenth dot set type and we're going to say within quotations <end><start> call this display when those part that's decent name whatever and <end><start> have a text view and then we're gonna create our hot-or-not class and <end><start> called classes and within the brackets we can say for something like that <end><start> for the context generally we'd say this or something of the sort but we're <end><start> renderer so we're just gonna say implements render so we get all of <end><start> going to go into our menu class and we're going to just define one of <end><start> temperature all different types of sensors that might be available so <end><start> like variable and we do that by parsing and so we're gonna do is we're <end><start> parameters for the most part so instead we're going to say basically we got <end><start> equal to the context that's being passed in it's basically now we just have <end><start> table and the columns and all that stuff so let's just make sure <end><start> with so we're gonna say r dot layout dot widget and again that's what we set <end><start> dot google dot ads so i know it's kind of long but you guys wanna make <end><start> floats for float variable variables sx for starting x point sy for starting <end><start> variable pass hog which is our toggle button so pass tog and we can hit <end><start> shared preferences we're gonna say shared <end><start> say as long as a request code is equal to basically our check that's <end><start> right click within our package explorer now if you guys exited out of <end><start> type string called adapter so it matches right here now what we're going to <end><start> checkbox as checked let's uncheck that just to make sure <end><start> actually going to cut that textview and paste it within our first row here <end><start> with so we're gonna say r dot layout dot widget and again that's what we set <end><start> and we're just going to set up our can write dot set text to initially be <end><start> that and we're pretty much we're pretty much good to go here with the <end><start> again it's gonna be of the type new boston and as you can see it opens <end><start> website and what we can use is a method called we're going to use this on <end><start> up to be a new intent object and then we're going to say bundle as well <end><start> gonna say new hot or not and again pass in the context of this class and <end><start> to context dot audio service so now we can you know mess around with the <end><start> just gonna say whoops all right travis and you know a string would work <end><start> linear layout and all we're going to do is say subtract <end><start> something like our holder and there we now we just have to import <end><start> implements location listener like that and again we just have to hover <end><start> this equal to 50 just to start with and then we're also going to define <end><start> short and then we're gonna again say our <end><start> something like that again this is just kind of a value that's going <end><start> settings back for our superclass so as for now we're getting in there as <end><start> to do that you can just cut this line here err cut it and paste it <end><start> you know the thing that we're looking for so if we hover over here we can <end><start> event and we're going to call that e and a map view which we're going to <end><start> just going to say new load some stuff which is going to your class name <end><start> the most part which we're just going to use the default for the most part <end><start> be conscious of slower devices that you know will download our app from <end><start> new boston and i'm just going to say key store hit enter and then we have to <end><start> the coordinates of the points and so we're just gonna go into eclipse <end><start> implements location listener like that and again we just have to hover <end><start> and if we refer to the value 0 that's going to give us the pretty much the <end><start> copy paste we don't need to redefine our tab here or a spec so what we're <end><start> you guys simple stuff for the most part i just wanted to show you guys <end><start> and then we're setting the gravity within java so click our text play <end><start> data into this class but now our start activity <end><start> and now when we run our application let's hope everything works all <end><start> the ids of those buttons so we're going to say case then our dot id dot <end><start> forward each time so we're going to say move to next and then open brackets <end><start> dot get fit get fit get action equals motion event dot action action <end><start> linear layout which you guys should be pretty much familiar with then <end><start> be called when it when our widget updates so we're just going to <end><start> of the thread and kind of make it more complete for the most part so what <end><start> short and then we're just gonna say dot show so we don't even setup <end><start> need to do is we need to set up our thread which is called our thread <end><start> going to set up a new variable above our class and we're gonna say send send <end><start> here out there'll be a website no no no here out there'll be a website no no <end><start> because as i'll show you real quick with our emulator and again you guys you <end><start> going to say our helper dot get and you can see we can either get readable <end><start> then we need some way to read it so we're going to set up a <end><start> to this in the next tutorial so i'm just gonna say next tutorial so we're <end><start> this equal to or attributes that's being passed on orders and copy that and <end><start> dot get y so there we go we're gonna kind of have these different x and <end><start> we're gonna say canvas dot draw rgb then we're going to put <end><start> something like that then we also need to say android id <end><start> intent intent we're going to set this equal to the pending intent class <end><start> to say our l equals relative relative layout find view by d r dot id dot <end><start> well actually let's run it real quick make sure everything <end><start> this my bring back and again class name should be uppercase so we're going to <end><start> resource folder we're going to click that and then we're going to say <end><start> and then it's uploaded our apk shows all of our permissions that we're <end><start> we're going to refer to here so we're going to say array /list and android <end><start> equal to 200 if we got some sort of an error so we're going to say <end><start> and we also want you know map dot set street view to be true and <end><start> locked as is so we're going to say android enabled and we're going to <end><start> is a context so private context can't spell and we're just gonna call this <end><start> current volume on the person's phone is so we're gonna say sb dot set <end><start> and then it's uploaded our apk shows all of our permissions that we're <end><start> text view so we'll do that above our <end><start> adapter and you just say adapter and this should be kind of familiar with <end><start> there and again what we're gonna do here is say our surface view equals <end><start> class that extends the overlay and when we hit the motion event down that's <end><start> use more you know we don't want to use up memory that <end><start> to start down here and we're basically good to go i mean now when <end><start> then again we're going to relate to our gl 10 class dot gl underscore depth <end><start> we're actually going to change this one we're going to say at <end><start> and then after that this is where the magic is gonna happen down here <end><start> client protocol exception input/output exception and a <end><start> breath for reference and say this is a reference and save it and then go <end><start> basically we set up our our bitmap already so all we have to do is say <end><start> shoot it up to this constructor we're going to bound the center of <end><start> basically bridges over to the xml and so again when our program starts it's <end><start> as we we're just also going to open our starting point class as a reference <end><start> to you know set the information set our city if there is you know a reference <end><start> it's going to code out everything until we do something like another <end><start> we're just gonna say gl gl matrix mode and we're going to set this equal <end><start> frame layout just really doesn't care like i said and then we can still <end><start> we're just going to say prefs or are going to say our file name <end><start> and we say dot set and as you can see we have a left top right bottom so let's <end><start> surface we can say our surface view dot and we now have these methods that <end><start> the p&amp;g or the extension you're going to get an air as well so you don't want <end><start> happens if everything works properly it's going to close our file <end><start> getting there again or whatever you guys typed here that's what you're gonna <end><start> browse and again i told you guys to set it up in your hard drive so it's <end><start> element and just say disabled client state and again we're just gonna <end><start> on pause right there and then we're just going to say wl dot release and as <end><start> just say this is equal to new intent and then the package name we're gonna <end><start> our menu hit preferences and as you can see we have our default value of <end><start> travis's and now let's go back menu preferences change your list to <end><start> that the phone has in this one what we're going to call erb basically <end><start> we did with onclicklistener the difference between on touch <end><start> you guys want to make this method be called that's going to return a <end><start> can use and now there's a permission within this called android <end><start> so it's going to tell us what position was <end><start> and sketchy right now but all you need to do is click right here and it <end><start> you guys want to think about it and then for the second <end><start> the most part if you double-click on this main one it has it set up for <end><start> toast dot set length be short and then we know we have some sort of an air <end><start> animation stuff again if you guys want to learn more about game development <end><start> back surface copy that and then we're gonna go into our excel accelerate <end><start> it's kind of a string reference and again we're say android content dot <end><start> constructor because again any time this this class is accessed it's going to <end><start> just going to return turn data as well because hopefully we got some sort <end><start> so as it is just clip the video save some time but basically i just said <end><start> passed in to our pinpoint arraylist and then all we do is we use our <end><start> what we're going to do is set up a not something called an id we're going <end><start> say add unimplemented methods and down here is our online click listener <end><start> everything set up for the most part and now what we want to do is we want to <end><start> parent right so we're going to set up to the right of basically the textview <end><start> to do again refer the recognizer intent and we're going <end><start> when you define two different you know the portrait view in the landscape <end><start> stuff within the xml so what we're going to do is say edit text and then <end><start> http variable which we call the client and then we're just going to say <end><start> reference so it's referencing the string hello and that string is located <end><start> database variable and we've used the method you know cori we've used <end><start> how we're going to do that is through array list and it's going to be of <end><start> examples you want to follow this one exactly because we're just going to <end><start> type our buffer is and again it's the short type that we have up here and <end><start> whole class we're going to say new my bring back and then we're going to <end><start> permission tab here in the android manifest so just click that and <end><start> passed in to our pinpoint arraylist and then all we do is we use our <end><start> and our can read dot set text to false as well so if we get a false we know <end><start> again a string because that's what we're working with we're gonna call <end><start> new array that we set up here which we called our gba vowels so that's <end><start> drawer can do so we're going to say set on drawer closed select <end><start> in just leading some of those those things i just wanted tested test <end><start> text we use name but that's what we're going to use i guess basically <end><start> go to new class and we're going to call this menu now hopefully you guys kind <end><start> create method here we're gonna set up our ball reference real quickly <end><start> but for example if you just said www dot it's not going to work you have to <end><start> what we're going to do we're going to say external data dot this again <end><start> that we collected from the data that was received after our camera <end><start> for your action name and then we're going to go into our sql lite <end><start> and making sure you guys are following along for the most part but uh yeah <end><start> byte array call it data and this is going to be equal to new byte array <end><start> start and we're gonna set this actually let's set this up at the top yeah <end><start> your intent dot action and we're going to <end><start> up and it says what's up gangsters click on that it opens back up this <end><start> and we can kind of review this later so our resource is going to be equal <end><start> we're just gonna add that configuration class back in again we just have <end><start> all that good stuff so in our surface view dot resume and there we <end><start> select bottom and do 10 density pixels as well and check that <end><start> reference so what i want you guys to go to or where i want you guys to go now <end><start> our key value again our key our row id and that's basically going to be <end><start> activity for results it's going to open it up we're going to say super sexy <end><start> so again nothing new for the most part and that's properly it for this <end><start> we're just going to say again like try and then i n dot close and then <end><start> the alpha level let's do that one this first argument is the alpha level <end><start> change this one to egl config as well as for this second method which is our <end><start> stands for his simple api xml and then we're gonna say <end><start> just need to call this method set up variables within our on create method <end><start> lines and uh then we're just gonna say keyboard hidden and again we're <end><start> textview to and valid to start with and we're <end><start> just show you guys that this act activity where this application <end><start> say a plus id content for a linear layout which is the actual content <end><start> layout and we're going to close this statement off here and delete it <end><start> and here's the action name so this is what we're setting our intent equal <end><start> set up within our constructor for our class so we're just going to say <end><start> what we're gonna do is we're gonna say new alert dialog and then we say <end><start> we're going to do is we're in say milliseconds is equal to <end><start> going to say set up a string called display we're gonna say display is <end><start> going to set it up with with an on create method as well so i'm just <end><start> have to change that to make the connection you know with our specific <end><start> we're going to say shared preferences and we're going to say shared <end><start> our database to be open and able to write to it so we also want to be <end><start> scroll down to our bottom again just kind of like when we set up a method <end><start> two methods that get implemented when we implement the sensor event listener <end><start> position zero and then we're good to go now what we need to do is we need to <end><start> the next tutorial and we'll get into some you know a little bit of <end><start> for the internet and i'm just gonna go down to the permissions tab as well <end><start> data base and for a brief moment i want you guys to reminisce about when <end><start> going to be our touch point reference then we're creating a custom <end><start> basically all we're going to do right here is this example the most part <end><start> want to throw some throw some exceptions so we're going to say throw a <end><start> class we're going to say our class name menu dot this and it already has <end><start> this right method so what we're going to do now is convert our string that we <end><start> then just reference our action name which is comm dot the new <end><start> sorry if that's confusing we're going to say sup a new string variable call it <end><start> like that but just show you guys an example we're gonna set up our <end><start> priority we're gonna set the zero the loop we want to set to zero because <end><start> dress dot get and we're gonna get the location which we set as zero and <end><start> tutorial and make sure you get another another key for your application <end><start> need to know again here's just a cube and we can rotate around it but that's <end><start> now we have a random string variable which is basically a random integer <end><start> also do android gravity instead of layout gravity and set that equal <end><start> also call that list as well we're gonna set up summary this is a list to <end><start> view within your actual class then you just hit import view delete this <end><start> sleep so let's get into it as you can see this type of data is called <end><start> basically we have three points so we're just going to say 0 1 &amp; 2 now we have <end><start> have that working but the problem that we may be having is again this is <end><start> our starting our final y and our final x here hopefully this tutorials not <end><start> screen and it has a click listener attached to it so we're gonna save <end><start> house within our on click method hopefully you guys know why by <end><start> say what the message of the notification is so we're gonna call that body <end><start> going to set equal to after we import we're going to set it equal to <end><start> control v and paste the reason why you did that is because we set up these <end><start> we're gonna go above our class and we're gonna set this equal to static final <end><start> they're both gonna be long so we're gonna say a long starting point or <end><start> what we're doing now that you can actually see what it looks like <end><start> even want to fill out more information about yourself you can doesn't <end><start> well first we want something that's going to happen or be able to be <end><start> called or using a method called open file output and what it takes within <end><start> run through everything and check if that's true or not and i'll show <end><start> plus equals plus again and then whatever we're passing in so l row 1 and then <end><start> gonna say this id we're gonna say r dot raw <end><start> null within the pause after it's done and after it's joined in everything <end><start> for the most part the x value of what was pressed or where is pressed on <end><start> this onclick method again these two brackets and when our application <end><start> imports right click add a again a on create method so nothing new there <end><start> gonna say our list view which we called lv and we're just gonna say dot <end><start> and then dot to string again nothing new and then we're also going to set up <end><start> update media update files for the user to use something like that so <end><start> like this and i'll explain everything as we go here and does not equal <end><start> basically start our intent so we're going to say start <end><start> data because yeah this is the frame this is i mean nothing new for the most <end><start> we're looking for so all we're going to do is going to say return within our <end><start> here so we're going to say flippy and one of the things that we can do is <end><start> methods is set load with overview mode and the set use wide viewport <end><start> we're just gonna say if cursor is not set to know again that's expression <end><start> starting y so we're gonna say starting y minus plus i mean half the height <end><start> call del row but l row like that and then the fourth parameter we're going <end><start> we start up our activity we scroll down to the weather xml parsing class <end><start> the root element for the xml file this kind of gives us a starting ground <end><start> import both those and what's up our references now are confirm equals <end><start> you kind of define the specs and then you from the tab host you add the <end><start> what we're gonna do is we're gonna say new alert dialog and then we say <end><start> create an output stream and we're gonna call this os and we're just going to <end><start> the http forward slash forward slash wwe new boston or something like that <end><start> of the person's device through again the audio manager so that's pretty much <end><start> say is we're going to say web or our brow again which is our web view <end><start> manager so i'm just going to cut that and put sm here and then scroll up <end><start> the location so import that as well and also a string reference and we're <end><start> kind of explain what's going on but if you guys want more information <end><start> what i'm doing right now i'm just finishing setting up some of <end><start> want to throw some throw some exceptions so we're going to say throw a <end><start> one seconds that's lap two fifty four <end><start> android xml file or you can go to other android and then android xml file <end><start> from this top left corner so we need to keep that in mind as well and i'll <end><start> by going android dot provider dot media store basically all our media is <end><start> can set this equal to new edit text again nothing new here for yes et <end><start> we're going to do is say input type dot type class text again and you're <end><start> to this in the next tutorial so i'm just gonna say next tutorial so we're <end><start> with indexes so what we're gonna do is we're going to set up a private <end><start> text to be here and so we're going to say like something like what's what's <end><start> done using it we're gonna done using this edit text we're going to say <end><start> out the website to make sure the javascript is enabled so we're going <end><start> what we're gonna do is we're gonna extends activity as always and <end><start> or whatever find view by add a r dot id dot listview voice and we're going <end><start> call the sql lite example and i put that one in our menu activity so you <end><start> to know how to set it up so let's go into our on create method we're <end><start> maybe leave a comment placing endpoint at the location <end><start> the next tutorial but quickly let's just talk about everything that's <end><start> like that so what we need to do is we need to create this file output <end><start> my shared preferences here in quotations or something like that and it would <end><start> for the most part so we're going to say is we're going to say counter and <end><start> and then we're gonna get down into the xml reader now what sax and what <end><start> going to say is we're going to say an eye x equals ni x plus are scaled x <end><start> our activity starts so what we can do again is just something like wl <end><start> the capacity needs to be what it can handle how many bytes were working <end><start> our stop time - our starting time so basically it's going to be how long <end><start> resource folder we're going to click that and then we're going to say <end><start> as you can see right here i already have as you can see right here i already <end><start> sure the name is all lower cased and also you guys want to create maybe <end><start> that's being left behind so let's scroll down and here we go basically <end><start> develop for the two point two platform and this size is basically a virtual <end><start> like that now this is the basic setup for setting up a new project we're <end><start> something like that and then again we're just gonna add our imports and now <end><start> pops up on the screen if again they hold down their finger for longer than <end><start> stream so we're gonna say right and we're gonna write data and then we <end><start> called camera data we're going to again set this up above our classes so <end><start> then again we're going to relate to our gl 10 class dot gl underscore depth <end><start> alias that we saved within our key store and then we're gonna say space - <end><start> but anyways so that's basically the <end><start> going to set this equal to textview and text view results so there we go <end><start> banner and and then we have to enter our ad id which i'm just making up here <end><start> that bundle so we're going to say oh actually we need to set up the <end><start> say we're gonna set this equal to our byte buffer which we call b buff dot <end><start> preference so what i want you guys to do now is open up our data leave no <end><start> can see it takes an int location so we're just going to say zero here <end><start> gonna do is bound the center of the drawable item so we're gonna pin <end><start> uri and then we give the website we want to interpret the data from so <end><start> of gives us the default sax parser factory and then we can just kind <end><start> really care about grammar so a person's name we're going to say travis <end><start> result and we're just gonna say <end><start> probably gonna blur out my information because i'm sure it's against the <end><start> gonna say new hot or not and again pass in the context of this class and <end><start> to do is we want to set up this variable called our database which again is <end><start> to say content values and this is kind of like a bundle like i was just <end><start> or actually if we click on our edit text our keyboard comes up then we do <end><start> hopefully i don't know it these tutorial this tutorial is just pathetic i'm <end><start> basically what the holder does is it can tell us if the surface is valid <end><start> we're just going to set up a new intent i equals new intent and then <end><start> say e x dot update entry something like that if we want to pass in all of <end><start> to refer to this on click method that we set up and we got that because <end><start> is we're going to go into the list activity we're going to look <end><start> and we're just going to set up our can write dot set text to initially be <end><start> as well so gl gl disabled and again the gl 10 class dot gl coalface so there <end><start> class within this class we can still have access to the x and y which is <end><start> we're going to set this equal to b the system dot get property and <end><start> within our on create method set it up to or file name and set up how we want <end><start> whoa what's going on alright we're going to create a new string array and <end><start> say add constructor and we're also gonna hover over and add the <end><start> byte buffer class and we just gotta you know tell the buffer how much how <end><start> indicator and then we're going to call this first one stopwatch and <end><start> well most likely this is pretty similar <end><start> and our arraylist that we set up so we call that arraylist called pin <end><start> we again implemented onclicklistener and this switching case set that up <end><start> to say system 4 into the system class and when we hit dot we can get <end><start> in milliseconds here so this is one and seconds we're going to perform an <end><start> say dot set the title and whatever our title is like pick something pick <end><start> values and then we're going to set this equal to new content <end><start> application real quick and make sure it works i'm going to save it run <end><start> android dot a p-- widget dot action dot an all uppercase app widget <end><start> somewhere i save so much stuff on my desktop it's <end><start> i'll catch you in the next tutorial well where we're gonna get into <end><start> on create methods so just go within the brackets of our oncreate and we're <end><start> it in the manifest and i mean i'll start because this tutorial is kind of short <end><start> surface class and within here if you guys remember we set up a inner <end><start> explosion and this is gonna be an int okay so let's let's set this up <end><start> all we have to do is type key store or key tool i'm sorry - list space - <end><start> add a sleep within here so again this kind of review thread dot sleep <end><start> refer to we're going to refer to the app widget manager <end><start> see it takes criteria and also a boolean value so we're gonna set the criteria <end><start> if statement when they release so we're gonna say <end><start> gonna say int max v and we're gonna set this equal to our audio manager dot <end><start> gonna get the one from google so when we get into google maps we can use the <end><start> over here it shows that it takes an intent within its parameters and <end><start> starting method and again we're just gonna right click go down to <end><start> we're going to say check and then it's gonna you know just set the text <end><start> gonna say oops at plus ford's f plus id ford / webview browser or something <end><start> whoops cursor dot get string and then <end><start> then we just have to update our database so again we're going to refer to <end><start> and we also want to add again you know the oncreate method pretty general <end><start> and we're just going to hit and we should get something like this so <end><start> to know how to set it up so let's go into our on create method we're <end><start> little bit crazy now we're just going to say our <end><start> application and we're just going to click that hit next and then we <end><start> that bridge / bridge over to the xml we're going to say button find view <end><start> going to just select one of these smaller ones <end><start> hit a comma and basically set up a variable that we're going to <end><start> tutorials that just makes me really create or makes me crazy i just want <end><start> set up so you know pay close attention i wasn't even going to show you in <end><start> going to add is whatever is being passed in our username right so hopefully <end><start> browser of some sort so it's going to be pretty simple nothing too new for <end><start> class this is coming from what are you talking about we're going to define <end><start> time we deal with strings we're gonna say g-unit download that font cuz <end><start> last time just so you guys know what what's going on and now all we need <end><start> that we set up so we're going to say crazy dot next int and then we're <end><start> available to the user so we're going to do is we're going to set up a <end><start> again add our imports and let's set this up what this notification manager <end><start> gonna create another class called gl so they're all kind of close together <end><start> configure again the configure is going configure again the configure is <end><start> data class for the for sending data and then we're going to open up our <end><start> think about we're going to call it intent our new intent basically <end><start> whatever let me pull this over can you go into finder documents android <end><start> tutorials ago i'm not sure but this is the if-else and we also converted <end><start> this save file two buttons confirm and <end><start> sweet you know a lot of you guys have priced in google maps before but <end><start> then again we're going to relate to our gl 10 class dot gl underscore depth <end><start> launched when you know the widget is placed on the home screen so again <end><start> a new spec so we're going to say tab spec and we're going to call this <end><start> no spaces and what's our target and be developing for we're gonna have <end><start> our font and now now we can use this font so let's go into our on draw <end><start> override and basically what you are all when we use the load url method on <end><start> whoa what's going on alright we're going to create a new string array and <end><start> like that and we're just going to set this equal to persons underscore <end><start> pin point you can think of it as and handle it within that class so <end><start> edit text and we also have one last one which was our text view we're going <end><start> two parentheses and then we say dot execute whoa can't spell and then <end><start> no spaces and what's our target and be developing for we're gonna have <end><start> that's the case we can set up something within these parentheses so what <end><start> that and then go into your data class right here and we're going to do <end><start> can just make it up so we're gonna say entry and then we're gonna say <end><start> just gangsta and you know we are all gangster yourself there we go we set <end><start> have to do some boring and boring stuff but there's our twelve triangles <end><start> alias maps key store hit enter and then we need to create a password that <end><start> have to import this and what we're going to do is we're going to say get <end><start> what we're going to do is right click on our package called maps go to <end><start> refer to our unique id because you know we don't want it to cancel <end><start> so what you guys might be thinking is before this finish method we can say <end><start> new file output stream and we're gonna refer to our file <end><start> that once we hit the save button so we're going to say save and now <end><start> return some data to us so we're going to do is we're going to right click go <end><start> context that's being passed in through this constructor so that's pretty <end><start> again it's an xml file within our drawable folder but that's fine now <end><start> click that enter again let's just test link in and you know if google <end><start> implement methods and there we go here we have everything set up for the <end><start> want it to do is we're just going to say new load <end><start> to be nine that's pretty good and then we're going to update database heck <end><start> while file input stream dot read does not and we're gonna say read data <end><start> for you guys to use just search activity and it'll go to the lifecycle of <end><start> within its parameters so we're going to say a rectangle which we just <end><start> few tutorials ago so we're gonna set up a switch in case and we're just <end><start> our info dot get data so obviously we don't have that get data class <end><start> temperature in fahrenheit is 77 you can also you know just say whoa whoa <end><start> mouse cursor but basically before we extended the view class and you <end><start> that we set up and this is probably still looking kind of confusing for <end><start> say is our xr reader xml reader dot parse and <end><start> our stop time - our starting time so basically it's going to be how long <end><start> but for example if you just said www dot it's not going to work you have to <end><start> events you can you know start the time right when they touch the screen <end><start> problem comes or the difficult part of the jdk is setting it up now i <end><start> what's up guys welcome to your 22nd android tutorial for the new boston <end><start> gangsters gangstas and you know whatever else we want you <end><start> up and you know we'll do that so you know that's basically the pending <end><start> what we're going to do is within our button add tab this is where we're <end><start> pause and resume methods to do ok so now let's think about how we can do <end><start> clear up a little bit we've done quite a few tutorials but yeah we're gonna <end><start> is one and then we're also going to say get the content after we open up <end><start> say within our on click method after we <end><start> install it and then also what we're going to need is we're going to need <end><start> we're just going to get the length to determine how many there are so now <end><start> take a picture but what alright well hopefully we can <end><start> going to say middle rec for like the because we're going to put <end><start> class sql view sql view xml and hot-or-not java class so hopefully <end><start> that's our first point so you can even leave a comment here like point one <end><start> gonna do now is basically i'm gonna go to the place where i downloaded this <end><start> can't spell dots decode resource and then for again for this one we say <end><start> try and a catch around this this sleep method here so that will kind of save <end><start> ad id which i'm just making up here and that creates again the ad for us and <end><start> set a content view to our configuration layout so set content view in our <end><start> activity works we're going to type in a name travis as you guys excuse me as <end><start> here our internal data we're going to set up a new class so we're going to <end><start> parameters one for basically you can think of the path or the folder <end><start> going to use for the most part by memory it's going to be a lot simpler for <end><start> sure you just change that and within your oncreate method again just times <end><start> set our text view said our textview variable is called <end><start> summary summary equals a check this box for the most part nothing <end><start> this is a different reference but for the most part it's all the same again <end><start> dot get fit get fit get action equals motion event dot action action <end><start> that's what i kind of want to show you guys and again we're just going to <end><start> that and we're also going to set up context that we're gonna use for <end><start> in the context of this so basically it's gonna say hey we're creating a <end><start> switch case down here we're going to say these are kind of the answers for <end><start> database underscore table so for table name exists it's going to drop it <end><start> click and create a new class you know just the standard stuff you guys <end><start> it's just an instance of this class we're also going to set up a context <end><start> one again going clockwise so 3 comma 0 comma 1 and then we're <end><start> of gives us the default sax parser factory and then we can just kind <end><start> things i'm sorry an edit text we're going to call this input and set <end><start> trouble reading that because i was trying to look at my camera and at <end><start> dot open then what we want to do is we want to create a string so we're <end><start> and revision to where that's going to be located is under the available <end><start> gonna say a gl 10 dot gl underscore float and the stride with zero and <end><start> catch and that's just print stacktrace can you guys don't really need to <end><start> get method something like that example e^x maybe hit finish and this is a <end><start> class but just to show you guys maybe leave a comment example setting <end><start> want to do with this i haven't i'm not quite sure exactly what i want to do <end><start> type something like test1 and we're going to first let's say we load <end><start> that's just going to finish the activity once this goes on pause so hopefully <end><start> resource folder right here hit finish and then just right click hit <end><start> here so we're going to say if location is not null then you know we're <end><start> event and get the value so that's what we're gonna do it we're gonna say e <end><start> sleep for a little bit yeah you're like sleep we're not to do that yeah i <end><start> it's just going to get everything set up for the most part now what we also <end><start> reference for the tab host and i'll explain that all in java but now <end><start> gonna set our hotness edit text to our returned hotness so there we go <end><start> to the extras that's being passed in because again if it's not null <end><start> function within our map so we're just going to set that up real <end><start> and say current v and we're going to set this equal to again our audio <end><start> what you guys want to type out is a key tool - list - alias android debug key <end><start> part and we commented out some stuff so we're going to add some <end><start> can do is we can say float center center x is equal to again our canvas dot <end><start> this point index array or list we're going to set this equal to <end><start> method and we're going to set compass equal to new my location overlay <end><start> toggle button is pressed and then we're just going to kind of clean up some <end><start> just set up our variables such as button make sure it's the exact same as <end><start> find that button add one and we're just going to delete the text and we're <end><start> or false so what we need to do is return something so we're going to go <end><start> say our file and say equal to new file and we're familiar with you know just <end><start> some variables back equal to zero and kind of the easy way to do this is <end><start> our layout width fill the parent because that's what that's what the <end><start> so it won't won't do that it's pretty simple i know i promised yet i told <end><start> for your action name and then we're going to go into our sql lite <end><start> to open it and then we can also do fos closed and we would write within <end><start> takes within its parameters an input stream so we're going to create a <end><start> to give you guys problems so what we're going to do is set up the sound <end><start> say if explosion does not equal zero we're going to play otherwise it <end><start> password was for your alias hit next and then it says destination already <end><start> the initialize method and just kind of have to refer that pretty <end><start> looking through all this code for where you typed the <end><start> to say dot and then we're going to say <end><start> dot put string and then we have to set up a key and we're going to call <end><start> the next few tutorials but uh just to give you guys kind of idea how to <end><start> we're going to just say kind of get the basket so we're going to say <end><start> we're gonna say like a point two five f for the red for the green we're <end><start> so basically it doesn't really make sense to you guys sorry for even <end><start> like point to blue so again we can go from 0 to 1 and for alpha we don't <end><start> basically this on draw is going to be looping so we can say changing <end><start> that we set up so we're going to say crazy dot next int and then we're <end><start> basically this through the football and we need someone to catch it so <end><start> gonna create another one and this will be actually from our edit text so <end><start> to do is we're going to create a new java class you guys probably <end><start> lite open helper open helper and just you know set up a new pair of <end><start> new http get and then we're going to refer to our url lowercase dot - <end><start> but we're gonna go down and we're gonna hit our message it's still gonna open <end><start> guidelines of how to set up a widget and all we're gonna do is we're going <end><start> exception variable arms i'm sorry that's the type of exception we're looking <end><start> for the next few tutorials if you choose so what we're gonna do is we're going <end><start> reference so we can refer to it in java so we're just going to say id <end><start> this text view as well so we're going to say just quickly android layout and <end><start> then we're going to say a method this is boolean so it's me true or false so <end><start> we're going to basically put the string in that column and then we're also <end><start> i clipped the video because it was taking too long to finish this <end><start> say x is equal to and then just our event which we called e get x and <end><start> so we're going to just save fos dot i'm sorry fos equals open file <end><start> preferences whoops and then we're gonna break as well <end><start> gonna change this method the info to dot set temp called temp maybe and <end><start> start off this intent that we've been kind of defining so there we <end><start> for the most part so we're gonna say check box just felt like that yeah <end><start> being passed in called db and we're going to use a method called execute <end><start> tells you the methods that we can use and there's a draw method that we <end><start> say is we're gonna say sb for seek bar and then we're gonna say set max <end><start> webview here find view by id and then we're just gonna say our dot id dot <end><start> method that we just created e^x we're going to call this test something <end><start> here and we're going to change this to et sindh because we're going to <end><start> forward slash so now it's just going to comment out this block of code <end><start> refer to our tab host and then we just say add whoops tab <end><start> say set on click pending intent you gotta go pending yeah what's up with <end><start> say add and we're gonna say uses permission and then we're gonna go <end><start> know how to do this as well so we're going to say button because we have <end><start> a button so basically what i want you guys to do is hover over the button <end><start> on draw we need to do one method called <end><start> something a little bit new that you guys need to realize when you make one <end><start> we're gonna use that method called on progress change and when we you <end><start> and we're gonna call this exactly what we called you know this <end><start> async tasks and add the unimplemented methods so we're going to add <end><start> set it as a default to true because we want to play music for the most <end><start> need to close both our input and our output stream so just close and <end><start> so we're going to do is just right click on this folder and go to new android <end><start> all we have to do is say start activity and we're going to hit a because <end><start> we want to do is set up our spect and kind of define what we want are <end><start> set this array type array adapter type to be string because we're working <end><start> gonna say x equals and we're gonna say event event yeah event i'm sorry <end><start> drawer that this right here is our handle this button so we can pull <end><start> again thanks for watching guys in the next tutorial we'll actually get <end><start> our application and so again our value is set to one and so it's going to <end><start> we're using and basically there we go now we've set up our manager this <end><start> whatever is within our save and our load button so now that we've copied it <end><start> zero so let's check it check out what this gets shared preferences is and <end><start> here we're just going to say progress and since it is array we have to <end><start> intent that's waiting to happen because it's gonna launch our activity and <end><start> insert endpoint or something and we want insert endpoint or something and we <end><start> let's create that flipper thing that we just created so we're going to do <end><start> going to call this ad and again we just going to call this ad and again we <end><start> with this kind of parsing and json objects makes it very easy for us <end><start> we're going to do is we're going to say get intent and this is a method so <end><start> make sure it works oops and we're just going to scroll <end><start> music because basically we're creating path is that we can save something <end><start> going to set this equal to textview and text view results so there we go <end><start> this is where we're actually gonna draw our triangle and all that good stuff <end><start> touch on touch method basically it's returning false so once it gives us <end><start> equals how's that blue import that and we're going to set this equal <end><start> and we named that ii so within here we can do the standard for the most <end><start> we're going to say get settings and we can do a lot of things with <end><start> to basically when we use our open method that says throw exception we're going <end><start> what's up so what we're gonna do is we're gonna paint our background or <end><start> so it's going to tell us what position was <end><start> we're just gonna scroll down to basically this line of code that <end><start> up a http entity called e and we're going to call this our our dot <end><start> and we have our on click method again nothing new and we're just gonna say <end><start> to null right at the beginning and then within the constructor we're <end><start> going to go into our what was it our menu class and again it opens it <end><start> equal to which is question we're going to say dot set text and then we're <end><start> well but anyways let's check out our app activity make sure it <end><start> gonna be tv can write and tv can read because this tutorial we're just <end><start> graphical layout which is this and the coding which is this by these two <end><start> most part so we're gonna set our value is equal to get data dot get <end><start> so we're just going to say return true so i'm i don't know if that that's <end><start> that through the window manager which again is a class manager dot <end><start> something like that we're going to set this equal to a <end><start> let me say public class load some stuff and then we're going to say <end><start> make you cry well that's about about all i wanted to chitchat err about oh <end><start> the user of our application so we're just going to say extra and <end><start> textview fine view by d r dot id dot tv show results or whatever you guys <end><start> and then this is the the method that we're going to create so we're going <end><start> method which is basically that string and all the other good stuff just <end><start> set up a variable a time variable so we can say flippy dot set flip interval <end><start> gonna go below this bracket i know you i don't even know if you have to <end><start> make sure that this listview item is the exact same as that new class that <end><start> we're going to just set up a string variable called data return <end><start> we have to do is we have to tell our camera where we want it to be in <end><start> down release toggle views again go back into satellite and yeah it's <end><start> open basically our entry because we just set up that open method and there we <end><start> something like that pretty standard i'm going to set this equal to new <end><start> first thing we need to do is say request window feature and then we hit <end><start> we're also going to put a listview within there so we're going to go <end><start> relative layout to have an id as well so we're just going to say android <end><start> this text view as well so we're going to say just quickly android layout and <end><start> result but for this tutorial we're just going to set up the xml layout so i <end><start> most part then we're also going to set up a couple references for each <end><start> test and that's the text view below all of our radio buttons in our radio <end><start> text and we're gonna set this equal to whatever so this is a message <end><start> we actually see the triangle i said we'd do it again in this tutorial but <end><start> notification we hit our notification it opens up another intent opens up <end><start> clock here and also we can release it so we're just going to set up our <end><start> oops did i do that right what am i what oops did i do that right what am i <end><start> string so we're gonna say string f i don't know and we're gonna get our <end><start> try and go through go somewhat slow through this throw through this <end><start> and there we go we can also do let's see here forgot which ones i applied it <end><start> extra but since we're setting up a list array we're just gonna say get ray <end><start> basically this holds a ton of different projects or packages i'm sorry <end><start> results or data result was it and we can just say dot results maybe dot set <end><start> easy to find so just go to your c drive or your main hard drive and look for <end><start> again you can do so much with this for example if we didn't want to look <end><start> the canvas what we're gonna do is just draw our ball to the screen so or to <end><start> save it and then we have this string array called list which is <end><start> all we did in the last tutorial even though we kind of went through <end><start> the internet so we're going to go down to our permissions and we're going <end><start> forward slash capital t then theme dot capital dialogue or just dialogue with <end><start> above our on create method called show results and we also need to <end><start> see i don't know white i believe is the default not positive so there we <end><start> changed the code but that's how you guys should have your setup because <end><start> your cpu might be slowing down and all that good stuff so you actually want <end><start> stuff within that folder so how we do that is we just say path dot m'kay <end><start> define it so we're gonna say our thread equals new thread and we're gonna <end><start> parent right so we're going to set up to the right of basically the textview <end><start> you go there's just a 25 density pickled pixels of padding throughout this <end><start> workout when you're trying to lose weight you don't want to just kind <end><start> same key store and key alias so we're just going to say use existing key <end><start> set up our language that we want our text-to-speech to speak in and you <end><start> in with internet with our intent check alright so again what we're doing <end><start> refer to our unique id because you know we don't want it to cancel <end><start> we're gonna say load add on create we're gonna set this equal to be true and <end><start> reference could equal the value i mean the string value of 1 we have to <end><start> it's kind of a string reference and again we're say android content dot <end><start> set up and the only other thing we did is i added it on pause method as <end><start> i don't get any errors again i know that's guys i know this is <end><start> you can see when we draw our bitmap test we're just going to change this to <end><start> these methods called get name and get hotness and that's going to return <end><start> say add unimplemented methods and down here is our online click listener <end><start> gonna reference that as well first thing that we need to do is create an <end><start> refer to the environment and see kind of this see if we can get the <end><start> we're going to say shared preferences and we're going to say shared <end><start> content values and we're going to call this cv update something like <end><start> few different ways like in the last tutorial i'll show you guys kind of <end><start> going to copy this and paste this for all three of our columns change it to <end><start> uncheck it and then we can slide it down again our first button is going to <end><start> guys can contact me at that email i'll guys can contact me at that email <end><start> my screen i know it's not really same shape as a screen let me try and get <end><start> gonna go to the android app because that's what we've been developing and <end><start> gonna hit equals invisible gone would be like its destroyed so after if you <end><start> a basically on create options menu and then once that menu inflates that's <end><start> time line and we're going to set this equal to a new json array passing in <end><start> going to go to this on click method it's good going to determine which button <end><start> we want to use throughout all of our class so we define them above again <end><start> we're going to add a key reference so again it can save it we're going to <end><start> and you know that's pretty much it for these tutorials and we're gonna move <end><start> parameters is we're going to reference something from the android sdk and <end><start> format it and then we're just going to throw in some random crap so be <end><start> this overlay list something like that we're going to set this equal to our <end><start> class and then we're also gonna create a new class called gl render or <end><start> command so we're just going to copy whatever we put in within this on <end><start> basically this is landscape mode and this is portrait mode which is going <end><start> probably like what's this new thing all about just don't worry about that <end><start> me travis and what we're going to do is kind of give you guys a review <end><start> going to set that equal to within parenthesis textview and find view by <end><start> we're going to say our edit text was called send et so we're going to <end><start> going to hit that and then after that we're going to say dot size when we <end><start> and for a first button anyways and our second button we're gonna say save <end><start> frame layout there's no organization we can still slide up but that's why we <end><start> but we're also going to do that first seconds as well so we're going to <end><start> we implemented so we're just going to say <end><start> our content view to was it r dot layout <end><start> say set text to result again that's what's being returned from our <end><start> gl 10 class again and just say gl underscore float and the stride <end><start> done but whatever realize is we haven't set up our edit text that reference <end><start> green blue and integer for the most part and just rgb as well or you can just <end><start> button just be widget button widget open because this one's going to open <end><start> data because again this class is looking for some kind of a return method <end><start> just going to set them up so we're going to say button and we're going to <end><start> go so now let's go down to our accelerate class i just want to <end><start> you import tab host then we say tab host like this as well find view by d <end><start> you know what you guys are ready for you're ready for some graphics you <end><start> supposed to so we're just gonna say toast make text we're gonna refer to <end><start> basically with this set load with overview mode it's kind of hard to <end><start> pause or when we aren't actually needing it so what we're gonna do is go into <end><start> basically instead of this text here we can set it equal to our error string <end><start> that's being left behind so let's scroll down and here we go basically <end><start> create a while loop and we're going to say as long as their line is equal to <end><start> hover over and say surround with try and catch and it sets it up for us <end><start> site here but again we downloaded at least i downloaded the sdk <end><start> to add our imports and add our unimplemented methods for click <end><start> manager if the accelerometer exists and if it does what we're going to do <end><start> know variable up there as well we're gonna say database version and <end><start> do is we're going to enable javascript so if we use right now example <end><start> tools in an export signed application package and we're going to click <end><start> the actual specific you know whatever dot jpg or something like that p&amp;g <end><start> center it as well so we're just going to say android layout gravity equals <end><start> that's going to open so and all we need to do is we need to set a result so <end><start> you can see i said this so we need to implement and create a on click <end><start> sure we can read and write everything and we've done that up up here a <end><start> street view to be false and we set up our met our satellite to be true <end><start> going to say set up another add view and we're going to call this ad as well <end><start> canvas i should say when it's unlocked so again this kind of a quick review <end><start> we're gonna say load add on create we're gonna set this equal to be true and <end><start> url and we're just gonna call this website this is gonna be equal to <end><start> result we need to import that method basically on activity results so <end><start> call this display when those part that's decent name whatever and <end><start> you kind of define the specs and then you from the tab host you add the <end><start> we're going to do is we're going to go into our files to many applications <end><start> be it method that we can use so we can say blow up dot inflate which is <end><start> need an unique id is well actually i'll show you but we're gonna copy this <end><start> through of what i've done and hopefully that gets you hopefully that gets <end><start> so we're going to do is just right click on this folder and go to new android <end><start> friendly and what else can we do or we're going to add our actual <end><start> just click on that one and then again we just have to implement that so there <end><start> there's invisible if we want to make it invisible and there's visible so <end><start> hopefully you guys enjoyed that and i'll catch you in the next tutorial have <end><start> text so we're gonna create a string to kind of convert our edit text into <end><start> guys can label that whatever we need to import intent so we can use its <end><start> toggle button is pressed and then we're just going to kind of clean up some <end><start> or the most part so we're going to set up something else called android <end><start> sure you're within this part of the activity line and then we're just <end><start> you know another space or another plus and we're gonna give it the <end><start> just going to copy this and paste it within our or actually copy right <end><start> main dot this or base contacts get base contacts whatever you guys want to <end><start> up one of those within our on create method so we're going to say geo <end><start> value bottom and top all that good stuff and again the left value we're using <end><start> third argument so what we're going to do is we're going to set up our <end><start> this tutorial we don't have a lot of time but let's create a custom pin <end><start> extra results basically so it's just the results and there we go we <end><start> going there so first we need to set up for alert dialog so we're gonna just <end><start> that's being passed in which they just called app widget manager like <end><start> source again override implement methods and not under it's not under a <end><start> supposed to be wrap content again this will just wrap the content of our <end><start> it's working the next thing that we're going to do is we're going to kind <end><start> yatta print stack trace again this is just for debugging we'll get into <end><start> to say toast toast dot make text context or class name which is called <end><start> do it but the method is called start activity i believe that's from <end><start> something like that and then again we're just gonna add our imports and now <end><start> available for you know your set content view basically telling it what it has <end><start> again have this equal and this is just setting up the reference to the xml <end><start> stop variable is equal to again system dot current time and there we go i <end><start> we want so let's get into it again you guys just need to set up an edit <end><start> you can see there's a ton of different things if you guys are trying to <end><start> button password reference and the last thing we have to setup well two <end><start> going to add to it so it's going to get bigger and bigger until it gets to <end><start> going to set up a pending intent i'm just going to call this pr we're <end><start> methods that we can use for this class i should say over source <end><start> i don't know if that's going to confuse people or not but whatever so now <end><start> url dot or actually let's start a new string we're going to say string <end><start> we kind of set it up in xml for a portrait view so we're going to keep <end><start> thing that we need to do is since we're trying to catch some sort of <end><start> do is we're going to say random r is equal to new random pretty familiar <end><start> to a which would be about us it click this menu as well so that's enough <end><start> the state variable to within our on create method to environment dot <end><start> listener or something to this so that's what we're going to do on click <end><start> going to say language model for our key reference and for value what we want <end><start> up now we do this through the power manager because again the wait <end><start> but again again just kind of clarify think of this some data or <end><start> current time from the system which is the android so that's basically the <end><start> again we have to add the try and delete our boolean value format and lastly <end><start> the third one we're going to say parentheses o to d so basically <end><start> of our triangle so that's pretty much it for this tutorial i know it's kind <end><start> some information as well from from our preferences again we have to import <end><start> key was or q is called lists so we're going to say list kind of shut off <end><start> going to call this backpack get a new bundle nothing too new <end><start> width divided by two and we can just copy this just copy this and <end><start> string reference that our whole class is going to refer to as well as a <end><start> you can just flip through them by this you know this command show next so <end><start> a drawable that we're going to use for a whole class so let's define it above <end><start> scroll down to one or again it's not in the list list activity it's under <end><start> result under our data class and this is going to be basically the same as <end><start> two parentheses and then we say dot execute whoa can't spell and then <end><start> it saves it to the most part and we're going to just say name is the <end><start> get to here so now we're just gonna refer to our alert and we're just <end><start> recognition class again a recognizer intent and we're going to say dot <end><start> variable is only recognized within the oncreate method so we can only use <end><start> so we're going to say l row 1 and then e^x x 1 dot close all right so <end><start> being tedious here i thought we could use triangle fans that's what i kind <end><start> and we're going to kind of access whatever we publish progress up here <end><start> input stream or yeah input stream called is equals and we're just <end><start> external data i'm sorry a layout called external data and all this layout <end><start> going to do much but we're just setting it up for the most part again <end><start> created so all that's gonna do is add it to our arraylist that we set up <end><start> reference stuff and use some certain methods with text so here we go we <end><start> oncreate method of our map activity so i just want you guys to scroll down to <end><start> doing right there and then what we're going to say is we're going to say <end><start> according to how far it zoomed in how we're like scaling and all that stuff <end><start> we're going to do what's ever within here and also case our id dot <end><start> you know the only other thing we need to do is we gotta say finish because <end><start> to call this one preferences and then for the id we're going to <end><start> gonna say dialogue call it d something like that or just say new dialogue <end><start> we've done and also get kind of a desired result like i showed you with <end><start> going to be public void set city and what we're gonna pass in to this <end><start> all we do since we kind of redefined what spec is here we're just going <end><start> from zero and then that's just a way we can do air checking so we're just <end><start> format it and then we're just going to throw in some random crap so be <end><start> for the widget so it's gonna be a little bit different than we would if we <end><start> and that's gonna load up on our emulator again what's gonna happen let's i'm <end><start> refer to our tab host and then we just say add whoops tab <end><start> up a geo coder and also we might want to set this touch point before we <end><start> run it make sure that works again our or this button get address won't work <end><start> here both of our our triggers are set to false we can't read or <end><start> a little bit differently than we should be right here we have we've kind <end><start> is we're just gonna copy one of these buffers down here because again we <end><start> of the methods that we can use and create a widget we need to extend <end><start> our sensor manager or sensor manager class and we can pull different <end><start> little bit better maybe we want to center this so we're just going to <end><start> something we're just going to say toast dot toe stop make text <end><start> and just say add view and then what view are we going to <end><start> picnic so what to do that all we have to do is say basket dot put string and <end><start> going to create a new text view so we're just going to say text view text <end><start> then we're gonna put a comma and we can say example 1 and then i'm just going <end><start> the new boston as well and then we have a resource folder and here's <end><start> going to do is just add that reference as always <end><start> again with me travis we're going to do in this tutorials <end><start> as a textview but we're going to look for one <end><start> make our splash activity kill itself so to say because we're just evil like <end><start> dialog like that we're going to set it up to equal anything we're going to <end><start> some help just leave a comment on this paige and i'll check it out and i'll <end><start> we've used a few times now i believe and we're gonna say context dot <end><start> so vert buff dot position and we're gonna start at position zero or the <end><start> going to say intent and we're going to call this email intent something <end><start> xml ns ads equals and then we have to put in http colon forward slash <end><start> seconds and milliseconds for stopwatch application now this is kind of <end><start> most part by using this result code which is our second parameter <end><start> browser our brow something like that and again we're just gonna say find <end><start> part we're going to set this integer array equal to like progress <end><start> takes within its parameters an input stream so we're going to create a <end><start> set up a new type of variable along result and this is going to be equal <end><start> again we worked with 2d previously and now we have to change everything to <end><start> it's just an instance of this class we're also going to set up a context <end><start> that's the string that we're going to <end><start> this equal to you can just delete that and hit equal and it'll pull up <end><start> already be on the market place and you know this video would be made in <end><start> up samantha and 7 which is again our second entry and we can also do one <end><start> is probably the last time i'm going to show you guys how to get your <end><start> going to delete our button actually no we won't we'll leave it i'm <end><start> to have this image that we imported as the background for a splash <end><start> we're just going to print and we're good else we can just make it text <end><start> text paint and that will give us all that other customization that we <end><start> going to set up our array adapter is just typing a ray adapter russia <end><start> we're further away and just quickly i want to show you one more render <end><start> change this to horizontal you know and then check it out it's a little <end><start> website it opens up a new intent and it uses the browser intent that's built <end><start> java for the moment but basically we set up an integer variable that's equal <end><start> going to say set up a string called display we're gonna say display is <end><start> activity that is going to be our configure activity so again just give <end><start> we want our content to be our second tab or our linear layout that's number <end><start> second parameter again if you guys ever get confused with something you <end><start> yet but basically this layout land it's where we're going to define what <end><start> get window token so it basically is going to convert it to this eye <end><start> from eclipse org /downloads we're going to click on that and basically <end><start> to call this information we're going to all we're gonna do is refer to <end><start> thing that we need to do is we need to set up a content values so we're <end><start> can have within our as for our input type we're going to use the one <end><start> and everything will make sense at the end especially this this these <end><start> can't write there we go and so in this one we're gonna say again we're <end><start> just a integer that's going to increment automatically and we reference that <end><start> quickly kind of review here but you know the table layouts something a little <end><start> city all we're gonna do is set up a string called city and we're gonna <end><start> it initially said it equal to null so it's nothing now what we're gonna do <end><start> this and we're going to implement one click and we're going to set up just <end><start> let's quickly just talk about what all these classes are gonna do before <end><start> to put this in so right click source implement methods and let's see if <end><start> to a new gl surface view so pretty pretty default there and that's <end><start> referring to is this class that we set up called menu which is not what we <end><start> again we close the activity everything is going to be set for the most part <end><start> gonna call this touched point something like that we're gonna set this equal <end><start> pool object sp and then just import or sound pool and we're gonna set up <end><start> get a click because those are called menu item or is from the menu item <end><start> that's going to basically hide our keyboard so again once we're done <end><start> second what's up guys just tested it out and should i like i was in the ocean <end><start> the whole xml thing by now i hope lisi understand how to do it and you can <end><start> sd the android sdk folder right here just click on this folder you don't <end><start> way to send hate mail for the most part if you guys want just as hello travis <end><start> a road view or a street view and it's going to look like that again if we <end><start> by that as well and now i'll show you guys what it looks like what's up <end><start> it's highlighted or if it's being focused on we're going to say if <end><start> then what we're gonna do is we're gonna set up our a color buffer to be <end><start> menu and add just one more item and this will just exit our program so <end><start> implement the select or the item selected listener and again we <end><start> call this hot or not db something like <end><start> this key reference check box it's not really good this isn't <end><start> data dot this text file has been saved and duration toast dot long length <end><start> we're just gonna create an if statement like we have previously we're just <end><start> logged in and you're a developer and everything you're just going to go <end><start> you can create your own kind of type of handle to make it look better but as <end><start> is happening within our if statement that's handling the motion event when <end><start> we're actually going to do is we're going to have a catch exception <end><start> so we're just gonna build a constructor for this class as well because again <end><start> layout you know padding is good for cleaning <end><start> we're gonna say - and then we take our bitmap so we're gonna say - bitmap <end><start> here just like when we use with our button there will be text in <end><start> and we're gonna say int i is equal to zero to start with not one sorry i <end><start> text paint and that will give us all that other customization that we <end><start> have to set buttons text so we're gonna say place a pinpoint and then we need <end><start> which i've already done and now we've set up our geo coder and what we can <end><start> just gonna fill in these edit text up here with the information that <end><start> activity and for a third textview we're gonna say tv widget update so there <end><start> also going to return a string which is gonna be our city so we're just <end><start> return so let me format everything and those are the four methods that you <end><start> text that we set up and lastly we're gonna refer to what time <end><start> hey what is being passed in and since we're passing a file name which is <end><start> it and this time we just want to change the z2 plus 1 instead of minus <end><start> setting up our our our website to be zoomed out for the most part so <end><start> class equal to what's being passed in so there we <end><start> underscore menu dot xml again all lowercase and then you'll save <end><start> pass in oops and then within parentheses we pass <end><start> basically the maximum volume i'm sorry we want this max value equal is the <end><start> within each item and it will take up kind of a percentage of what's <end><start> we're going to basically be done with this open clasp right now so just <end><start> stuff so we're gonna say is try and then within the try brackets and <end><start> we're actually going to delete that text that's in there just delete that <end><start> the emulator because there is no email actions for the most part and you <end><start> gonna say the state because we're gonna return the state value of our <end><start> going to say is we're going to say an eye x equals ni x plus are scaled x <end><start> kind of are picking up on some stuff especially the new programmers this <end><start> let's just put a break there as well now that we have everything set up <end><start> device is up here and hit new and we're gonna call this one droid x again <end><start> good review here async task and then we want a string reference anta juror <end><start> bufferedreader which i'll explain in a second we're just going to set <end><start> this tutorial is we have our event which is an overlay type because we <end><start> eclipse and under this windows tab for for if <end><start> do the pretty much the same thing for the get longitude so we're just <end><start> the most part so we're going to say title and we're going to say edit <end><start> the string array and add some items to it so we're going to say item and <end><start> know what we're gonna say is or we're gonna relate to the byte order class <end><start> second parameter it's our actual bitmap that won't want to decode so we're <end><start> android and tenth dot set type and we're going to say within quotations <end><start> want to refer to our sql row edit text that's the new one that we set up <end><start> in case we're on click method this or these are four buttons switch in <end><start> so now what we can do within our save file again is make sure <end><start> plugin for eclipse and scroll down to plugin for eclipse and scroll down <end><start> fill parent as well all right so we have our scroll <end><start> tutorial i was going to do a kind of an overview but for the most part i <end><start> and we aren't opening these activities anymore by the action name because <end><start> height and you know set this button up to center but you guys don't really <end><start> we're going to go in and add two buttons one to access the phone and actually <end><start> intent just like always and this time what we're going to put in <end><start> example class and all we're going to do is we're going to set up a new <end><start> starting point class so it's kind of a reference to that and basically <end><start> what's up guys welcome to your 43rd android tutorial for the new boss <end><start> in google type in android adt hit enter it'll be this first link from <end><start> class hits button as you can see we get this message and you know that's <end><start> for our get hotness get name and update entry and and also our delete so <end><start> dot put and then we have to put our float array in there which we <end><start> while file input stream dot read does not and we're gonna say read data <end><start> latitude and for my longitude i'm just gonna again type in some numbers let <end><start> the seekbar and also how would you mess around with the system volume <end><start> classes so we're just going to paste it here and where is it should organize <end><start> so we're just going to say return true so i'm i don't know if that that's <end><start> context and one last class we're gonna actually reference sqlite database <end><start> basically this tutorial mainly just went over the different types of <end><start> application make sure it works <end><start> we're basically going to set up this location manner manager to get the <end><start> this so we're going to divide it by 4,000 el and then we're going to <end><start> every time you guys make an xml or anything under a resource folder <end><start> need to set up our progress dialog is what it calls it so within this <end><start> basket so we're gonna say basket and we're gonna just say new <end><start> database variable and we've used the method you know cori we've used <end><start> which row id we want to have so again we're just going to say row id equals <end><start> parent i don't know if it's not for the height yeah for the height we want it <end><start> within this bracket here and we're going to right-click we're going to go down <end><start> going to say this app you know add a description so just you know create <end><start> for android programming so that might take a little bit we're just going <end><start> of a concept where you can't understand what's going <end><start> to open it and then we can also do fos closed and we would write within <end><start> this is where we're actually gonna draw our triangle and all that good stuff <end><start> well we're going to add this this add view here so we're just going to <end><start> import both those and what's up our references now are confirm equals <end><start> going to add a permission to our application and we're just going to <end><start> list items which we defined here i'm just the standard kind of look of <end><start> put within parentheses our dot id dot and then we have our ids that we set <end><start> say five hundred so it's going to be just like let's do five fifty so <end><start> output is how we write data and we're going to set that equal to <end><start> references and introduce you guys to a little bit of java so what we're <end><start> again it's called sliding drawer it's a class we're just going to call this <end><start> name and the second parameter the hotness so again we're passing in <end><start> pick the new boston - which is our upgraded apk hit open and upload <end><start> then we can say something like city so we're gonna use city that's equal <end><start> you guys can put another bracket here and then we can also say else if <end><start> name and we're going to say string file name equals internal string <end><start> app widget manager we're just gonna say dot update app widget and we refer <end><start> can even say sql light example dot this so now what we can do is we can <end><start> time line and we're going to set this equal to a new json array passing in <end><start> i'm still going to cry at night i'll go to bed so alright let's check out <end><start> application and check it make sure it <end><start> dot raw dot and then our background music and again we're just gonna <end><start> false and now we're gonna delete both these two set text with above <end><start> entity again nothing to new there we're also going to set up a string <end><start> we're going to add a key reference so again it can save it we're going to <end><start> choose some other links that you may want to download from that might go <end><start> mouse cursor but basically before we extended the view class and you <end><start> method that we just created e^x we're going to call this test something <end><start> button that we set up and this is for a radio group and at any time one of <end><start> that website so we're going to set up a variable or instance of the class <end><start> because now each time an item is clicked it's just going to start up our <end><start> sound that you might want to put in for application because we're going to add <end><start> to open our hot-or-not class this is basically where we're going to do all <end><start> ten dot geo underscore per spekt spective correction hint and then <end><start> and then we can hit dot and we have the events that can happen so down is <end><start> pretty quick it's still not doing anything <end><start> want to say 300 or 320 by 100 and this is dp or both and then lastly we want <end><start> is we can either probably just hover over here again it'll add it for <end><start> we worked with arraylist but android r dot layout dot simple underscore <end><start> going to hopefully finish up this text voice activity what we're going to <end><start> basically we have this all set up as well within this within this <end><start> what i'm gonna do in this tutorial is kind of give you guys an overview <end><start> is going to say if status is not equal to text to speech dot err then <end><start> now that we have our three graphics within our project we're going to do <end><start> going to say hey is this equal to this opposed to hey assign this value to <end><start> application is gonna do it it doesn't matter but if we just <end><start> the change in the x direction and then we're also going to say dy is equal <end><start> browser our brow something like that and again we're just gonna say find <end><start> point 1 4 last point it was negative 1 in the x direction and negative 1 in <end><start> set this equal to travis c and there we go we have our title and now what <end><start> we're just going to say again like try and then i n dot close and then <end><start> layouts and we called that one one widget so we're just gonna hit widget <end><start> everything works here again probably the most important thing for this <end><start> a geo point and since we just set up this geo point called point that's <end><start> dot get and then within within quotations or an assay data and that <end><start> of place a pinpoint we also have you know this geo point that is getting <end><start> just have to save it and there we go we have our upgraded apk on the <end><start> say test save load data and then it loads so i mean that progress bar <end><start> kind of the stuff that we get back as you can see you know and we can <end><start> basically we set up a string called collected this is going to be all of <end><start> layout here of what it looks like and oh layout here of what it looks like and <end><start> pause unpause and we're gonna say on resume so now what we can do is we <end><start> into it and see what it is important here with the tab host and how it <end><start> again i was playing around with this as well but just kind of wanted to show <end><start> again that i hope that's pretty pretty easy concept that's just the <end><start> then we're just criteria and then we're gonna just import that and now <end><start> again have this equal and this is just setting up the reference to the xml <end><start> to do now is just kind of define our second tab as well so we can say tag <end><start> text and we're gonna set this equal to whatever so this is a message <end><start> activity it's under a regular activity we have a method called on options <end><start> blow our vertex pointer we're just gonna say gl dot gl color pointer down <end><start> gonna say int max v and we're gonna set this equal to our audio manager dot <end><start> our flags we're gonna set to zero and i believe that should be it again just <end><start> some stuff so now what we need to do is right here we created a <end><start> actually let's do if changing y is less than a canvas dot get height then <end><start> pretty simple kind of compliment kind of you're like what's going on <end><start> here we're just gonna say get selected item position and that's going to <end><start> and lowercase so we're going to say display and i mean pretty much all <end><start> set content view set those up get that reference going then what we need to <end><start> set this collected string equal to a new string and within here we're gonna <end><start> then what we're going to do is we're just going to say dialog dot show so <end><start> we're just gonna say negative 1 1 negative z access and that's going to <end><start> simple spinner item so we're just going to say android dot r dot layout <end><start> show you how to do that we're gonna kind of set up the sit pretty much the <end><start> our keyboard after we're done using this edit text for the most part so <end><start> variable such as our changing y and at the moment it's still 0 so it's <end><start> few things that we still need to do and we'll finish up in the next tutorial <end><start> then once our activity gets started back up its gonna go through this on <end><start> name list or whatever you guys name that so it actually has a list refer to <end><start> again is just a simple if else or if statement so we're going to say if <end><start> what was it passed hog and then edit text was input and <end><start> a a button check man toggle button was a <end><start> up here and set up just the standard switching case that we're familiar <end><start> equal to be whatever is being passed in is t so now again we have a method <end><start> in and what we're going to do in this tutorials basically we're gonna draw <end><start> here <end><start> set up an nid so we're just a android id equals at plus id /add you know if <end><start> widget stuff xml so within this file we set up the configuration already of <end><start> gonna say case one break and lastly case two and break now <end><start> setup on resume method and put this acquire within the on resume <end><start> set text and we're going to do is set this equal to whatever the input is <end><start> is equal to again notification manager and we're just gonna say get <end><start> and what we're going to do we're going to say new rec and that's <end><start> menu class we're going to add an xml file to this so we're going to <end><start> text because you know that's the only thing that's really important so what <end><start> on pause right there and then we're just going to say wl dot release and as <end><start> arraylist and we're just gonna refer to the default and it's been a while <end><start> so we're just going to do that again it's just right there final and <end><start> to whatever that's not going to work to compare strings again we just have <end><start> buff so there we go now we can't have reference to again our vert buffer <end><start> how we do that is we just say path equals environments because we're <end><start> comma negative 1 and in the y-direction then we can again leave a comment <end><start> story will reset this if-else statement and basically it's going to check if <end><start> going to set to null so you don't have to worry about that for the most <end><start> activity that's where you guys can find this i'm just gonna talk through kind <end><start> up a http entity called e and we're going to call this our our dot <end><start> the emulator but if not i'll show you guys on my phone in the next <end><start> can't spell dots decode resource and then for again for this one we say <end><start> say as long as a request code is equal to basically our check that's <end><start> that's the string that we're going to <end><start> java for the moment but basically we set up an integer variable that's equal <end><start> set it to native order again just just by referring to the byte order <end><start> i'm sorry remote views with an s and then what we're gonna do is we're <end><start> save this and run it again and there we go here's our text play and we can <end><start> use more you know we don't want to use up memory that <end><start> variable we're going to say bitmap is equal to and then within <end><start> say open raw raw resources you guys are probably thinking it's referring to <end><start> display something like that or show display something like that or <end><start> gonna call this one option three for now until i think of something to do <end><start> capitalized and id as i is capitalized so basically we're finding the view <end><start> because we had two buttons and change this from our crazy to <end><start> pause method so we're gonna say on stop sorry our song and it is getting <end><start> create method hit okay so we got that stuff set up <end><start> call the sql lite example and i put that one in our menu activity so you <end><start> give us some space to work with and we need to refer to for the activity <end><start> quotations and then hit the plus symbol and put counter and basically <end><start> what we're going to do is we're going to say if and then you guys are kind <end><start> variables so the first thing that we're going to do is we're going to <end><start> something like that and let's let's test that out again so i guess i didn't <end><start> and then we're just going to finish it by ford slash less than sign and <end><start> make any other type of variable we define the type which is going to <end><start> source override implement methods and as you can see right here we can pull <end><start> we can do is we can either say like close right here or what we can do <end><start> equal to edit text find you by id again and then edit text commands so <end><start> we're just gonna call it geo code coder or something like that we're gonna <end><start> for 1000 years and also you might want to reference your first name or if <end><start> create a class called flipper and xml file called flipper which we set <end><start> the whole canvas for the most part so we're gonna say is our surface view <end><start> comm dot google dot ads dot ad view like that and we <end><start> we're just going to say gl again relating to the gl ten object that <end><start> equal to new arraylist of the type overlay and then open parentheses <end><start> that's not the case just restart it so that's going to cause it go into a <end><start> png so you know another way we can proof test is we can go up to our file <end><start> method and it's called on click basically that's the same method <end><start> gonna set up our bitmap this kind of review we're gonna call this like <end><start> dot travis and then dot and then basically your class name in <end><start> check this out see if it works and again hopefully it works on the emulator <end><start> client and we're going to say this client is again just keep things kind <end><start> and so once we get our onclicklistener set up let's go down here and setup <end><start> overview of everything that we did again i know i kind of been explaining it <end><start> again referring to the android dot app widget dot action dot uppercase <end><start> to bc and hit equal and how we do or how we read from our database is again <end><start> content view just for you know good habit so do that and then we're going <end><start> again we're going to have some text fun in this tutorial against travis <end><start> data from our database so we're actually going to work with sql view and again <end><start> just need to kind of set up again a reference for show results which was <end><start> dot set text to 'invalid again and also we're going to just change this back <end><start> thing is you also want to have all of your references the exact same in <end><start> you can but you can implement more than one class so that's nice that's <end><start> to the extras that's being passed in because again if it's not null <end><start> to set up some items within our menu as you do the open or greater than sign <end><start> parser and then finally the xml reader parser and then finally the xml <end><start> know how to do this so we're going to call this class text text play <end><start> check just make sure 63rd 63rd <end><start> documents and i called it the new boston and then we set up our project <end><start> ad request we're just going to create a new one we're just going to say new <end><start> include text so just say one textview and then type whatever you <end><start> say sd there and define the variable above and then we can do sd dot open <end><start> back to our default image up there so that's something we have to get rid <end><start> is if extras is equal to null which we want it to be so our extras which <end><start> and grab the entire class and cut it so don't grab your imports or your <end><start> our main xml this is our first little activity that we created and we're <end><start> and it's gonna download to wherever you guys choose or what we can do is go <end><start> with the content tab three and we're just going to say add a <end><start> new array that we set up here which we called our gba vowels so that's <end><start> can scroll through here and kind of see some of the stuff like keywords the <end><start> basically that's the method that we're kind of setting up and it's still <end><start> touching the surface and everything is gonna be perfect i guess i don't know <end><start> going to say text-to-speech equals new text-to-speech this takes two <end><start> basically we set up our our bitmap already so all we have to do is say <end><start> just going to set them up so we're going to say button and we're going to <end><start> gonna set this equal to new notification and then we're gonna refer to <end><start> type so we're going to say overlay type of list and then we're going to <end><start> and then we're going to say is a greater than sign and string spelt like that <end><start> define this open class width and manifest as well then we're going to <end><start> gets called it gets passed in a sqlite database called db and we're <end><start> thousand that's my hotness scale we're just going to say update and it <end><start> know call updates or increments increments by one and then each <end><start> name and the second parameter the hotness so again we're passing in <end><start> quickly we want to tell kind of give reference of how big our viewport is <end><start> that but it's gonna be a float and we're just gonna call this ratio set <end><start> sure it works but yeah that's all this tutorial is basically the xml file <end><start> for byte and buff something like that and we're gonna say again relate to <end><start> is the intent that's being passed in we're just gonna say dot get and we <end><start> give us sorry its gl disabled and what we're gonna disable is the dither so <end><start> implements location listener like that and again we just have to hover <end><start> going to comment out this whole line of code and i'm sure you guys you know <end><start> simple to work with down here and we're all we're gonna do is set our c which <end><start> content view for this view that we just set up here just going to take a <end><start> we're gonna right click on the new boston package that or whatever <end><start> we want this to be a variable that we can use throughout our whole class <end><start> this controller or control yeah controller and add this import and <end><start> right now we're going to go down to our switching case where we where the <end><start> alias maps key store hit enter and then we need to create a password that <end><start> statement so we're just going to say finally and we're going to say <end><start> again it's called sliding drawer it's a class we're just going to call this <end><start> which if you scroll down you can see null for default which we're gonna <end><start> application make sure it works <end><start> quotations and then we're going to give it our table name which we <end><start> drive or your c drive if you guys are on windows and as you can see it's <end><start> we're going to create here or this file so the first thing that we want to do <end><start> overview of everything that we did again i know i kind of been explaining it <end><start> role i guess it's not again but we're just <end><start> menu then what we're going to do is we're going to open our splash class <end><start> the top of our class and paste it there so now we can refer to that sm <end><start> again we had this as a string value but we're just going to say a thousand <end><start> was our dot xml dot prefs so there we go we basically set up <end><start> of our progress bar so we're just gonna say progress that's being passed in <end><start> implement methods and here's all of our methods for a handler or a <end><start> we're going to do in this tutorial is something really simple basically <end><start> class we're going to say our class name menu dot this and it already has <end><start> i'm view by id and so again just set up a couple of these references for <end><start> collected initially equals null when we hit our load button and then we're <end><start> this random random string up here so we're just gonna say r and and <end><start> and format delete and then also we need to throw an exception that we want <end><start> then set up a checkbox checkbox preference and we're going to say <end><start> load now within here as you can see the blog section is loading in here the <end><start> to open it and then we can also do fos closed and we would write within <end><start> gonna do that real quickly by typing horizontal and hit save go to <end><start> webview here find view by id and then we're just gonna say our dot id dot <end><start> we're gonna do is say dot gl underscore vertex array and that's just gonna <end><start> column so that was called key hotness and again plus quotations space and <end><start> also going to implement runnable and i'll kind of explain the framework <end><start> application and now we're going to get application and now we're going to <end><start> we go we have our and we have an import set up and and we aren't obviously <end><start> under a source folder and if you guys have no programming background <end><start> going to say string integer and string and i'll describe what that means <end><start> so basically if our option 1 has been selected our string will value <end><start> dot to string getting kind just quick review and now what we're going to do <end><start> name dot set text and we're going to set it to our returned name and then <end><start> com dot the new boston dot travis and that's just gonna be <end><start> gonna set that equal to the type that we want it to affect so we're going to <end><start> - and signs and then we say why is not equal to zero as well because again <end><start> view which we call show result and we're going to say dot we're show results <end><start> gonna set this equal to new paint just like we've done before and now <end><start> then we're going to refer to our uri that we just set up which we call <end><start> end of this and we basically set up our id now to set up again or we <end><start> we're gonna type this or spell this folder a or r aw for our our our <end><start> first so we're going to reference our variable that we set up email intent <end><start> exception call it e and all we're gonna do is we have this textview which <end><start> do is create a string array we're going to call this path something like <end><start> set this collected string equal to a new string and within here we're gonna <end><start> called e get action is equal to the motion event dot action down again <end><start> set that up the first thing that we're going to do is define just our <end><start> define the rectangle so what we can do is say middle <end><start> and so once we get our onclicklistener set up let's go down here and setup <end><start> put two here and then we're gonna say get information as you can see it <end><start> example class and all we're going to do is we're going to set up a new <end><start> string returned oops turned name equals and then we can <end><start> i'm sorry this is within our if our other button was pressed our <end><start> dot execute and we can give it a parameter for example what we're <end><start> basically we have three points so we're just going to say 0 1 &amp; 2 now we have <end><start> say ads and then ad unit id so make sure that spoke correctly and we're gonna <end><start> our textview that we created called data result to match our shared <end><start> whatever that works then what we're gonna do is we're gonna again just <end><start> kind of set up some different methods that our thread can use and let's <end><start> you can see three is selected let's go hitter menu hit exit which will exit <end><start> guys have it spelled in here within our own crea themá-- create method and <end><start> controller object so we're gonna call map controller and we're going to <end><start> speech hopefully that's what it does otherwise it's kind of a weird name <end><start> to comment under our open class activity comment out where we set up that <end><start> again thanks for watching guys in the next tutorial we'll actually get <end><start> to do again refer the recognizer intent and we're going <end><start> quickly talk through everything and then i'm going to paste my real code and <end><start> result will work and again you can comment out those lines so so yeah <end><start> holder is and thread and all that good stuff which will explain even more as <end><start> and not worry about that so how we do that now that we've enabled it is <end><start> method again before it starts running so the only method that from our <end><start> there fourth button is going to close it and since it's closed it's not going <end><start> obviously this didn't really change anything with our application but i <end><start> right now so we're going to say for the height rap content and shibam there <end><start> here and we're going to change this to et sindh because we're going to <end><start> you know our state where we can read and write and can w equals false here <end><start> then we have to implement our class implement that that class so we're <end><start> that is refer to the unique id within our on create method and again if <end><start> gonna say new input source and we're gonna refer to our website or url <end><start> this so we're going to divide it by 4,000 el and then we're going to <end><start> this equal to new custom pin point and we're gonna pass in that d <end><start> the choices we can also say super sexy which is true by the way and we're <end><start> create an output stream and we're gonna call this os and we're just going to <end><start> know these variables we set up within this class to equal whatever is <end><start> like 25 so if our camera gets you know 25 away then it's going <end><start> by yourself but we're going to say data we're going to call the main one <end><start> toriel's go add our compass and now we'll have it an overlay that <end><start> to set open it i'm using a file name string and a kind of context another <end><start> concept but we haven't really i don't know if we've created a class <end><start> and we're going to just set this up for the most part copy and paste this <end><start> there we go we got an import activity and we're going to also do the <end><start> the whole xml thing by now i hope lisi understand how to do it and you can <end><start> overlay so let's get it set up what we're going to call our first overlay <end><start> i'll explain in a second we're going to say cursor our cursor that we set <end><start> dot-com 4/1 ford / statuses for / user underscore timeline dot json so <end><start> documents and create a folder called android apps because we want to <end><start> have to import this and what we're going to do is we're going to say get <end><start> of access the address and all that good stuff so we're gonna say geo coder <end><start> again the recognizer intent dot extra and we're going to say language <end><start> kind of out of order here but we probably want to do like a try and <end><start> do by now i have a lot of faith in you guys so just set that up exit out <end><start> is go into our on create method and we're gonna say set content view to to <end><start> on draw we need to do one method called <end><start> right now but we're gonna kind of establish what they mean here in a <end><start> going to set content view to our next xml layout that we're going to <end><start> this so we're getting the context of our main class and that's where we're <end><start> is just the google weather api we're and then we're just going to create a <end><start> so the way we can do that is hit finish it's just a simple method and <end><start> client protocol exception input/output exception and a <end><start> checkbox is unchecked and also option three is selected even after we exit <end><start> that actually relates to real time something like this this setup here <end><start> touch listener so we're gonna say implements on touch listener just <end><start> as well we're gonna call this mp and then we're gonna set this equal to <end><start> go back to so we're going to set up a simple if statement and we're going <end><start> but basically i want to show you guys what we can do with a motion <end><start> test and then we're also going to call one plus that's going to be the <end><start> want to new my bring back object we're going to pass in some information <end><start> everything for the most part set up and so once we copy that all we're gonna <end><start> and we're gonna use a method called update app widget and the first <end><start> a string so those are some methods you guys <end><start> say public public gl render x and then all we're gonna do is set up a <end><start> i'll try fall along and just get this set up and this is great reference <end><start> then we switch over in the landscape mode some of those buttons would run <end><start> set this our fx equal to zero now when we start clicking so we're just gonna <end><start> and then we're going to set up an intent obviously so we're going to call <end><start> dot let's not do that one we're going to do for the fourth button we're going <end><start> it yeah everything's fine and then we're also going to say result that's <end><start> going to hit that and end it with a semicolon and now our song should <end><start> that we can do or actually this one not very self-explanatory less of <end><start> see how it looks and we're also and i'm also going <end><start> the to the counter integer variable but also we can do if we're just going <end><start> and then we're going to use our parentheses sign again and say divide <end><start> then set up a checkbox checkbox preference and we're going to say <end><start> clear up a little bit we've done quite a few tutorials but yeah we're gonna <end><start> set up and the only other thing we did is i added it on pause method as <end><start> test text so there we go basically set that up and now we're going to set <end><start> that and now we have this class called my bring back what we're going to do <end><start> saved it again we can whoops even if we i mean we aren't <end><start> address line and we're gonna refer to our variable which we called i and <end><start> line for if statement so if if the surface is not valid it's just gonna <end><start> release so we're gonna say motion event dot you know <end><start> create our own a new instance of this class that we just created so we had <end><start> our sentence and that's all we're returning is basically the <end><start> event and we're going to call that e and a map view which we're going to <end><start> i'm not just gonna pause their surface for you pretty simple and we're <end><start> prompt and we're going to basically type what is right here so pretty simple <end><start> and then what we're gonna do is we're gonna go down here within our on <end><start> click on our folder go to new class and we're going to call this prefs <end><start> something like media player mp equals media player dot create and context <end><start> use i didn't really explain but that's gonna be like our main context and <end><start> process and access some of that information but that's pretty much <end><start> shared preferences the same file name so we know we're working with that <end><start> me travis and what we're going to do is kind of give you guys a review <end><start> close our buffer reader so we're going to just say i enclose this is <end><start> text because it's just you know into the string sql use text and we're also <end><start> on touch now what we can do is we're basically going to touch screen <end><start> and fill parent and we also want this third textview to fill the parent <end><start> going to do is just add that reference as always <end><start> it's not too important so click the xml grab that and copy it all and then <end><start> return so again we're just going to say json array and we're going to call <end><start> hit dot equals and now if it equals this object within here then we know <end><start> set this equal to within quotations at plus id basically saying we're <end><start> other activity so as you can see i mean this is the graphics aren't that <end><start> just going to return turn data as well because hopefully we got some sort <end><start> here it's at six right now and if we switch it over it kind of <end><start> doing here is oh and this has to be integer so all we have to do now <end><start> also set up our edit text that we created which was called info or <end><start> that you can do when developing your <end><start> dot travis thought about or whatever you guys decided to have your action name <end><start> let's get some basic basically some more customization going on so we're <end><start> for short and we're putting all those values within our buffer and now what <end><start> our app widget manager class again we're just that's just a default class <end><start> you can see i said this so we need to implement and create a on click <end><start> to equal 0 something like that to start out with and then once it sets to <end><start> this basket within our intent so we're going to let hit our intent which <end><start> variable so we're going to say camera data is what we're going to call <end><start> reference it so what we're gonna do is we're gonna say if address dot size <end><start> a string that is going to be the user name something like that and we <end><start> textview that we set up which was called http stuff i believe we're just going <end><start> build the geo point so how we do that is we're gonna create a geo point <end><start> this and we're going to implement one click and we're going to set up just <end><start> we're going to set up something called a geo coder that's gonna allow us to <end><start> this name and that returned hotness so again our edit text we're called <end><start> show you guys some other stuff that you can do we're going to say <end><start> a class so we're gonna say private final context our context or our <end><start> variable that we're getting pass in plus you know maybe a space and then <end><start> also want basically where this accelerometer class is going to <end><start> override implement methods and again through the activity tab we can find <end><start> ball so that's our input stream what we're gonna save now we also need <end><start> different than our string we're going to set this equal to be a new <end><start> believe so we're going to call this one else if wtf all uppercase and <end><start> parameters is the file name again we just set up that variable as our <end><start> do one last one last one here so we're going to say list preference <end><start> this class it's basically you're going to be like okay we got some <end><start> set up a string variable we can again do private if you want string and <end><start> factory for the most part you guys will pro have to do that i might have <end><start> tab after you're done developing that but keep those open for the next <end><start> gonna say our list view which we called lv and we're just gonna say dot <end><start> this e for like extras actually just type it out because it might make <end><start> this is the image view of our xml and we referenced it in java and we called <end><start> toriel's go add our compass and now we'll have it an overlay that <end><start> our bufferedreader and then what we're going to do is we're going to try <end><start> toast make text dot context can say get base class or get base context which <end><start> basically bridges over to the xml and so again when our program starts it's <end><start> this and the class name so we're gonna say status bar dot class and if you <end><start> id again r dot id dot we're going to looking for a button the button <end><start> gonna walk the canvas to start out with so we're gonna say walk canvas <end><start> i'll be like row 1 2 3 etc we do that by saying primary key because this <end><start> to put this in so right click source implement methods and let's see if <end><start> use that then scroll back down and now we're going to set up that <end><start> the actual bitmap itself so it's gonna be a little bit off but as you can <end><start> having cats everywhere but i decided against that so if you guys think i <end><start> we're gonna say canvas dot draw rgb then we're going to put <end><start> again that was our default question for the most part all right so now what <end><start> guys i'm gonna delete this because i don't really like the look of it <end><start> going to comment out this whole line of code and i'm sure you guys you know <end><start> send data we're going to say if it's crazy we're gonna say probably right <end><start> released when the on pause method gets called i'll just test their <end><start> is that our on update method gets called but if we add that configuration back <end><start> call this hot or not db something like <end><start> parameters we're going to set up our dialog so what we're going to do is <end><start> up some stuff within our class here we're gonna set up a spinner and <end><start> is we're gonna set up a canvas again we is we're gonna set up a canvas again <end><start> also do android gravity instead of layout gravity and set that equal <end><start> we can use for this so we're just going to right click source override <end><start> com dot the new boston dot travis and that's just gonna be <end><start> need to do is we gotta say gl gl load our identity we just need to say gl <end><start> item type arraylist so again we have our arraylist called pin points and <end><start> be useful we're also gonna create one new folder and we're gonna call this <end><start> something called array list and that's what this is going to refer to so <end><start> object called jason and there we go so now what we're going to do is wall <end><start> permission uses permissions and then over here we're going to search for <end><start> there we go we have our loop setup now now the first thing we want to do <end><start> we kind of set it up in xml for a portrait view so we're going to keep <end><start> is where i said i kind of wasn't thinking the most part wasn't <end><start> do is again instead of extending this the view class we're gonna say <end><start> at our imports and we're good to go so let's jump into the oncreate <end><start> class name which was xml data collected and we're just going to call this <end><start> construct something from the information that it gets so what we're going to <end><start> person can have of our widget so what we need to do is we need to set up an <end><start> we're again set up a byte buffer call this our point byte buffer or point <end><start> values so we're gonna say x equals y equals sensor x equals sensor y <end><start> requirement speed accuracy altitude some of the things that we can check for <end><start> this overlay list something like that we're going to set this equal to our <end><start> this last one will be eye hotness all right and then we also want to say <end><start> know exactly how much time we've spent but i will finish it up in the laughs <end><start> this tutorial so we're just gonna say what's up it's up and then also <end><start> what's up guys welcome to your 38th android tutorial for the new boss <end><start> determine whether is the set wallpaper button or again the take the <end><start> async task and then we're going to give one of these greater than signs <end><start> say add constructor and we're also gonna hover over and add the <end><start> most part not result well result and then b we're going to say s a <end><start> create this method within our hot-or-not class so now we're going to switch <end><start> we set up for the most part and i'll catch you guys in the next <end><start> we're going to do is we're gonna set up a new intent and we're gonna call <end><start> that and then go into your data class right here and we're going to do <end><start> package again from the sdk for the most part so we're going to import that <end><start> and you know delete these here because we aren't gonna use them for <end><start> frame layout could do for you and you know you can develop that way as <end><start> our content view to was it r dot layout <end><start> application looks like and just get <end><start> view by d re id dot add and then all we're going to do is say add dot load <end><start> like that pretty pretty standard there and <end><start> catch the exception and then we have this one last math method that we <end><start> listener for seekbar so we're gonna say seekbar which is the variable name <end><start> the text we wanted to try that you know the time is created we can <end><start> equal for the most part again that's our expression mark there as long as <end><start> align to where we actually want to place the pin point so what we're gonna do <end><start> control-shift oh and let's just check out some of the classes or some of <end><start> up some stuff within our class here we're gonna set up a spinner and <end><start> the left top-left corner of our bitmap as well so would be a little <end><start> it might not always work so we're going to have to surround a try and catch <end><start> pass we're gonna call it pass toggle or pass hog like that and set that equal <end><start> and we're going to scroll down for on activity result on activity result <end><start> need to close both our input and our output stream so just close and <end><start> activity now i looked up the android developer page this is a great <end><start> app widget manager and dot extra and that's just going to be basically <end><start> within the case for the most part probably doesn't make sense sorry <end><start> strings for whatever the person entered in the edit text for the city <end><start> all we're gonna do within this toggle view is set up a quick if statement <end><start> that on or off basically we're just going to leave it off because we <end><start> this tutorial is so i shouldn't say that's not what it's about but you <end><start> name and to hotness as well all right so now we want to actually get through <end><start> just run our application and make sure everything works again for the most <end><start> over to the xml don't worry about are oh actually i'm going to say <end><start> called sb and we're just going to say append which is basically a return <end><start> going to set up an int called i and we're going to set it equal to b 0 <end><start> again once we you know start up our pending intent it's gonna call this <end><start> another string and then we set it up and we also have to you know import <end><start> that i don't know so as you can see it's flipping through every half second <end><start> so what we're going to do is we're going to use the edit text that we have in <end><start> basically all we have to do now is get rid of that error because again if <end><start> other stuff in the next tutorial because this one's getting kind of lengthy <end><start> now all we do now what we need to do is add the permission so we're gonna <end><start> add a sleep within here so again this kind of review thread dot sleep <end><start> open up the menu class that we set up hence as you guys noticed in the <end><start> forward slash capital t then theme dot capital dialogue or just dialogue with <end><start> tutorial we're going to show you how to load that data that we put in there <end><start> going to open up the android manifest and what we can do is we can copy <end><start> listener and then we just say this because again we're implementing <end><start> do whatever is right here we're going to hit break and if it was the case <end><start> can hit dot and then we can say get width right here and that's going <end><start> task mm-hmm so the first thing we need to do is <end><start> really get any feedback because bucky wants like 200 tutorials so i can't <end><start> so there we go basically everything is set up for the most part to have <end><start> key store and then we have to hit space - store pass and our password was <end><start> like that now this is the basic setup for setting up a new project we're <end><start> going to say integer so integer and because you know our columns even <end><start> have another reference for our ad so what we're gonna do is we're gonna <end><start> going here so we're also gonna need is a new class called status bar and a <end><start> maybe leave a comment here for future <end><start> and if we refer to the value 0 that's going to give us the pretty much the <end><start> refer to it within our main class or actually within our touchy overlay <end><start> to our hot-or-not class or we're going to set up a variable from a hot or <end><start> and then to string so again nothing new there and what we've done is we've <end><start> and lowercase so we're going to say display and i mean pretty much all <end><start> can do is we can also set some numerical values to these items for the most <end><start> be called when it when our widget updates so we're just going to <end><start> gonna basically be whatever is our data that we saved and then we have <end><start> once we say th which is the tab host that we set up here we can use dot <end><start> want it to do is we're just going to say new load <end><start> process and access some of that information but that's pretty much <end><start> everything that's going on why we you know set up these buffers and all <end><start> text and then let's say a button to buttons let's do two buttons so <end><start> code and just minimize it and minimize our oncreate method minimize our on <end><start> and once we go down to our external data you can see both of them are true so <end><start> regular activity that you guys might be familiar with should be hopefully <end><start> if we've done dialogues yet but it's pretty simple we're going to set <end><start> just set up which basically got all of our preferences right here again <end><start> gonna say int max v and we're gonna set this equal to our audio manager dot <end><start> view above each one nothing too awesome here and then we're also going to <end><start> activity and for a third textview we're gonna say tv widget update so there <end><start> need to create three buttons are three basically uh images and add it to <end><start> going to create a new text view so we're just going to say text view text <end><start> dot-com 4/1 ford / statuses for / user underscore timeline dot json so <end><start> set that up in a second and then we also have to pass in which notification <end><start> that's what we're going to do in this tutorial noth-nothing suite for the <end><start> one prefs right here all upcase and then all we have to do is set up <end><start> tutorial in series and what we're going to do is we're going to update <end><start> but hopefully that won't be a problem hopefully you guys understand what <end><start> that's being passed in which they just called app widget manager like <end><start> constructor is called from our graphics surface class it's gonna you know <end><start> does exist it's not going to do anything so it's a pretty simple way to create <end><start> set this equal to new criteria just kind of the standard default criteria <end><start> was with and just look it okay it's it's right here within the downloads tab <end><start> overlay item something like that and we're going to set this equal to a <end><start> name just some of the background stuff of the website that we can read <end><start> import both those and what's up our references now are confirm equals <end><start> test text so there we go basically set that up and now we're going to set <end><start> and negative 1 in the z direction and again we're just gonna call this point <end><start> or our brow dot low odhh we can load data which would <end><start> going to pass in we're going to say gl rotate and we're going to use the f <end><start> basically what that result code was used for from the most part and then <end><start> of the screen and then we're going to set up our final x and what this <end><start> set and say context and then context like this because again we want to <end><start> background sound you're gonna use the media player so again nothing too new <end><start> then all we have to do is call our on create method so we're going to say <end><start> we set up called email address and then end our statement let's put some <end><start> the settings oops and then we're going to say dot and we're going to say <end><start> just for simplicity we're just going to type c here so that kind of builds <end><start> latitude and for my longitude i'm just gonna again type in some numbers let <end><start> to create that top triangle so three four and <end><start> through our columns so now that we have our cursor set up what we want to do <end><start> again we close the activity everything is going to be set for the most part <end><start> and again you can use all these methods and there's a method called set <end><start> promise you you will well at least i hope you will i'll try and go <end><start> to put this in so right click source implement methods and let's see if <end><start> and easy here a little bit easier we'll be able to move a little bit <end><start> don't work out we're just gonna say catch again exception just a <end><start> gonna call this be buff gonna set this equal to the byte buffer class and <end><start> gonna do is create a new a new method within this class called public <end><start> resume method here that we created and so we have our location manager set <end><start> the state variable to within our on create method to environment dot <end><start> variable pass hog which is our toggle button so pass tog and we can hit <end><start> to be basically in add activity so we're gonna say android android name <end><start> added so let's save that and we're basically done with this <end><start> first so we're going to reference our variable that we set up email intent <end><start> within our byte buffer and so we're just gonna say be buff dot order and you <end><start> that's being passed in so we're gonna say local name and we're gonna say <end><start> that and we're going to paste it below and i grabbed one x bracket so you <end><start> basically the bridge from xml so i'm going to set that up real quickly <end><start> want to reference it in java so android id equals again within quotations <end><start> going to do in this tutorial is access this edit text and also our <end><start> class and we're gonna set up this variable again it's just gonna be <end><start> with a textview trying to gather my thoughts here sorry and today i <end><start> and then we're using that method that returns that sentence that we want <end><start> much the same concept there so get hotness we can call it and again we <end><start> adapter so there you go we import it and now we're getting another error <end><start> because we've done it before but again i just kind of wanted to talk over <end><start> a simple spinner item and the third one is our string array called paths <end><start> nice to have for like a flash card or something a flash card application <end><start> to you know resume it as well so just to get that set up we have our our <end><start> basically we work with opengl we're gonna create a surface view of some <end><start> so the way we can do that is hit finish it's just a simple method and <end><start> know what we're gonna say is or we're gonna relate to the byte order class <end><start> don't want anyone to see this file name we want to only be able to access <end><start> our surface view because our surface view is going to take up the <end><start> and we're going to scroll down for on activity result on activity result <end><start> people have trouble with sql stuff but what we need to do is create a like <end><start> the new boston now this is where we're going to again create a workspace <end><start> everything works the most part and and in the next tutorial we're just <end><start> dialog equals new progress dialog and it takes a context so we're going to <end><start> you can see here our constructor for our database helper class takes into <end><start> we're just going to set that equal to basically be related to the context <end><start> which our shared preferences and we're <end><start> this ratio for we're also going to set up what what matrix mode we want <end><start> understood why i was trying to explain there and again i told you guys <end><start> and again all we're gonna do is just kind of set those all equal to be <end><start> that surface because it's like a crazy young stallion thats just bucking <end><start> all this nonsense that's going on because i know most of you guys <end><start> pretty quick it's still not doing anything <end><start> layouts and we called that one one widget so we're just gonna hit widget <end><start> true we want android drawable to equal at drawable and then plus highlight <end><start> we're almost done guys so don't worry about <end><start> set up that we created for the most part so i'm going to copy one of <end><start> believe so let's check it out make sure my spelling's right and basically <end><start> since we registered our listener we want to maybe create a onpause method <end><start> gonna call this a wm for app widget manager and we're also gonna create <end><start> because we did kind of use it but we didn't really get into too much so <end><start> thirty let's do thirty sorry and then we're gonna give this we're just <end><start> specific way that they're gonna save it so we're just gonna create another <end><start> the string builder so we're just going to say url and we're going to add to <end><start> and what we're gonna actually install today is the sdk so we're gonna go <end><start> it's called public boolean on touch event and again this takes a <end><start> over here so we're gonna say milliseconds seconds and oops no <end><start> xml stuff so we're just gonna set up a variable handling xml stuff we're <end><start> strings like string called values equals 1 even though basically our <end><start> most part to relate to our indexes so just give us a couple spaces here <end><start> have to print our fingerprint and you guys will probably have to have a <end><start> for the new boss and what we're gonna do is set up our indices so what we need <end><start> go in this direction so seven six four something like that and then let's <end><start> source again override implement methods and not under it's not under a <end><start> it's not too important so click the xml grab that and copy it all and then <end><start> what was it passed hog and then edit text was input and <end><start> going to be the same concept we're gonna get passed in an int we're gonna <end><start> some processing speed so it's not checking every time our sensor <end><start> we're gonna right click on the new boston package that or whatever <end><start> now within the way this application setup but i just want to show you <end><start> two and so we're gonna just set up a switching case for that so we refer <end><start> something called a geo coder and we're gonna do that within this get <end><start> and as you can see we have our menu called cool menu now i want you guys <end><start> do and then we're going to also say our brow and then we're also going to <end><start> then we can say something like city so we're gonna use city that's equal <end><start> did is we set up an xml parser for these three lines code and then we also set <end><start> should be status just for reference it's passing in the status and that <end><start> what was it passed hog and then edit text was input and <end><start> is just right-click on your whole package go to run as android <end><start> android folder and then to the build path and as you can see <end><start> add an ad below our second button again this is our layout here we're just <end><start> called or that layout called main was it okay so we open up our main xml <end><start> that's never going to change it's always going to be that <end><start> let's scroll down to our simple browser and type in a website again <end><start> gl 10 class again and just say gl underscore float and the stride <end><start> our up motion event right here and set up our changes or dx and our dy so <end><start> and you know if it's one it's also going to do whatsoever with in here and <end><start> delete what we have so far and we're going to say string dot format and <end><start> for a whole class again so we're just going to scroll up and type bitmap <end><start> i call this location manager and that's just going to help us manage <end><start> location we're gonna call this location l or location maybe like this and <end><start> ever image we want to set up our dot drops our dot drawable dot and then <end><start> we're gonna refer to our environment as well we're gonna say dot directory <end><start> a new triangle or a new instance of that class and there we go now we have <end><start> recognition class again a recognizer intent and we're going to say dot <end><start> play display and we can say use some methods on it and it's pretty easy <end><start> just cuz oops just because i can for the most part above the on list item <end><start> boolean value that we copied and we're also going to do that for a modify <end><start> height so we're going to jump over to the developer page which i'm sure <end><start> date button what we're going to do is we're going to just set up two <end><start> uncheck it and then we can slide it down again our first button is going to <end><start> internal data chicken is our main class name and then we're going to say <end><start> again so then we're going to say add drawable and then splash under <end><start> green blue and integer for the most part and just rgb as well or you can just <end><start> talking about so we're going to do is right-click on this layout here and <end><start> config was the reference name that we created now what we're gonna do now <end><start> see it but if we move further than that frustum value that we set up in our <end><start> then its parameters we're going to say this for the context of our class <end><start> can see over here in the description so basically it's going to kind of you <end><start> up our tab house because again the tab host kind of organizes everything <end><start> problem comes or the difficult part of the jdk is setting it up now i <end><start> voice and for our listview say lb voice return so again nothing <end><start> so we're going to give it the context right here called our context that <end><start> the capacity needs to be what it can handle how many bytes were working <end><start> this tutorial so we're just gonna say what's up it's up and then also <end><start> from my bring back calm now what we're going to do is we're going to set <end><start> to say negative 1 / top value we're going to say just for example 0.5 <end><start> that we defined earlier so we're going to refer to that we refer to that <end><start> to just create a list of overlays now again just well we have to define <end><start> hear and see we again we can just you know mess with the music so <end><start> picnic so what to do that all we have to do is say basket dot put string and <end><start> is we're going to say our ad and then again just load dot load add a new <end><start> comma negative 1 and in the y-direction then we can again leave a comment <end><start> going to say else we're just going to start it over changing y is equal to <end><start> up samantha and 7 which is again our second entry and we can also do one <end><start> layout and and i messed this up all but you guys should have fill <end><start> check state something like that and it's gonna say hey i don't know <end><start> start reading all of our entries of our database for the most part so what <end><start> but for example if you just said www dot it's not going to work you have to <end><start> most part we're going to say string values because again even though we <end><start> actually change our our text view so let's run it make sure everything <end><start> com dot the new boston dot travis and that's just gonna be <end><start> this name and that returned hotness so again our edit text we're called <end><start> something like draw color let's click that method and then we're going to <end><start> results or data result was it and we can just say dot results maybe dot set <end><start> it to be transparent but so we're just gonna set to <end><start> something like that or actually this would be point zero because again <end><start> button it's gonna basically get the text from both of our edit texts set it up <end><start> time line and we're going to set this equal to a new json array passing in <end><start> so basically what's happening now again so basically what's happening now <end><start> should be working just you know that's uh it's just another example of how <end><start> since we're using our you know our f here for actual edit text we're <end><start> go into our project or into eclipse here and to start a google maps project <end><start> content values and we're going to call this cv update something like <end><start> if it's in satellite mode what we want is our map dot set satellite to be <end><start> up what phrases we want our application to speak so we're just going to <end><start> say test save load data and then it loads so i mean that progress bar <end><start> if we switch over here that's gonna be these call tags here like <end><start> public and we're gonna say hot or not and it's gonna take in a context i <end><start> just bitmap factory dot decode resources a resource and then get resources <end><start> like if you guys have a linear layout or a relative layout we basically need <end><start> that is going to be the app app widget id something like that we're gonna <end><start> url we're going to add to it is a question mark screen underscore <end><start> anything we basically just created our file output stream using the <end><start> say st dot close and the third button is just going to toggle it whether <end><start> application is gonna do it it doesn't matter but if we just <end><start> implement the select or the item selected listener and again we <end><start> increment by 1 now i'm not sure if we've done for loops yet or not it's kind of <end><start> and we're going to call this one display again you guys can name these <end><start> intent and well first let's use the method start activity for results <end><start> we're gonna pass in the context for this and that's just gonna create a new <end><start> move it around and all that stuff that's about the size that's going to take <end><start> what we want to do is we want to set up a new layout and that's all we're <end><start> array ford slash values or something like <end><start> sorry if that's confusing we're going to say sup a new string variable call it <end><start> preference of some sort so the first thing that we want to do is we want <end><start> can just place it within this method that we just created <end><start> drawer can do so we're going to say set on drawer closed select <end><start> passing the context this and then just the x open oh and the x <end><start> minimum time we'll give it like half a second and for the minimum <end><start> guys do other programming we're going to say android layout gravity and <end><start> then what we do is we just set up basically we can sit like on <end><start> say add and we're gonna say uses permission and then we're gonna go <end><start> going to refer to our dialogue and just close it so we're going to say <end><start> we're just gonna say p index dot length times that by two for two bytes <end><start> class within java we can use some of those methods from the textview class <end><start> the downloads folder so we need our file to kind of reference which folder it <end><start> android title checkbox and android and we can set this checkbox if we want <end><start> so i'm pin our tabs and we have our three tabs so the first one we <end><start> intent equal to basically the camera app application so we're going to say <end><start> obviously since this is an int but let's just take a look at it i pulled this <end><start> the next few tutorials so we created the you know list for full uri with the <end><start> to say new view dot on click listener and again eclipse helps you out so <end><start> set this our fx equal to zero now when we start clicking so we're just gonna <end><start> to set up an if statement if our status is equal to 200 then we're going to <end><start> up now we do this through the power manager because again the wait <end><start> refer to within this class so what we want to do is we want to say <end><start> going to be our email address and this is the string variable that we set <end><start> a hundred which we want and let's check that's pretty good for the most part <end><start> we're gonna refer to our xml reader now we're just gonna say dot set <end><start> textview that we set up which was called http stuff i believe we're just going <end><start> all that good stuff so in our surface view dot resume and there we <end><start> android dot a p-- widget dot action dot an all uppercase app widget <end><start> and we're going to let it implement a location listener so we're gonna <end><start> here and it just again give us some data one is a request code one as a <end><start> release so we're gonna say motion event dot you know <end><start> have to import our rail array adapter and we're pretty much done guys <end><start> equal at drawable forward slash plus selected work in whatever you <end><start> camera application that we just set up and basically i don't know if you <end><start> site here but again we downloaded at least i downloaded the sdk <end><start> is we need to basically relate to the client state and able it for <end><start> say as long as a request code is equal to basically our check that's <end><start> pretty basic and then you have to import intent maybe i already have and <end><start> gonna you know go over to a renderer class because this where all the <end><start> android permission internet and there we go we're going to save a project <end><start> we're just gonna say if cursor is not set to know again that's expression <end><start> going to just select one of these smaller ones <end><start> then all we have to do is add to our overlay list that we created a <end><start> a class within another class is another example or no reason i did this and <end><start> we're gonna call this our location set that equal to new geo point and <end><start> method and we're also going to right click go to source override <end><start> attributes dot get value of the index which was data so again that this <end><start> click method or our bacon and eggs method so that's kind of how <end><start> manager which again is a class and within this class there's <end><start> sexier and that's for text activity for the most part so what i want you guys <end><start> and then just start whatever we want to save so our drawable dot let's say <end><start> familiar with oops so kind of a boring tutorial <end><start> that you can use there's guidelines and i believe there's some kind of formula <end><start> we're gonna use a switching case which again we're familiar with we're <end><start> you know hit new view dot onclicklistener enter and it will set <end><start> those two classes real quickly so we just do again just public void pause <end><start> we hit toggle view it's gonna shut off our satellite view it's going to turn <end><start> go that's what cooling does is we can remove or not worry about one face <end><start> to set it as final no law anymore so we're just going to delete the <end><start> i'm going to set this equal to open bracket quotations i'm going to say <end><start> those to create our viewport and all that good stuff so again we're <end><start> going to call this get data as well just like the last tutorial so you may <end><start> view by d re id dot add and then all we're going to do is say add dot load <end><start> we're gonna do on click listener and then we're just gonna say this and <end><start> this resolved in the next tutorial we'll finish our application and everything <end><start> linear layouts also we're going to add a linear layouts also we're going to add <end><start> it go a little bit lower on the campus until it gets to the point that <end><start> switch this new code the version code - to active and it says obviously this <end><start> load some up or hit apply and then load some of our platforms that we <end><start> in it so you guys want go to this website <end><start> go we basically have our widget configure and this is what's <end><start> again a string because that's what we're working with we're gonna call <end><start> start off this intent that we've been kind of defining so there we <end><start> the bundle i was kind of messing around with this just now as my video <end><start> statement and now what we're going to do is add some stuff to this intent to <end><start> text view so we'll do that above our <end><start> gonna say a gl 10 dot gl underscore float and the stride with zero and <end><start> is we're going to say our ad and then again just load dot load add a new <end><start> set the content view to basically our layout which is just a button so you <end><start> break here and then we're gonna set up our other case which is going to be <end><start> create method hit okay so we got that stuff set up <end><start> and then what we can do is we can refer to the alignment class and then hit <end><start> this tea and all we're gonna do is set our <end><start> you guys wanna check that out i want to give him credit for this because <end><start> do anything new for our activity but i just want to show you guys how we <end><start> emulator and see as you can see it's given us an error it can't find <end><start> keyboard in code since for example if we start a browser application we do <end><start> music's playing right now let's open up our menu and go into our preferences <end><start> then we just have to update our database so again we're going to refer to <end><start> we call it fos and what we're going to do is again we can just save <end><start> viewport and takes x and a y and also a width and height so our initial x <end><start> string we're going to call this random set this equal to our text array <end><start> triangle is clockwise so what we're going to do is we're going to relate <end><start> another nice thing about eclipse is if you guys forget what you want to <end><start> running is equal to false now so if this pause method gets called is running <end><start> new class called gfx surface and i'll explain what that is in a second <end><start> referring to our http example class dot mentor dot this air some sort <end><start> is at and that's how we're gonna set our volume so again just for reference <end><start> our columns name which we're just gonna copy from this get data up here <end><start> make more sense as we go and i'll probably do a review of this get of <end><start> put an ad like somewhere here so let's go down into our code go below <end><start> starting method and again we're just gonna right click go down to <end><start> like this yet but also we're gonna say public void set temp and again <end><start> going to be equal to fill parent and android layout height can fill <end><start> preferences whoops and then we're gonna break as well <end><start> gonna set up our bitmap this kind of review we're gonna call this like <end><start> first thing we need to do is say request window feature and then we hit <end><start> 1 1 1 something like that and now what we're gonna do is again we're gonna <end><start> yourself and hopefully that made sense and you guys kind of get the <end><start> xml ns ads equals and then we have to put in http colon forward slash <end><start> else just greater than sign and then we're just gonna say we're gonna <end><start> so we're just going to say database <end><start> to catch and for this instance we're going to say intercept earth i'm <end><start> for the most part mainly this tutorial is getting about the tab so here we <end><start> get we're going to call this our request we're going to do we're going to <end><start> just because we can now what we're going to do is we're going to kind of <end><start> things within this act email so we're going to say email intent adding to <end><start> saying 250 you probably just want to do 20 so alright i'll see you guys in <end><start> the whole xml thing by now i hope lisi understand how to do it and you can <end><start> know a vertice array type thing because you know we have float values <end><start> updating forgetting these values and all that good stuff so what we're gonna <end><start> that maybe change these variable names to 1 1 1 who knows something like <end><start> the intent so we're going to add that method and it's going to be added <end><start> then we're gonna say like we're going to get some information back a name <end><start> like standard methods these are the ones we just set up they don't mean <end><start> this in a try in a catch so we're just going to hover over <end><start> sure everything works and that's pretty much it for this tutorial guys <end><start> which we called i in and the flags as 0 as well so that's new this is <end><start> go back here we insert a pinpoint which just adds that overlay item that's <end><start> one is going to be called action send it's going to deliver some data <end><start> going to run it on it on the emulator real quick and hopefully we'll get <end><start> say our touch point or a geo point dot get longitude and again we're going <end><start> text view our third text view and we're going to set this text equal to is <end><start> we're gonna do is we're gonna open our hot or not so we can write to it <end><start> just gonna use a method called add pretty simple right and we're gonna <end><start> like that you're not who knows but that's that's where we're gonna set <end><start> you setup some values so we're going to say public static final string <end><start> sure those radio buttons work and there we go again i'll explain that a <end><start> know this get method called data so all we're going to say is data is equal <end><start> xml again which looks like this so it's gonna set the content view to that <end><start> a password so just make a password that you guys will remember in this kind <end><start> it is and what we're going to you know what we're going to do but here we <end><start> to be called protected or it's going to be protected void on post x cubed <end><start> add to that base url the city and the state and again we have to put a <end><start> to do real quickly is set up the emulator so we're gonna say the <end><start> things i'm sorry an edit text we're going to call this input and set <end><start> say set on click pending intent you gotta go pending yeah what's up with <end><start> and then we can say our blue dot set set color to again color dot <end><start> do anything with this widget so it's just kind of a way to check that so <end><start> shapes or triangles or whatever and if it goes out of this kind of <end><start> good so we're just gonna say check and we also wanna make sure the results <end><start> your application so again just make sure you guys open that up and add <end><start> to put this in so right click source implement methods and let's see if <end><start> up now we do this through the power manager because again the wait <end><start> but no that's not that one so i'm just going to pick one screenshot open it <end><start> method called get menu inflator so let's get menu inflator this will kind of <end><start> methods such as content equals and then we can say equals within parentheses <end><start> it displays a string so we're gonna call this r and set that equal to the <end><start> we're going to say file name like this so basically we're going right to <end><start> right there but we're going to call this array because again it's <end><start> delete button and then i just said all on click listeners and set up you <end><start> generous and just say sleep earth red dot sleep and then we're going to <end><start> in between as you can see up here otherwise you know it's not gonna <end><start> to say is new media scanner connection dot on skin completed listener so <end><start> that's what we're going to do in this tutorial noth-nothing suite for the <end><start> view map we're going to call it and import map view nothing new again <end><start> like as we run the program or run the application again yeah i press <end><start> make it go even faster because we have that onclick method so i don't <end><start> just need this cv update for our attractiveness or hotness so again <end><start> up here and set up just the standard switching case that we're familiar <end><start> constructor again when we create a constructor has to be the same name <end><start> we're just gonna say negative 1 1 negative z access and that's going to <end><start> we're gonna go right click on a resource folder right there and go new folder <end><start> basically go into your graphical layout and use a toggle button i'm going <end><start> the new boston alias and make sure i spell right there and then again just <end><start> let's just change this to string row and long row something like that and <end><start> tutorial and we're just going to set up this create entry method so the <end><start> example class and all we're going to do is we're going to set up a new <end><start> class what we want to do is we want to set up a content values <end><start> builder and we're gonna say url within the parentheses so basically what <end><start> widget config dot xml again a layout and <end><start> for paint we're just gonna say null so that's basically gonna somewhat <end><start> as well we're gonna call this mp and then we're gonna set this equal to <end><start> are classes over here under our package and we're extending the activity <end><start> parameter means it means nothing right because android android <end><start> gonna say widget config something like that <end><start> review of our last tutorial but let's just make sure it works all right <end><start> save this string that we created down here within our on click of our <end><start> pass we're gonna call it pass toggle or pass hog like that and set that equal <end><start> on progress update and it's going to take an <end><start> variable that we created again public or private up here to equal something <end><start> for class id r dot raw dot explosion and then we're just going to do mp dot <end><start> with a textview trying to gather my thoughts here sorry and today i <end><start> method and we're going to set compass equal to new my location overlay <end><start> we're gonna do is say dot gl underscore vertex array and that's just gonna <end><start> what was it passed hog and then edit text was input and <end><start> our input stream reader as well it looks like we're probably gonna run out <end><start> again if you guys want a little bit more information you can you just hover <end><start> other android xml file and we're going to call this photo all lowercase <end><start> scroll all the way up to the top and create a file we're gonna call this <end><start> guys just copied so we have this key sort here and then we just say - <end><start> input stream reader and within its parameters we're just going to get <end><start> called last tweet then we're just going to give it again a string name which <end><start> say add unimplemented methods and down here is our online click listener <end><start> i said six three one and it's supposed to be six three two so if you <end><start> set up again this is just going to say extends activity and we got to add <end><start> take a picture but what alright well hopefully we can <end><start> going to you know release our way clock so again just go to override methods <end><start> and we're gonna call this one file name something like that or actual <end><start> so just make sure you save the manifest close that and we're still gonna <end><start> and y values within this class and we and you know we said that this <end><start> and then after that this is where the magic is gonna happen down here <end><start> the data all that good stuff so what we're going to do is we're going to <end><start> again this l variable is just basically converting whatever was in our edit <end><start> then all you're going to do is basically decide which jdk you want and if <end><start> gonna go to the next line so we know that we got that chunk done and <end><start> within our on create method and we're going to set our counter equal to <end><start> can also set up a dialog where we're gonna refer to the exception <end><start> also set up our edit text that we created which was called info or <end><start> we're just going to say prefs or are going to say our file name <end><start> we get this to work doesn't crash our emulator again and again so <end><start> stuff within the xml so what we're going to do is say edit text and then <end><start> likely it's the same name so there you go we're going to call this password <end><start> and then just make sure tutorial section right here as well so yeah it looks <end><start> text view to this string that we just got so here you go this is why we had <end><start> our handler so let's go into our handle handler class talk about that <end><start> going to say text-to-speech equals new text-to-speech this takes two <end><start> variables there and now let's set them all up to be equal to zero at <end><start> set up some methods within this class to kind of set up these variables to <end><start> method for the most part nothing too new <end><start> satellite or is street view however you guys wanted to do it so we're gonna <end><start> actual save button we're going to set this file up equal to basically or <end><start> say our file and say equal to new file and we're familiar with you know just <end><start> again so then we're going to say add drawable and then splash under <end><start> above our on create method called show results and we also need to <end><start> hope you have a good one and catch you <end><start> so we're just gonna say and and we want to make sure a request code or i'm <end><start> can say like text here but again we're passing in some information when we <end><start> dot get drawable refer to maybe well a drawable folder if you guys put in <end><start> call this string info our string data and we're gonna just basically <end><start> then we also have to add our state as well so that's s again those are <end><start> alias maps key store hit enter and then we need to create a password that <end><start> say set text to result again that's what's being returned from our <end><start> basically all of my tweets doesn't really look like it but it is so what <end><start> buff so there we go now we can't have reference to again our vert buffer <end><start> we're just going to copy that and paste it below as well and just you know <end><start> we're just gonna say negative 1 1 negative z access and that's going to <end><start> you guys see when we run this now of our slider class we can go way beyond <end><start> text and then let's say a button to buttons let's do two buttons so <end><start> to a new gl surface view so pretty pretty default there and that's <end><start> be useful we're also gonna create one new folder and we're gonna call this <end><start> we call it overlay list and we're just gonna add now our custom overlay <end><start> to have our alias name which there's only one alias under marquis <end><start> gonna do is we're gonna set up our byte buffer i know it's kind of <end><start> method i don't know i'm just weird like that even basically basically <end><start> background as well so we're going to say android drawable and that's going <end><start> and button start watch and a stopwatch and button start watch and a <end><start> dot get fit get fit get action equals motion event dot action action <end><start> released when the on pause method gets called i'll just test their <end><start> folder so our drawable folder here and just basically set it to the <end><start> us again to use a vertex array and it more than just an abling the the <end><start> did it work and we're going to set it equal to be true to start with and <end><start> and i'll catch you guys in the next tutorial have a good <end><start> choose that within this option here and then hit finish and it should <end><start> just leave it as adapter here but we don't have a adapter yet so we're <end><start> starting at one and then the next time we enter something into our database <end><start> going to create a string and we're going to say this is our data we're going <end><start> from and then we're also going to set up something else called android <end><start> going to say middle rec for like the because we're going to put <end><start> buffer and this to c as well and also we need to you know get the length of <end><start> let's see if we can import it like that yeah just hover over it after you <end><start> and then it opens our camera activity what opens our camera activity we <end><start> edit text for the most part set up what we also want to do is set up a <end><start> so our class name which was called tabs dot this so again our just our <end><start> position 0 is clicked is going to say our package name plus you know <end><start> to open it and then we can also do fos closed and we would write within <end><start> change this to horizontal you know and then check it out it's a little <end><start> so there we go um now we have this magic magic <end><start> and we're going to call this one display again you guys can name these <end><start> it here then we're going to say our username for example my bring back <end><start> too new in this tutorial as you can see the image view is new i guess we <end><start> new line when it's done reading that specific line and that's going to <end><start> as always and then we're just gonna as always and then we're just <end><start> config and we first need to refer to our package name which my package is <end><start> activity and that will they'll just open up our sql view or we're going to <end><start> our application i'm also going to change this button reference i thought i <end><start> above our on create method called show results and we also need to <end><start> the string array and add some items to it so we're going to say item and <end><start> label mine maps alias and again you guys have to remember <end><start> gl lower case like that sorry and then we're just gonna say vertex <end><start> here and a view of some sort and if you here and a view of some sort and if <end><start> to this collected string that we read for the most part so now it's going <end><start> gangster-style just going to hit dot stop and then tts dot shut down <end><start> again it's gonna be of the type new boston and as you can see it opens <end><start> what's called display now we're just going to delete <end><start> and then we can say our blue dot set set color to again color dot <end><start> we're just going to delete the id for a text view and we want to fill parent <end><start> those two classes real quickly so we just do again just public void pause <end><start> values so we're gonna say x equals y equals sensor x equals sensor y <end><start> alert dot set button hit enter format it for you guys and we're gonna change <end><start> what is talking about quickly in the last tutorial is we had to save it as <end><start> our left as zero our rights going to be canvas dot get wit and then our <end><start> be something we're going to refer to in our whole class so just set this up <end><start> the same file name or reference that we use in our last tutorial when we <end><start> let me say public class load some stuff and then we're going to say <end><start> trying to think what we can do that's <end><start> that that's read to through a ton of bytes of data and right now what <end><start> the on click so nothing new there and basically when we hit this click we <end><start> set up a string variable we can again do private if you want string and <end><start> here whatever you guys want again we can set up a toast dot make text <end><start> and we're going to pass in our entity which we call the e and that's <end><start> true it's on so there we go that looks pretty good let's set <end><start> are probably still pretty confusing for you guys but just stick with the <end><start> set text to et which will again be our edit text from our preferences so <end><start> sexier and that's for text activity for the most part so what i want you guys <end><start> guys learn to open an activity we're going to call intent i new intent <end><start> string that's going to convert our file into a string and offer <end><start> do all nevermind we're just gonna stick with kind of same familiar familiar <end><start> of our location manager and the criteria what kind of criteria we're looking <end><start> and we're going to call this integer array i'm sorry and we've worked <end><start> what language has been spoke which language is being spoken so we're <end><start> to put this in so right click source implement methods and let's see if <end><start> that let's set up some variables that we're going to use and they're gonna <end><start> giving you guys the option or the choices to do so like i said i just <end><start> the first thing i want you guys to do is change or linear layout back to <end><start> our application i'm just going to kind of get out of here and then run it <end><start> guys caught on to to it for the most part and again we'll review it so <end><start> we're going to set this equal to a new xml data collected and i'll explain <end><start> so we're just going to click that and if you guys remember we cleverly <end><start> so we're going to do that with a for loop and we want to start at <end><start> maximum volume so we're gonna say these are gonna be int values so <end><start> the size of our arraylist so again it's going to be simple so pinpoints dot <end><start> that and we're going to paste it below and i grabbed one x bracket so you <end><start> few variables to our class our whole class can use so above our on <end><start> copy/paste gfx and save that as well as go into our menu and also do gfx <end><start> one two and for the bottom so for laying on <end><start> and let's check that out so that's pretty good so that's <end><start> so there we go basically that's it for this tutorial i know these paths <end><start> information pulls up this now just just a note if we put like 5 it's going <end><start> have set up here again a thread looks for the run method and then we're <end><start> because as i'll show you real quick with our emulator and again you guys you <end><start> we're going to use these you know as we go through this opengl series but as <end><start> our power manager here and then we're going to say get system service and <end><start> all right so now that we have everything set up we can actually do some work <end><start> call the other one other one get four the most well i don't know what <end><start> resource folder but just in case you guys forgot we're going to say <end><start> things within there as well and we have to accept this license agreement for <end><start> everything should work out perfectly so let's just start stop and as you <end><start> and again as you can see it's just a private class that's static and we <end><start> or not class or object we're going to call it x i don't know new hot or <end><start> the actual coding just some of the methods again we just set up our <end><start> lastly case two and again a break statement now basically it's going <end><start> class called external data and we're also going to create a class <end><start> new touchy and then what we have to do is we have to we're going to have a <end><start> manager which i'll explain what that does here in a second but we're <end><start> kind of define what we want this text paint to do so first thing let's <end><start> so this will give us a frame rate of twenty frames per second for the <end><start> edit text and we also have one last one which was our text view we're going <end><start> add another one by just down here we choose another file so i'm going to <end><start> two buttons called start and stop all right no no no we need to call <end><start> activity but again just to review it's pretty simple we're just gonna create <end><start> well this will be our starting x for this one and again our plus bitmap <end><start> say new hot or not and we're gonna pass in the context of this this class or <end><start> you know if we can't get the id we're just gonna finish the application <end><start> the oncreate are that you know over here in our graphics class is saying <end><start> like that but just show you guys an example we're gonna set up our <end><start> layout up here a relative layout i should <end><start> something something something you need to take it times 1e whoops times 1 e <end><start> set our onclicklistener and we're just going to say this as well now <end><start> actually let's set up our edit text or a string first so we're going to say <end><start> plus equals plus again and then whatever we're passing in so l row 1 and then <end><start> so we're just going to say return true so i'm i don't know if that that's <end><start> so we're just going to say database <end><start> overlay overlay item that we're passing in to be this geo point our <end><start> we're gonna animate you we can also set our zoom with our controller so we <end><start> even just you can also say external data which is our class name dot this <end><start> something like that and now we're just gonna change our text views i'm <end><start> application won't crash and that's probably it for this tutorial i <end><start> just gonna say art helper dot close and that's gonna close again our <end><start> to check out that website because obviously i didn't it so let's go <end><start> ton of different packages i know i said a ton like a ton of times but <end><start> methods it's going to say intent i so we're going to call this intent and <end><start> we're just going to call this v for our view and we're going to say new view <end><start> can use with this webview so far the only method we have is loading a <end><start> just going to say gl gl coalface and we have to refer to which face we want <end><start> listener or something to this so that's what we're going to do on click <end><start> state which we're going to call s this is gonna be our edit text which i <end><start> know how to do this so we're going to call this class text text play <end><start> which was called full you full url like that and we just have to add our <end><start> that and then a delete the type there and paste it above as well so now we <end><start> kind of his layout for the most part but i really like the structure of it so <end><start> variable we're just gonna again show it and create it so there we go we kind <end><start> stuff within that folder so how we do that is we just say path dot m'kay <end><start> reference so we're gonna say string and we're gonna call this base url <end><start> we're just gonna say public whoa sorry i'm not angry at you guys public <end><start> information here get everything set up with our database name the version <end><start> going to do graphics and we're going to say extends activity just as always <end><start> go back here we insert a pinpoint which just adds that overlay item that's <end><start> down pretty simple i mean it's not much of a tutorial i know but hopefully <end><start> say is we're going to say web or our brow again which is our web view <end><start> pass through which will be our string and again whenever this on click i <end><start> different than our string we're going to set this equal to be a new <end><start> hear and see we again we can just you know mess with the music so <end><start> return so again we're just going to say json array and we're going to call <end><start> our database name which we called hot or not database which the variable name <end><start> gonna say compass dot disable compass and then we also have a method <end><start> going to create two methods within this this class so we're going to go <end><start> shoot down to this tab here so just find a tab like this that says add site <end><start> drawable in the context then we're passing our drawable into <end><start> and there we go now we have a url called website what we need to do to parse <end><start> point zero point one point two instead of handling actual you know our <end><start> gonna set this equal to new notification and then we're gonna refer to <end><start> let's just change this to string row and long row something like that and <end><start> there so we're just going to click on one of these and for the first one <end><start> dot start maybe yeah we can use the <end><start> sure it still works all right so basically paste that <end><start> get familiar with the layout of the oncreate stuff again some some <end><start> for android programming so that might take a little bit we're just going <end><start> menu here and we're gonna import or use another menu or another method from <end><start> android references but now we're going to use the add references so we're <end><start> apks here what's wrong with my mouse keeps right-clicking for no <end><start> of these the the flags and the masks to be fullscreen for the most part we <end><start> remember where all these locations are even to get our our actual key for a <end><start> within parentheses again the exception type is called class not found <end><start> bitmap and then we're gonna say extras which is basically this bundle <end><start> the back view so we're gonna go six five four all right and we're pretty <end><start> that and then a delete the type there and paste it above as well so now we <end><start> going to set this equal to textview and text view results so there we go <end><start> want to show you guys again kind of emphasize the point that the final <end><start> to say json object and we're going to call this last for referring to the <end><start> controller now what we can do is we can animate our controller to go to <end><start> familiar they're thinner on create method we might say client it's equal <end><start> power manager and what we're going to do is we're going to <end><start> in the context again we just hit our surrounding try and catch that's <end><start> our splash activity that we have set up from quite some time ago it's been <end><start> it's package name is and then our class name that holds configuration which <end><start> to hit set those up real quick i'm going to call one send xml and i'm going <end><start> browser application and so we're going to say our our spec dot set content <end><start> need to do is we gotta say gl gl load our identity we just need to say gl <end><start> can read this it's all that good stuff and hit generate api key and here we <end><start> dialogue interface but since we're working with alert dialogue we want <end><start> method so you guys should know how to do <end><start> equals and we're going to say at android because we're referring to the <end><start> called shared preferences so we just need to set up a little variable for <end><start> setting this text paint to be let's make this text paint what else <end><start> dot google dot ads so i know it's kind of long but you guys wanna make <end><start> simple switching case that we're all so familiar familiar with get <end><start> the whole canvas for the most part so we're gonna say is our surface view <end><start> make sure it works oops and we're just going to scroll <end><start> little bit longer by just adding a thread sleep method to like 1,000 or <end><start> it's kind of a string reference and again we're say android content dot <end><start> with a textview trying to gather my thoughts here sorry and today i <end><start> get the length that and then times it by two so it's pretty much the same <end><start> thing we need to do is set the content view of this but you guys probably <end><start> arraylist and we're just gonna refer to the default and it's been a while <end><start> clear method we're just gonna say gl dot gl matrix mode again oops gl matrix <end><start> paste one of the default activities that we have set up and paste it and <end><start> going to set up a pending intent i'm just going to call this pr we're <end><start> provider we want our towers reference or string and then what we want is <end><start> method what we're going to do is say remove updates so we're just going <end><start> a result nothing new there again we have our stop and our start time as give <end><start> valid i'll explain this in a second but just hit enter and continue beneath <end><start> voice and for our listview say lb voice return so again nothing <end><start> floats here we're just gonna call this color buff and then what we're gonna <end><start> the only other thing we need to do is because we are setting the <end><start> pretty much the purpose of this tutorial and again thanks for watching i'll <end><start> recognition class again a recognizer intent and we're going to say dot <end><start> drag and drop a button in there and then edit it then we're also going to <end><start> we're gonna say request location update and so we're just going to say <end><start> events you can you know start the time right when they touch the screen <end><start> we're going to program anything i'm going to teach you guys how to export <end><start> going to do is set up our test text view that we set up up here i believe <end><start> change all those the x 1 for the most part and then we just have to you <end><start> string reference that our whole class is going to refer to as well as a <end><start> most recent tweet or i'm sorry that'd be the sixth but that'd be fifth etc but <end><start> and then just start whatever we want to save so our drawable dot let's say <end><start> reference so let's open up our preference xml here and as for our <end><start> just you know your plain text so if the toggle is off it's going to be <end><start> and then factory so this is just this is just a variable we're gonna call <end><start> stuff but for example we don't really care about that we're just going to <end><start> this variable so our whole class are all of our methods can use it we're <end><start> again we're gonna say get system contact our system service and we're gonna <end><start> drawer can do so we're going to say set on drawer closed select <end><start> method now what we're going to do is we're going to scroll down to the <end><start> know we can pick a color from here so let's do like <end><start> define the rectangle so what we can do is say middle <end><start> tutorial i was going to do a kind of an overview but for the most part i <end><start> and this is what these will be the entries within the list and we're <end><start> helper which again is just this class here so we're going to reference <end><start> we're going to set this equal to a new xml data collected and i'll explain <end><start> just going to kind of separate those two so we have some working room and <end><start> we're going to say specs and then we can say det dot set content as you can <end><start> random object called our set this equal the new random and then we're all <end><start> milliseconds which is equal to five <end><start> gonna do now is basically i'm gonna go to the place where i downloaded this <end><start> again the default value is set to true so we're just gonna start it up <end><start> landscape or portrait so what we want to do is have it kind of like this <end><start> string and we're gonna call this body because it's gonna be the body of <end><start> variables so the first thing that we're going to do is we're going to <end><start> everything accessible here for a whole class or edit text and we're gonna <end><start> when we first click so what we're gonna do with in this case we're gonna set <end><start> stream i believe and then there we go and get an input import the <end><start> of difficult but now here's your pros you're showing everybody <end><start> and we're just going to set up our can write dot set text to initially be <end><start> should be two brackets below we're still within the oncreate method and <end><start> our bufferedreader and then what we're going to do is we're going to try <end><start> gonna call this our table or actually info we'll call it info and we're <end><start> methods that we can use for this class i should say over source <end><start> try and help you guys out as best i can and you know because i don't i <end><start> basically what this on long click is is if we click and hold for like a <end><start> and android layout height we're going to have it wrap the content context <end><start> just closed off our statement with a forward slash a lesson sign so <end><start> is it on create options menu let's look yeah that's right here sorry on <end><start> shouldn't be a big deal basically what's happening is we are drawing we want <end><start> going to create it by right-clicking or clicking this new folder here and <end><start> forgot to uh forgot to use our font so one other thing we need to do to <end><start> and again this will take an intent so we need to create an intent and we're <end><start> for the most part so we're going to say is we're going to say counter and <end><start> host so the first thing that so the first thing that we're going to do <end><start> best fits the given criteria so we're basically getting best you know the <end><start> code which again is something that <end><start> type of exception we're going to try to catch and it's called e now within <end><start> listener and then we just say this because again we're implementing <end><start> this oncreate method so our whole class can use it so again we're just going <end><start> just going to say again sliding drawer just like any other time we set up <end><start> to hit set those up real quick i'm going to call one send xml and i'm going <end><start> you know this activity is getting quite we aren't probably gonna do too <end><start> that we defined earlier so we're going to refer to that we refer to that <end><start> linear layout where we define some stuff and we're going to set up the <end><start> whoops cursor dot get string and then <end><start> our bufferedreader and then what we're going to do is we're going to try <end><start> just going to get the intent or i'm sorry get the integer and we're going <end><start> hot or not instance where we pass in the context of this class and then <end><start> create table create space table like that and then we're going to hit <end><start> that we can do or actually this one not very self-explanatory less of <end><start> and convert it in ten ants so we're gonna say int temp is equal to <end><start> dialogue dismiss and that's just to get rid of it because you know it's going <end><start> here and we're gonna say whatever finish dang it i hate how it does that i'm <end><start> preference so what i want you guys to do now is open up our data leave no <end><start> go we're going to just click this method sets it up for us now the <end><start> android name is equal to android dot up wit again dot provider and we're <end><start> we're again set up a byte buffer call this our point byte buffer or point <end><start> methods that we can use for this class i should say over source <end><start> to keep your package name and then we're going to go back to where i said <end><start> and again the difference between the media player and soundpool is the <end><start> that class so again we're just going to save you dot onclicklistener there we <end><start> volume right now it's not program so you can still hear the volume but it's <end><start> class by right-clicking on the package my computer doesn't freeze here and <end><start> to refer to this on click method that we set up and we got that because <end><start> so we're just going to set that up real quick and catch and then exception e <end><start> setup now it's called our de id oops our dot layout dot sql view like <end><start> at the maximum volume and i'll just mess around with this hopefully you guys <end><start> implemented the onclicklistener so that's going to add the on click <end><start> configure input so what that first text view is called what we're gonna do <end><start> this is within our list preference android entry values for the most <end><start> we're just gonna print a new line so you print a new line again just backslash <end><start> text and we're gonna set this equal to whatever so this is a message <end><start> called android apps and we're going to say maps save this as maps alias or <end><start> gonna say result and all we got to do is we got put extras in just like when <end><start> going to use a click listener on click listener because again we have <end><start> gonna say gl triangle dx i'm gonna call it try something like that then <end><start> a lot of options we can say like getstring or something and say <end><start> so we're going to say results underscore okay all cap locks and that's <end><start> make you cry well that's about about all i wanted to chitchat err about oh <end><start> set text but now we're going to set it to this string that we just got so <end><start> gonna say l dot get latitude and longitude in int l dot get latitude <end><start> activity and that's pretty much it for this tutorial will probably <end><start> all these options such as the gone one i was telling you guys about <end><start> and we're gonna add our widget adapter uh the new boston again as you can <end><start> attributes dot get value of the index which was data so again that this <end><start> a certificate fingerprint and we're gonna hit i've read and control <end><start> know where you guys probably got super confused at the beginning of the <end><start> reference so we can refer to it in java so we're just going to say id <end><start> be exactly the same as the reference we created in our splash activity <end><start> key store and then we have to hit space - store pass and our password was <end><start> that there and also the other thing that we need to do is set up a geo point <end><start> button just be widget button widget open because this one's going to open <end><start> the nth for this we're just going to say our <end><start> variable and we're going to set this up since we don't have a variable <end><start> we aren't giving it any attributes for it to kind of adapt to or convert <end><start> client and we're going to say this client is again just keep things kind <end><start> but uh here's our square and what we want to do is we want to create <end><start> create and we're going to pass in our database so that's basically going <end><start> arraylist we also want to populate so we're just gonna say this and <end><start> a float yeah float that's something new and we're just going to call <end><start> excuse me i just drink a ton of pop so like my throat's kind of has all <end><start> go back to so we're going to set up a simple if statement and we're going <end><start> part from our file input stream which has the length or this many <end><start> array which we call data array then while our file put in our <end><start> that good stuff so pretty basic first thing that we're going to do after <end><start> again just the configure is we have to have this action <end><start> let's change that splash to like one second so i don't have to listen to <end><start> going to go to this on click method it's good going to determine which button <end><start> dot travis and then dot and then basically your class name in <end><start> class i know i told you guys we're done with that but since i'm going to <end><start> doing this but this is kind of the layout of an activity i created when <end><start> return an end value and what we're gonna do is we're going to say location <end><start> what we need to enable is the color array so we're just gonna say gl gl <end><start> result code is equal to results okay and that should be familiar so there we <end><start> paste and this time we're going to say private just so this class can access <end><start> thing is you also want to have all of your references the exact same in <end><start> going to set up a pending intent i'm just going to call this pr we're <end><start> where my path is located so what i'm going to do is i'm going to copy <end><start> here we're gonna say key row id comma key name id or key name and key <end><start> the methods from the button class so how we use a method is we use our <end><start> new for the most part i mean it's a tab new for the most part i mean it's a <end><start> of the background stuff that's happening the javascript object notation so <end><start> to basically when we use our open method that says throw exception we're going <end><start> wrap content too as well getting nothing new pretty pretty easy huh and <end><start> ford ford slash two forward slashes and we can say saving data via <end><start> within there if you want and then when you click that we're going to take <end><start> we're going to create this method as well so i'll see you guys in the <end>