<start> going to be called android content dot intent dot action send and you have <end>
<start> false but read is going to be true and then the last state we're gonna say <end>
<start> there we go so let's check this out everything's looking pretty good <end>
<start> i'll explain in a second we're going to say cursor our cursor that we set <end>
<start> drawable object or that little icon that we set up i'm gonna say our drawable <end>
<start> the actual specific you know whatever dot jpg or something like that p&amp;g <end>
<start> this comes from our activity class so we're going to say on activity <end>
<start> the id which we called aw id again and the views which we called views as <end>
<start> let's just get everything set up so the super is happy for the most part for <end>
<start> starting point the exact same name as our class name that we have <end>
<start> our emulator looks like when we run our application and again just quickly <end>
<start> method called get menu inflator so let's get menu inflator this will kind of <end>
<start> the value again it's just kind of fine-tuning everything getting you <end>
<start> that buffer so what we're going to do is we're going to say gl dot gl an <end>
<start> or not class or object we're going to call it x i don't know new hot or <end>
<start> for all these other ones as well so not too not too pretty there for that <end>
<start> how we kind of add and add within our application and you can kind of see <end>
<start> and you know something like that and also set the duration so just toast <end>
<start> find it make sure i install it in the right place yeah under my <end>
<start> quick layout nothing new again just right-click new android <end>
<start> basket so we're gonna say basket and we're gonna just say new <end>
<start> sycamore to our object so we can kind of see that it is three-dimensional <end>
<start> view by d re id dot add and then all we're going to do is say add dot load <end>
<start> all the way up and we can achieve that by setting up a frame layout so <end>
<start> want it to do is we're just going to say new load <end>
<start> pause method so we're gonna say on stop sorry our song and it is getting <end>
<start> interrupted air i'm sorry interrupted exception what i was doing that's <end>
<start> actually let's do if changing y is less than a canvas dot get height then <end>
<start> the third one we're going to say parentheses o to d so basically <end>
<start> new line when it's done reading that specific line and that's going to <end>
<start> like get information i forgot what it's called them windows i mean just had <end>
<start> actually let's do if changing y is less than a canvas dot get height then <end>
<start> can use with this webview so far the only method we have is loading a <end>
<start> let me say public class load some stuff and then we're going to say <end>
<start> sure everything works and that's pretty much it for this tutorial guys <end>
<start> reference to the xml for a seat bar we have to set our content view to that <end>
<start> just gonna say our surface dot on resume so basically that's just going to <end>
<start> we're gonna call this notification manager never just call this n/m <end>
<start> a sliding drawer and we give it an id that we want to reference in java <end>
<start> stuff like that so we're going to set these vertices to private and it's <end>
<start> implemented the onclicklistener so that's going to add the on click <end>
<start> say our location manager dot remove updates and it's the listener again <end>
<start> something like that so we get passed in an overlay item <end>
<start> we've used a few times now i believe and we're gonna say context dot <end>
<start> we're just gonna say p buff is equal to our pb buff or a point byte buffer <end>
<start> android as well we hit enter and it gives us this unique fingerprint <end>
<start> this name and that returned hotness so again our edit text we're called <end>
<start> picture and set it as that image u and then let's go to our image button ib <end>
<start> if statement when they release so we're gonna say <end>
<start> as well and then we're gonna implement <end>
<start> dot the new button boston dot travis and then you know lesson sign so that's <end>
<start> resume method here that we created and so we have our location manager set <end>
<start> is we can open up our shared preferences class just save some time and we <end>
<start> so it's going to tell us what position was <end>
<start> gonna say int max v and we're gonna set this equal to our audio manager dot <end>
<start> sure it works real quickly so we're preferences class and we're going <end>
<start> is we can either probably just hover over here again it'll add it for <end>
<start> the keyboard so this is how you close the keyboard we refer to that <end>
<start> we're gonna go above our class and we're gonna set this equal to static final <end>
<start> type so we're going to say overlay type of list and then we're going to <end>
<start> again in your assets folder which is not in your resource folder but there we <end>
<start> again it's called sliding drawer it's a class we're just going to call this <end>
<start> so we're just going to create a uri and we're just going to call this <end>
<start> role i guess it's not again but we're just <end>
<start> so what we can do is say sensor x and i believe this was our zero something <end>
<start> don't know if it's on this page or not but there's a formula to figure out <end>
<start> new for the most part i mean it's a tab new for the most part i mean it's a <end>
<start> easy to find so just go to your c drive or your main hard drive and look for <end>
<start> and i'm going to show you that problem real quickly hopefully when we run <end>
<start> extends activity and what extends means is that we're extending the <end>
<start> to set up that reference as always so we're going to just say webview <end>
<start> there's a context which we're gonna say see a request code which we're <end>
<start> about us is what we're going to refer to our ideas then just to show you <end>
<start> like what why is it calling it to clear a color well basically all it's <end>
<start> well basically what's happening is we call that within our on create method <end>
<start> stuff so we're gonna say is try and then within the try brackets and <end>
<start> pretty like said pretty simple here so let's get into it i just we're going <end>
<start> class so we're gonna say main dot this and then what we're gonna do is <end>
<start> last activity pulled text play and change it to email so the an effete <end>
<start> but for example if you just said www dot it's not going to work you have to <end>
<start> in between as you can see up here otherwise you know it's not gonna <end>
<start> data dot this text scan complete and duration toast is dot set length <end>
<start> if this has a purpose i think it's just something android developed for <end>
<start> and basically add our overlay to our list within again this if statement <end>
<start> method which is basically that string and all the other good stuff just <end>
<start> buff and tell what position we want to <end>
<start> method so you guys should know how to do <end>
<start> for all these other ones as well so not too not too pretty there for that <end>
<start> adapter and you just say adapter and this should be kind of familiar with <end>
<start> but anyways so that's basically the <end>
<start> we're also going to do that within the stop event so we're going to say <end>
<start> set this equal to be zero let's see if the javadoc has anything yeah just <end>
<start> just give us some stuff that we can work with we're going to check if you know <end>
<start> might not do anything so if it doesn't just exit out of there and click it <end>
<start> and again i called mine green ball so it's going to be our dot drawable <end>
<start> going to be equal to fill parent and android layout height can fill <end>
<start> we're going to label this exception or this are give this variable the type <end>
<start> view where we label that as our browser so make sure those are variables we <end>
<start> completely red and completely green and then no blue and maybe 0.5 for alpha <end>
<start> different things here but again we're just going to say static final <end>
<start> android gravity to be sinner nothing too new basically we got introduced to <end>
<start> say dot gl clear color and this is basically saying hey when you call <end>
<start> we're gonna say open raw resources i think we've done this <end>
<start> listener or something to this so that's what we're going to do on click <end>
<start> constructor because again any time this this class is accessed it's going to <end>
<start> and our can read dot set text to false as well so if we get a false we know <end>
<start> now within the way this application setup but i just want to show you <end>
<start> call del row but l row like that and then the fourth parameter we're going <end>
<start> in very beneficial to have a set frame rate that you work with and kind <end>
<start> it kind of cleans up the code and we're just going to check and make sure <end>
<start> and we're gonna call this our surface and there we go at our imports and <end>
<start> adapter which is basically like a list view and within the list view it <end>
<start> we're going to say at drawable forward slash custom and we are good to go <end>
<start> gonna say get width this is just kind of a common trick that programmers used <end>
<start> class here and the first thing that we're going to do is we're going to <end>
<start> our input stream reader as well it looks like we're probably gonna run out <end>
<start> output stream exception and now what we're gonna do is we're going to <end>
<start> data something like that so that's what data something like that so that's <end>
<start> equal the same thing again we're just going to access the preference <end>
<start> used within multiple methods and as well as how to set up your own <end>
<start> happens so the first thing that we're going to do is we're going to set up <end>
<start> gonna set this equal to audio manager just the basic setup <end>
<start> to do is open it and as you can hear that's our explosion noise that we <end>
<start> background sound you're gonna use the media player so again nothing too new <end>
<start> application see what what happens for the most part and also maybe one <end>
<start> just going to set them up so we're going to say button and we're going to <end>
<start> this and we're going to implement one click and we're going to set up just <end>
<start> lights the sound vibration all that good stuff so we're going to choose <end>
<start> which we'll do in the next tutorial but just to get started we're gonna <end>
<start> activity here and it's called on options items selected so just look for that <end>
<start> going to do much but we're just setting it up for the most part again <end>
<start> button and they never hit the start button then we're going to get some <end>
<start> now i'm going to say from a password it's travis again travis and validity <end>
<start> the most part here but we're just setting up the setting up all the <end>
<start> is also going to be a text and not null we could have had this set up as <end>
<start> method and it's called on click basically that's the same method <end>
<start> call this doing work cuz you know it's pretty much handling all of our <end>
<start> again since this is going to return a string we want to set up a <end>
<start> the sensor event listener we're also going to set up just our you know our <end>
<start> statement of some sort so what we're going to do now is set up our <end>
<start> this array paths up here the string array up here so it's the right <end>
<start> things i'm sorry an edit text we're going to call this input and set <end>
<start> this triangle or we'll get into 3d programming with the square of some <end>
<start> constructor is called from our graphics surface class it's gonna you know <end>
<start> this tutorial we don't have a lot of time but let's create a custom pin <end>
<start> we're gonna go with it and then just hit create a video whoops and hit ok <end>
<start> row four index row and we're going to set this equal to a cursor dot and <end>
<start> so what we're gonna do within our on draw frame is after we you know call <end>
<start> guys familiar with the methods that we have used so far we're probably going <end>
<start> going to set it to something like 100 because 100 is pretty easy to work <end>
<start> so we're going to say our dot id dot <end>
<start> the next few tutorials but uh just to give you guys kind of idea how to <end>
<start> hit the notification it's gonna start up our class and it's going to start up <end>
<start> is we're going to say if state and we can't compare strings like this is <end>
<start> going to do is just add that reference as always <end>
<start> use our geo or touch touch point with in some of these other methods and <end>
<start> what we're going to do in this tutorial i just thought this would be a good <end>
<start> which row id we want to have so again we're just going to say row id equals <end>
<start> guys can contact me at that email i'll guys can contact me at that email <end>
<start> the most part just how to access our preferences and how to use it for <end>
<start> menu class we're going to add an xml file to this so we're going to <end>
<start> gonna say oops at plus ford's f plus id ford / webview browser or something <end>
<start> click that there for the context we're gonna say this id we're gonna say r <end>
<start> our string buffer dot to string and then what we're going to say is return <end>
<start> we're gonna call this notification manager never just call this n/m <end>
<start> surface view now basically this is just gonna handle the surface of a <end>
<start> references available yet we i go over to our xml file save it i always <end>
<start> zero which will be the first thing in our list which will be music and <end>
<start> you can see three is selected let's go hitter menu hit exit which will exit <end>
<start> that's gonna be a gl surface view and we're gonna basically set that to be <end>
<start> hover over and say surround with try and catch and it sets it up for us <end>
<start> to copy this or if you guys want to type it out you can as well but what we <end>
<start> same as whatever you define your variable type as so my bring back <end>
<start> eclipse and under this windows tab for for if <end>
<start> output is how we write data and we're going to set that equal to <end>
<start> gonna get the starting point or the time for the most part when that <end>
<start> you can see it's checked we're gonna uncheck it hit back and then menu <end>
<start> constructors again one that just handles a drawable being pass in all <end>
<start> show you after we type it out and then for the second parameter we're <end>
<start> what we need to do is we also need to set up a line so we're going to <end>
<start> so how we do that is we're gonna say gl gl frustum f as in float and what <end>
<start> and then just on pause method here and we're going to unregister it right <end>
<start> string reference or a name a tag of some sort and right now i don't know <end>
<start> negative 24 or you know even let's let's go to negative <end>
<start> whatever is in here again we've set up a break to break the switch and i'll <end>
<start> a private text view variable called can write and can read basically <end>
<start> hopefully you guys are kind of understand this data thing a little <end>
<start> just set up our variables such as button make sure it's the exact same as <end>
<start> current temperature and fahrenheit is and then space and then we can just <end>
<start> set up so now what we're gonna do is we're going to go back over to <end>
<start> works scroll down you put an entry like jinny and we're going to set gini <end>
<start> is you type that in the hit dot excuse me and we can do some draw methods <end>
<start> to say key underscore name and value we want so we want the value that's <end>
<start> button that we just set up so we're going to say android layout left oops <end>
<start> equal to which is question we're going to say dot set text and then we're <end>
<start> can just put like one and if we don't want it to affect affect the i <end>
<start> set up so you know pay close attention i wasn't even going to show you in <end>
<start> stream and get how many bytes is available and that's gonna set up a <end>
<start> is beneficial for them like you know if you wanted to add 10 that and add 10 <end>
<start> just going to set them up so we're going to say button and we're going to <end>
<start> gonna draw to our gl 10 object and so it's gonna be pretty simple all <end>
<start> to zero to start out with and semicolon and then we're gonna say as long as i <end>
<start> we're going to do in this tutorial is something really simple basically <end>
<start> just refer to the long class capital l ong dot and then we say to string <end>
<start> and we're going to say again refer to another array so we're going to <end>
<start> shoot down to this tab here so just find a tab like this that says add site <end>
<start> web service or i'm sorry a webview called d and we're going to call this <end>
<start> location see where the phone is and all that stuff and and all that good <end>
<start> down to the bottom and paste it down here pretty much the same concept <end>
<start> intent dot action send and you have some of these other actions that you can <end>
<start> that's not probably the best choice when you guys have a drawer like this <end>
<start> little bit faster in the z direction as well so let's just run it and <end>
<start> address line and we're gonna refer to our variable which we called i and <end>
<start> what we're going to set up is a variable it's going to be a string array <end>
<start> little bit <end>
<start> xml ns ads equals and then we have to put in http colon forward slash <end>
<start> for the most part so let's just get into it the first thing that we're gonna <end>
<start> and then what we can do is we can refer to the alignment class and then hit <end>
<start> the json string called http port slash forward slash api dot <end>
<start> set our text view said our textview variable is called <end>
<start> open basically our entry because we just set up that open method and there we <end>
<start> know the app or the widget that called this class so what we want to return <end>
<start> data results and we're going to say dot set text again kind of a review for <end>
<start> called shared preferences so we just need to set up a little variable for <end>
<start> our emulator looks like when we run our application and again just quickly <end>
<start> draw and we're gonna pass in again the gl 10 object that we're being pass <end>
<start> within the oncreate method of this list activity and this is generally or <end>
<start> something like that now we're just gonna say no to begin with and then you <end>
<start> bitmap and then we're gonna say extras which is basically this bundle <end>
<start> this equal to new geo coder and within the parameters we're gonna say get <end>
<start> just bitmap factory dot decode resources a resource and then get resources <end>
<start> activity for result so we're going to do basically first is set up a new <end>
<start> we're going to say view flipper we're going to call it flippy and what <end>
<start> paths so that's kind of difficult to see but yeah just make sure you know <end>
<start> this basket within our intent so we're going to let hit our intent which <end>
<start> textview that we set up which was called http stuff i believe we're just going <end>
<start> our geo coder that we set up in the last tutorial so we're gonna say geo <end>
<start> remember where all these locations are even to get our our actual key for a <end>
<start> in a context so we're just gonna relate to the context of this class and <end>
<start> parent right so we're going to set up to the right of basically the textview <end>
<start> configuration activity we're just gonna type something hit the button it's <end>
<start> update our canvas so what we're gonna do is say while true for now actually <end>
<start> milliseconds which is equal to five <end>
<start> going to set it up with with an on create method as well so i'm just <end>
<start> say add uses permission and then select the choice for the internet which <end>
<start> gonna call this a wm for app widget manager and we're also gonna create <end>
<start> and there you go you can just display your type now the good thing about <end>
<start> anything so that's what that is the action name we're also going to <end>
<start> you know this if statement and we're going to change that value and so <end>
<start> gonna say oops at plus ford's f plus id ford / webview browser or something <end>
<start> and again all we're doing is setting up an intent of the class that we want <end>
<start> within our on create method set it up to or file name and set up how we want <end>
<start> catch exceptions for file not found and file our input output exception and <end>
<start> this up as whatever so there we go i mean the tag can <end>
<start> data then we're going to say get text again and to string here and now what <end>
<start> the json string called http port slash forward slash api dot <end>
<start> true we want android drawable to equal at drawable and then plus highlight <end>
<start> pressed so what we're going to do is we're going to set up a global <end>
<start> the only other thing we need to do is because we are setting the <end>
<start> on create methods so just go within the brackets of our oncreate and we're <end>
<start> that's being left behind so let's scroll down and here we go basically <end>
<start> load now within here as you can see the blog section is loading in here the <end>
<start> android name is equal to android dot up wit again dot provider and we're <end>
<start> values so we're gonna say x equals y equals sensor x equals sensor y <end>
<start> something called preference activity because we're working with <end>
<start> is when you call the clear command you know sending this message its <end>
<start> our class that's going to be your preferences so we're going to <end>
<start> button so we're going to say button ad and again i hope you guys noticed that <end>
<start> or our on click method for our save is we're going to get our edit text <end>
<start> variables there and now let's set them all up to be equal to zero at <end>
<start> this thread this thread and it's going to use this run method so we're going <end>
<start> so we're just going to say database <end>
<start> our touch event of our overlay to our actual map activity or actual <end>
<start> within it so we're gonna say 1 this is going to basically be from the <end>
<start> seguin set this up to our audio manager class <end>
<start> and then create a click method or set a touch method the problem is again like <end>
<start> back up to this line of code and just continue onward so i mean it's <end>
<start> something a little bit new that you guys need to realize when you make one <end>
<start> we're gonna use a switching case which again we're familiar with we're <end>
<start> to our canvas and say dot draw rec and then it takes a rectangle and a <end>
<start> gonna say address address dot get position zero or location zero and <end>
<start> within the parameter we're going to give it our input stream and we just say <end>
<start> manifest so that's pretty neat we're going to say set orientation <end>
<start> surface holder so tight and we're gonna call <end>
<start> the id which we called aw id again and the views which we called views as <end>
<start> make you cry well that's about about all i wanted to chitchat err about oh <end>
<start> jason and how to parse and all that good stuff so probably catching the <end>
<start> won't be asked so let's go into our data hit <end>
<start> for the most part and you do that by command called set result within <end>
<start> now what we're going to do is we're just going to use the shared preferences <end>
<start> automatically for you but just in case you can click windows or mac os <end>
<start> and this is going to again we have to import the button and i'm also going <end>
<start> we're going to say sb going to set this equal to new string buffer and <end>
<start> and we're going to call this integer array i'm sorry and we've worked <end>
<start> have this draw frame thing so if we move this clear command down into our <end>
<start> well first we want something that's going to happen or be able to be <end>
<start> we want to do is set up our spect and kind of define what we want are <end>
<start> our application i'm just going to kind of get out of here and then run it <end>
<start> first time on the emulator so let's just get into <end>
<start> of that name for that variable for quite some time and what we're also going <end>
<start> going to say spinner equals again spinner and find view by id rg <end>
<start> be checked when it starts or unchecked so we're going to say a default <end>
<start> we're going to say add permission you i'm sorry uses permission one of <end>
<start> set maximum and we could like get like how much bite are you know how much <end>
<start> we're just gonna say a new gl render a renderer x which is what we're <end>
<start> and make sure everything works here so we got this coming up and then <end>
<start> we're actually going to change this one we're going to say at <end>
<start> hover over a class ad unimplemented methods and we have two new <end>
<start> we can either set this to true or false so we're going to say true and <end>
<start> that bundle so we're going to say oh actually we need to set up the <end>
<start> gl lower case like that sorry and then we're just gonna say vertex <end>
<start> thing we need to do is set the content view of this but you guys probably <end>
<start> basically when you know this activity starts going to do the on create <end>
<start> than one button so i'm just gonna copy this whole chunk of code here for <end>
<start> dot xml and we have to choose which kind of prep or which kind of resource <end>
<start> obviously since this is an int but let's just take a look at it i pulled this <end>
<start> layout that we set up so we're just going to go browse and then it's <end>
<start> something i like to do so i know it's a button so b sub for b subtract and <end>
<start> to b 0 now what we can do is instead of having this 0 here we can put in <end>
<start> going to say contacts dot power service now that's basically just getting <end>
<start> there and again what we're gonna do here is say our surface view equals <end>
<start> to do is we have to add a permission to our manifest so we can write to <end>
<start> test this make sure it works so we're going to go back over to our <end>
<start> to skip out one of these things basically you use use the stride to <end>
<start> we're going to say whoops display which is again a textview type variable <end>
<start> but it's referring to it as an int and it's just kind of a reference that <end>
<start> takes in an on click listener within its parameters so we're going to set that <end>
<start> back up to this line of code and just continue onward so i mean it's <end>
<start> xml stuff so we're just gonna set up a variable handling xml stuff we're <end>
<start> that that's basically the setup for the xml and then we're going to get into <end>
<start> select that one and what you can do is set up like 45 pixels and it's a <end>
<start> layout and and i messed this up all but you guys should have fill <end>
<start> variables to be int so we're gonna say and lat is equal to 0 to start out <end>
<start> does that through grabbing the event and getting the value for the x and then <end>
<start> blue and let's see how that looks so i'm just gonna save this and run this <end>
<start> true we want android drawable to equal at drawable and then plus highlight <end>
<start> surface we can say our surface view dot and we now have these methods that <end>
<start> if we have this catch exception we're going to set equal to false so did <end>
<start> we're going to say return you know or json dot get string and <end>
<start> which we call data results and then dot set text and then we're gonna set it <end>
<start> is by the environment we're gonna get some stuff from the environment <end>
<start> the button and we're going to say add one so let's see how that looks and <end>
<start> basically all we're going to do right here is this example the most part <end>
<start> first so we're going to reference our variable that we set up email intent <end>
<start> is equal to again notification manager and we're just gonna say get <end>
<start> gonna happen okay layout weight equals let's say like <end>
<start> but anyways so that's basically the <end>
<start> you guys will want to use what i use for this image i believe was 400 by 600 <end>
<start> we do need to have our weather xml parsing class within the manifest <end>
<start> that we set up so we're going to say crazy dot next int and then we're <end>
<start> hear and see we again we can just you know mess with the music so <end>
<start> calling cube squares and triangles cubes and all that stuff all right it <end>
<start> to say catch like an exception ii and then we're <end>
<start> in there and we're going to relate to our point index list and then all <end>
<start> say set text to result again that's what's being returned from our <end>
<start> string then we're just going to call this like string data something <end>
<start> gonna call this be buff gonna set this equal to the byte buffer class and <end>
<start> file then we just got to import both our file output stream and a file or and <end>
<start> emulator that's going to be able to run google maps i have on setup <end>
<start> activity and we're pretty much good to go again it won't work if you have <end>
<start> gl 10 class again and just say gl underscore float and the stride <end>
<start> want to do is we're going to go into our actual animation and so what we're <end>
<start> reference so for example we can set up a new string by clicking add a string <end>
<start> and this is what these will be the entries within the list and we're <end>
<start> visibility of our button in this tutorial anyway so what we're gonna <end>
<start> widget config and that's gonna basically widget config and that's gonna <end>
<start> you import tab host then we say tab host like this as well find view by d <end>
<start> i just want to make sure we have everything defined before we get into <end>
<start> listeners - both are save and/or <end>
<start> show you guys how to use this we're going to throw this in between <end>
<start> pretty basic here and then just that deep <end>
<start> yeah we're working with triangles so that's good and we're also inputting <end>
<start> android name is equal to android dot up wit again dot provider and we're <end>
<start> have some trouble setting that up for the most part i've gotten <end>
<start> and another method we can call is to get that progress again we have an <end>
<start> view within your actual class then you just hit import view delete this <end>
<start> but we're gonna move it later so if we start our application we see the <end>
<start> now i'm going to say from a password it's travis again travis and validity <end>
<start> we're going to say the website something we're going to say the website <end>
<start> new boston and i'm just going to say key store hit enter and then we have to <end>
<start> klaus so we can easily just hover over the air and say surround with try <end>
<start> within the manifest now we have our intent set up we're going to just <end>
<start> because as i'll show you real quick with our emulator and again you guys you <end>
<start> just need this cv update for our attractiveness or hotness so again <end>
<start> one is going to be called action send it's going to deliver some data <end>
<start> name is equal to and then dot pointless class or pointless widget and we also <end>
<start> then we also have to add our state as well so that's s again those are <end>
<start> android layout height but you know android layout height but you <end>
<start> errors and what was that called <end>
<start> both classes that we have set up so going to set up a bitmap variable <end>
<start> but before we get into that i want to just briefly talk about the <end>
<start> we just hit upload pretty simple stuff i mean it's a pretty easy walkthrough <end>
<start> ten dot geo underscore per spekt spective correction hint and then <end>
<start> down more as we use this method but basically we've set this method up <end>
<start> well but anyways let's check out our app activity make sure it <end>
<start> two buttons and a textview nothing <end>
<start> your main screen and it pulls this up here and we can pick like <end>
<start> ad request we're just going to create a new one we're just going to say new <end>
<start> password so that's going to change it to basically back to the stars and i <end>
<start> forward slash capital t then theme dot capital dialogue or just dialogue with <end>
<start> and again it takes a size so the size is going to be how many dimensions <end>
<start> so we're going to say results underscore okay all cap locks and that's <end>
<start> state and all we're also going to do is give us a couple lines here i'm <end>
<start> this to like camera application or something like that if you want and <end>
<start> going to create that file name above our classes right here with our edit text <end>
<start> this in the past but we do that within the androidmanifest so again we open <end>
<start> minimum time we'll give it like half a second and for the minimum <end>
<start> have to set buttons text so we're gonna say place a pinpoint and then we need <end>
<start> see i don't know white i believe is the default not positive so there we <end>
<start> overlay that we're pressing down it's gonna create a start starting <end>
<start> then we pass into the contour pass into the parameters the context which is <end>
<start> to open it and then we can also do fos closed and we would write within <end>
<start> this activity whichever activity has this layout <end>
<start> people have trouble with sql stuff but what we need to do is create a like <end>
<start> you know it's pretty good method even for like games and stuff like that <end>
<start> dot set button go figure right then we have to set buttons text so we're <end>
<start> clock if i believe we did something like this with our stopwatch application <end>
<start> do something new every time as you can see that looks pretty good the <end>
<start> and order how it's going to read it and which methods are going to get <end>
<start> buff and tell what position we want to <end>
<start> here so we're going to say <end>
<start> now that's telling you guys about now the first thing we need to do in <end>
<start> this equal to new custom pin point and we're gonna pass in that d <end>
<start> which our shared preferences and we're <end>
<start> android xml file just like always and we're going to call this <end>
<start> and since we set up our typeface in our constructor we're gonna put font <end>
<start> might change this that to dang it and we just finish off that <end>
<start> sliding drawer and and we got to import that and then <end>
<start> implemented the onclicklistener so that's going to add the on click <end>
<start> then we switch over in the landscape mode some of those buttons would run <end>
<start> again this is a way that the computer or <end>
<start> having cats everywhere but i decided against that so if you guys think i <end>
<start> to do that quickly fos dot close and there we <end>
<start> to change the label the button results and we're going to change the text for <end>
<start> is when we hit that startactivityforresult button in <end>
<start> buttons is a little bit messed up but we're just gonna we're just gonna <end>
<start> reference could equal the value i mean the string value of 1 we have to <end>
<start> use i didn't really explain but that's gonna be like our main context and <end>
<start> to this folder called android that's now located there now you're welcome <end>
<start> shared string and the second parameter basically <end>
<start> set up a new variable which will be a variable that we're going to define in <end>
<start> maximum value of our seat bar if you guys aren't using you know the <end>
<start> we're going to do is we're going to refer to our triangle and just say <end>
<start> source override implement methods and we're just going to look for on <end>
<start> but takes a bundle within its parameters click ok and we have our activity <end>
<start> the most part then we're gonna hit break because then we're done and now all <end>
<start> we're going to right click on our drawable and go to new android xml <end>
<start> dot get x you can kind of review here and then also our starting y and <end>
<start> as you can see the brackets already getting kind of confusing so i'm <end>
<start> and again mine is just within and documents and then android apps here <end>
<start> id forward slash whatever id of that button was so that was a id bsa so id <end>
<start> enable and we're just gonna refer to the gl 10 class dot gl underscore col <end>
<start> reference of tv http something like that hit save we also might want to put <end>
<start> button password reference and the last thing we have to setup well two <end>
<start> to whatever that's not going to work to compare strings again we just have <end>
<start> get status line dot get status code and that's going to return a number for <end>
<start> we're going to use a method when deletes displays a toast for the most part <end>
<start> event and we're going to call that e and a map view which we're going to <end>
<start> do is we're just going to refer to this as drawable m4 marker and also a <end>
<start> music because basically we're creating path is that we can save something <end>
<start> we've done because pretty much our get hotness that's going to be the <end>
<start> neat pretty cool all that good stuff but let's say we want to enable a <end>
<start> kota for and the next tutorial will kind of setup it what we're gonna do <end>
<start> text to be here and so we're going to say like something like what's what's <end>
<start> date button what we're going to do is we're going to just set up two <end>
<start> variables to be int so we're gonna say and lat is equal to 0 to start out <end>
<start> call it start so we're going to say start is equal to and then we're <end>
<start> within the debugger so that's what that catch is doing so hopefully that kind <end>
<start> what's up guys welcome to your 198 android tutorial and yeah i just <end>
<start> as well so gl gl disabled and again the gl 10 class dot gl coalface so there <end>
<start> text and we're gonna set this equal to whatever so this is a message <end>
<start> a great speech so we're just going to say text to speech dot cue whoops ah <end>
<start> on it if you guys actually want to build a voice recognition software you <end>
<start> we're gonna refer to our xml reader now we're just gonna say dot set <end>
<start> returning let's just get down to the second parameter so let's just get <end>
<start> onclicklistener because it's i mean it's kind of a good review because we've <end>
<start> sensor event listener and that's gonna be basically our sensor of <end>
<start> preferences are that's why i set it up too so we're just going to <end>
<start> that we set up in the last tutorial we're gonna create a list that holds <end>
<start> variable pass hog which is our toggle button so pass tog and we can hit <end>
<start> relative layout to have an id as well so we're just going to say android <end>
<start> can go into our marketplace and say upload apk and choose it and we <end>
<start> this and then our map or a map view i should say which we call the map <end>
<start> client and we're going to say this client is again just keep things kind <end>
<start> know we can pick a color from here so let's do like <end>
<start> most part but this time what we have been doing is extending activity but <end>
<start> what's up guys welcome to your 95th android tutorial for the new boss <end>
<start> forward slash details question mark id equals and then greater than sign <end>
<start> if expression mark or exclamation mark can't i'm sorry x exclamation <end>
<start> this clear command and how we do that is again i don't know what that symbol <end>
<start> we go to our view database samantha is no longer there and as you can see <end>
<start> call this err we're gonna set this equal to e dot to string and then we can <end>
<start> that and then go into your data class right here and we're going to do <end>
<start> the user name so we're just going to say my bring back and that's going to <end>
<start> we want to set up our class and don't worry we'd only create a new xml <end>
<start> we're just going to copy that and paste it below as well and just you know <end>
<start> to that xml layout that i just showed you set up our references again <end>
<start> we want this to be a variable that we can use throughout our whole class <end>
<start> so there we go basically as you can see here's <end>
<start> tutorial and we're just going to set up this create entry method so the <end>
<start> function within our map so we're just going to set that up real <end>
<start> or in portrait mode so there we go let's just test it out real quick <end>
<start> point so we're gonna say touch point and then we're also gonna add some you <end>
<start> something like that and import bitmap and then again from the bitmap factory <end>
<start> arraylist and we're just gonna refer to the default and it's been a while <end>
<start> going to call this returned picture because once sorry our camera <end>
<start> to our sqlite example xml and just all the references and all that good <end>
<start> new http get and then we're going to refer to our url lowercase dot - <end>
<start> layout here of what it looks like and oh layout here of what it looks like and <end>
<start> so we're just going to set that up real quick and catch and then exception e <end>
<start> and then all we need to do is basically set up what what information we want <end>
<start> and that would be clockwise in this direction but we want to look at it <end>
<start> and then what we're gonna do is we're gonna go down here within our on <end>
<start> upload application pretty simple we got to choose the apk so we're going <end>
<start> activity for results it's going to open it up we're going to say super sexy <end>
<start> quickly again i had the emulator pulled quickly again i had the emulator <end>
<start> short and then we're just gonna say dot show so we don't even setup <end>
<start> lastly case two and again a break statement now basically it's going <end>
<start> different objects json objects and we have different indexes and basically <end>
<start> but a little bit and that's where we're gonna we're gonna create a dialog <end>
<start> that through the window manager which again is a class manager dot <end>
<start> we set up called email address and then end our statement let's put some <end>
<start> that's because we have the sd or this cable plugged in usb so we're just <end>
<start> method a method so you guys have to use this method add preferences <end>
<start> here again the content referring to our our linear layout so we're going to <end>
<start> space degrees actually so i just thought i'd show you guys this before we get <end>
<start> doesn't get boring what we're going to do is we're going to add some edit <end>
<start> too new in this tutorial as you can see the image view is new i guess we <end>
<start> for the most part because that's what we set up here so now what we're gonna <end>
<start> we're gonna go to extras and then we're gonna go to the google tab or the <end>
<start> here which is again adds those references from our xml file and then <end>
<start> actual phone so how we can do that is we're going to say get application <end>
<start> use our geo or touch touch point with in some of these other methods and <end>
<start> setting this text paint to be let's make this text paint what else <end>
<start> we're basically going to set up this location manner manager to get the <end>
<start> and another method we can call is to get that progress again we have an <end>
<start> tab after you're done developing that but keep those open for the next <end>
<start> one again going clockwise so 3 comma 0 comma 1 and then we're <end>
<start> we're also going to set up our listview to you know have that reference <end>
<start> the color and we set the depth and we have to you call the clear command <end>
<start> check state something like that and it's gonna say hey i don't know <end>
<start> we're gonna scroll up to or you know my bring back class here and in the <end>
<start> for for the most part right now because it'll be easy reference for you guys <end>
<start> we're going to do what's ever within these brackets and then we just have <end>
<start> vertices and then all we're going to do is we're going to relate to our <end>
<start> just going to put our bitmap in there called bmp and finish your statement <end>
<start> gonna cut that and kind of define it right here within our if statement <end>
<start> database so we're just going to say db dot execute sql again and we're going <end>
<start> reference so let's open up our preference xml here and as for our <end>
<start> going to add to it so it's going to get bigger and bigger until it gets to <end>
<start> as well so gl gl disabled and again the gl 10 class dot gl coalface so there <end>
<start> you know setting our text here which we could still do we're just going to <end>
<start> call this hot or not db something like <end>
<start> some other stuff we can say android and then for example numeric shortcut <end>
<start> and then we're going to go back to our and click method because after <end>
<start> paste again first a row which converts into a long from our get information <end>
<start> otherwise it's going to crash but again right here and our on create method <end>
<start> so we can you know so we can get paid and they can keep track of the user <end>
<start> now what we want to do is basically reference this radio group if <end>
<start> really get any feedback because bucky wants like 200 tutorials so i can't <end>
<start> class which created this class for me as you can see the most important thing <end>
<start> phillippe's start flipping dang it alright so that's another kind of <end>
<start> that other all i got other great stuff so let's create a new class real <end>
<start> our h o n or hot or not object dot get name and we're gonna create this <end>
<start> view which we call show result and we're going to say dot we're show results <end>
<start> method we're gonna set up an edit text to get basically the text again <end>
<start> really need to define right now is the android orientation we're going to <end>
<start> remote view but still within our for loop and we're gonna set up a new <end>
<start> the new boston alias and make sure i spell right there and then again just <end>
<start> this save file two buttons confirm and <end>
<start> dot open then what we want to do is we want to create a string so we're <end>
<start> we're using how many kilobytes or bytes that we're using and for each float <end>
<start> series promise guys and we're going to refer to the class bitmap factory <end>
<start> resource folder but just in case you guys forgot we're going to say <end>
<start> to open so we're gonna open the splash activity or the splash class or again <end>
<start> going to refer something to something from within the gravity class so <end>
<start> something and if that's not the case if it's bigger than the canvas and <end>
<start> write to the external storage another thing we can do is that we want to do <end>
<start> corner of the emulator and then it's gonna go over to the width that <end>
<start> extra results basically so it's just the results and there we go we <end>
<start> out the variable name again within our on create bracket so it'll be the <end>
<start> also call that list as well we're gonna set up summary this is a list to <end>
<start> the class and hit dot and we're going to say get extras because we added <end>
<start> holder is and thread and all that good stuff which will explain even more as <end>
<start> gonna set up our bitmap this kind of review we're gonna call this like <end>
<start> so how we do that is we're gonna say gl gl frustum f as in float and what <end>
<start> have to refer to this new jar for the most part so we can use the google <end>
<start> kind of learning thing to do as homework for the most part if you don't want <end>
<start> this tea and all we're gonna do is set our <end>
<start> here so we're going to say flippy and one of the things that we can do is <end>
<start> android dot a p-- widget dot action dot an all uppercase app widget <end>
<start> integer because it's going to be row 1 row 2 row 3 etc and what we also want <end>
<start> android dot a p-- widget dot action dot an all uppercase app widget <end>
<start> basically this is landscape mode and this is portrait mode which is going <end>
<start> resource folder but just in case you guys forgot we're going to say <end>
<start> sorry if that's confusing we're going to say sup a new string variable call it <end>
<start> just going to be equal to sp and all we're gonna do is we're going to <end>
<start> alias maps key store hit enter and then we need to create a password that <end>
<start> touch listener so we're gonna say implements on touch listener just <end>
<start> going to use a click listener on click listener because again we have <end>
<start> basically this on draw is going to be looping so we can say changing <end>
<start> we're just gonna create a gl capital g capital l surface <end>
<start> prompt on mac you guys want to go to your terminal which i believe is <end>
<start> gonna do is bound the center of the drawable item so we're gonna pin <end>
<start> and say current v and we're going to set this equal to again our audio <end>
<start> and there we go now we have a url called website what we need to do to parse <end>
<start> sure it works but yeah that's all this tutorial is basically the xml file <end>
<start> doing i don't even understand this i'm sorry guys but you will in time trust <end>
<start> scroll all the way up to the top and create a file we're gonna call this <end>
<start> relative layout to have an id as well so we're just going to say android <end>
<start> the sound idea we're gonna say explosion right volume we're gonna say 1 which <end>
<start> to set the gravity to left so again it's just gravity dot left and then we <end>
<start> we're just gonna create another method called public and it's gonna be void <end>
<start> title to hekia and there we go and then we also need <end>
<start> name so again we set up a static file name that's never going to change <end>
<start> android xml file or you can go to other android and then android xml file <end>
<start> some of these some of these things up and that's what we pretty much use <end>
<start> you know this if statement and we're going to change that value and so <end>
<start> into the menu for folder and our resources and then cool menu and <end>
<start> we're going to set it to success and then what we're going to do is <end>
<start> it out of this onclicklistener in those part and now it's going to <end>
<start> little bit longer by just adding a thread sleep method to like 1,000 or <end>
<start> and over until you know it's read through the whole document and then <end>
<start> relate to the gl object being passed and again and we're just gonna say gl <end>
<start> with so we're gonna say r dot layout dot widget and again that's what we set <end>
<start> all we're going to do is have this button open up the voice <end>
<start> canvas i should say when it's unlocked so again this kind of a quick review <end>
<start> is just type out our variable name which was display and we're going to hit <end>
<start> we're just gonna say a new gl render a renderer x which is what we're <end>
<start> let's see what options we have i believe it's visible and invisible so we're <end>
<start> to add a final to our display object when we when we started <end>
<start> layout that we set up so we're just going to go browse and then it's <end>
<start> new boss in and just want to say congratulations for getting it <end>
<start> referring to our body so we're gonna say body and lastly our pending intent <end>
<start> we're going to try and set up some stuff if it didn't it's not going to set <end>
<start> name right there and then semicolon there now it's going to return this <end>
<start> factory that's going to allow us to build our own little application our <end>
<start> bossin or what if you guys want to label this again if you don't have to <end>
<start> scroll down to one or again it's not in the list list activity it's under <end>
<start> method i don't know i'm just weird like that even basically basically <end>
<start> of those string variables to our class name camera and also set it up in <end>
<start> we're just going to print and we're good else we can just make it text <end>
<start> people have trouble with sql stuff but what we need to do is create a like <end>
<start> going to delete our button actually no we won't we'll leave it i'm <end>
<start> class so and again we did that through setting up a class variable instead <end>
<start> and make sure it has the layout tab it should and we're good to go we're <end>
<start> going to call this returned picture because once sorry our camera <end>
<start> basically this holds a ton of different projects or packages i'm sorry <end>
<start> with a linear layout within this one so what we need to do or what we're <end>
<start> to say load url the same method and then we're going to say url as well <end>
<start> that and then what we're going to do is we're also going to kind of <end>
<start> last thing we have to we have to go into the manifest and <end>
<start> we do that i just wanted to open up our text xml real quickly and make sure <end>
<start> to start over but our changing y variable will now be 10 which will <end>
<start> equal to which is question we're going to say dot set text and then we're <end>
<start> message we're gonna set this equal to i told you pick an option man so <end>
<start> relative layout to have an id as well so we're just going to say android <end>
<start> we're just going to say final static string and we're just going to call <end>
<start> sdk android knows me pretty well but so yeah that's what a theme is <end>
<start> we're just gonna say p index dot length times that by two for two bytes <end>
<start> but again again just kind of clarify think of this some data or <end>
<start> shared prefs so this is just the xml file here where we have edit text a <end>
<start> time line and we're going to set this equal to a new json array passing in <end>
<start> most part but we're going to work within this where's the fridge <end>
<start> and then just start whatever we want to save so our drawable dot let's say <end>
<start> set up our button as well so button b set that equal <end>
<start> to catch and for this instance we're going to say intercept earth i'm <end>
<start> that and again we just use our edit text which we called shared data dot get <end>
<start> folder now we're just going to save it and check it out looks pretty <end>
<start> mess around with and we can use basically a code called android <end>
<start> going to set content view to our next xml layout that we're going to <end>
<start> alert dot set button hit enter format it for you guys and we're gonna change <end>
<start> in and what we're going to do in this tutorials basically we're gonna draw <end>
<start> to add our imports and add our unimplemented methods for click <end>
<start> these as well so just do that and read through those again because it's <end>
<start> actual view which is going to hold our animation or or whatever we're going <end>
<start> we're gonna say input stream and we're going to say i is for input <end>
<start> instead of our test we're gonna do our plus bitmap that we set up at <end>
<start> kind of the different attributes or parameters that it takes within <end>
<start> exception and we'll call it e and then what we're going to do is <end>
<start> want to say 300 or 320 by 100 and this is dp or both and then lastly we want <end>
<start> hopefully you guys see how that all our second button really doesn't <end>
<start> super line right here so i'm sorry for that but okay there's our <end>
<start> and we're going to let it implement a location listener so we're gonna <end>
<start> want to have it start up a class according to the items that's <end>
<start> answer or something like that and also our value which is our set data there <end>
<start> to do is just say over we have to say we have to say overlay list and then we <end>
<start> called set up variables so we're just going to set it up within that <end>
<start> application launches so we're gonna call this starting point like that one <end>
<start> relate to that and we're just gonna say get the package name and that's <end>
<start> the user of our application so we're just going to say extra and <end>
<start> to our source folder and right-click and go to new <end>
<start> result but for this tutorial we're just going to set up the xml layout so i <end>
<start> an overlay item we're just gonna call this item <end>
<start> regular activity that you guys might be familiar with should be hopefully <end>
<start> to say t for text tv results that looks pretty good maybe maybe we should do <end>
<start> is getting confident and you guys can kind of look through these methods <end>
<start> our content view to was it r dot layout <end>
<start> well and for this last textview as well <end>
<start> be equal to list again our preference tab is accessing the array called <end>
<start> the next tutorial we're probably going to finish this this little activity <end>
<start> title or status bar so that's we're gonna set up here for whole class to <end>
<start> start activity i which is the intent we just set up nothing new so you guys <end>
<start> this class gets accessed so we're gonna set that up and actually i don't <end>
<start> map view to be either satellite or street view which is gonna be <end>
<start> before well can't spell and then we're going <end>
<start> just going to kind of separate those two so we have some working room and <end>
<start> just finish it because the other problems pretty simple as well so <end>
<start> output stream exception and now what we're gonna do is we're going to <end>
<start> this so we're going to just add a name so android adt and again you guys <end>
<start> access that to save certain data or certain strings or boolean or <end>
<start> argument the second d it's going to look for the second argument and the third <end>
<start> and then close it for the most part so we created this file output stream <end>
<start> boolean statement we have to return true or false so we're just going to <end>
<start> through our map activity so what we need to do is we need to set up a <end>
<start> you guys are adding admob to and we're gonna go down to properties once we <end>
<start> and what we're gonna do is we're going to just call this widget yeah <end>
<start> gonna create allert dialogue which we kind of talked about but we're gonna <end>
<start> one more idea that we have to worry about sorry but there is something <end>
<start> i had an age in there i'm gonna probably delete that and then to book two <end>
<start> entity again nothing to new there we're also going to set up a string <end>
<start> because we're looking for a string as well and then let's check out what <end>
<start> dot set step onclicklistener we're going to say set adapter and we're going <end>
<start> just hit comma do and then do a on checked <end>
<start> what's going on all right and so basically that's why i wanted to <end>
<start> we're gonna call this columns and we're gonna say new string array and <end>
<start> select that one and what you can do is set up like 45 pixels and it's a <end>
<start> i mean we've covered a lot of the concepts already but you might want <end>
<start> you guys are looking at these gl cube maybe since we're gonna create a 3d <end>
<start> project i'll catch you guys in the next tutorial or we'll start getting <end>
<start> android sdk avd manager click on our device and hit start and probably <end>
<start> the second parameter is going to be a string called url and this r we're <end>
<start> catch klaus going to click that and now it's going to catch if a file has <end>
<start> so we're gonna say private sql light database and our database so we set <end>
<start> just run our application and make sure everything works again for the most <end>
<start> unregister it so it's not always plain so i'm just gonna go to source <end>
<start> gonna call it pointless widget because it's pretty much pointless thoughts <end>
<start> on pause right there and then we're just going to say wl dot release and as <end>
<start> a random number and now we can set up a case so we're going to say case <end>
<start> information of this string to that class so we're gonna say info dot set city <end>
<start> the properties we get something like this we're gonna go to java build <end>
<start> to implemented it that's cool but we're just going to say new <end>
<start> parameters so we're going to click that and then type or bundle which is <end>
<start> floats for float variable variables sx for starting x point sy for starting <end>
<start> and then it's going to say is that okay or is that ok are you guys done <end>
<start> going to define our intent up above our classes so we can use it in <end>
<start> comm dot google dot ads dot ad view like that and we <end>
<start> again this is a way that the computer or <end>
<start> and quotations again equals and then whatever is being passed in which <end>
<start> string so you're going to click that and here we go we have our update <end>
<start> buff so there we go now we can't have reference to again our vert buffer <end>
<start> going to divide it by a 1 e to the 6th like that and then we're also going <end>
<start> here and it's just going to be you know something like i don't know <end>
<start> also what's going on there we're also gonna give it an id so <end>
<start> within our open class or open class and also our our data classes well kind <end>
<start> try and help you guys out as best i can and you know because i don't i <end>
<start> that's done we need to still close our dialog box so it's going to be you <end>
<start> what we're going to say is if did it work which is basically and say if <end>
<start> going to create through this last tweet method well this json object is going <end>
<start> we're going to just say kind of get the basket so we're going to say <end>
<start> basically all we're going to do right here is this example the most part <end>
<start> our layout and we're going to label this splash and you also have to put dot <end>
<start> working with and then lastly we need to set up our buffer which we call p <end>
<start> and if we refer to the value 0 that's going to give us the pretty much the <end>
<start> equal 1 and we compare that string value to the string value of 1 right here <end>
<start> for paint we're just gonna say null so that's basically gonna somewhat <end>
<start> as we we're just also going to open our starting point class as a reference <end>
<start> going to set this equal to textview and text view results so there we go <end>
<start> and y values within this class and we and you know we said that this <end>
<start> widget which is the one i created just to get reference and then it <end>
<start> it's gonna try and readjust our screen and it's not going to like that <end>
<start> just create a variable we're gonna say while is running and then we have <end>
<start> about and we got to import that we're just going to call this cb for <end>
<start> shouldn't be a big deal basically what's happening is we are drawing we want <end>
<start> android title checkbox and android and we can set this checkbox if we want <end>
<start> little comment here that says full screen and then you guys can kind <end>
<start> array ford slash values or something like <end>
<start> going to set equal to after we import we're going to set it equal to <end>
<start> works scroll down you put an entry like jinny and we're going to set gini <end>
<start> something like that and we're just gonna issue set this equal to be 0 just <end>
<start> int and again our location dot get longitude so that's just going to <end>
<start> listener and then we just say this because again we're implementing <end>
<start> put two here and then we're gonna say get information as you can see it <end>
<start> right-click you know right click in that free space go to android project <end>
<start> crit and enabled only to false and as you guys can see if we hover <end>
<start> so we're going to just save fos dot i'm sorry fos equals open file <end>
<start> with the pixels and this is going to be <end>
<start> parameters hit ok and there we go we have our <end>
<start> within our within our try here so what we're going to do we've we've done <end>
<start> code in here obviously but again just to make note you guys want to enable <end>
<start> method which is basically that string and all the other good stuff just <end>
<start> a class so we're gonna say private final context our context or our <end>
<start> method what we're going to do is say remove updates so we're just going <end>
<start> that's what that does and we're going to call this our input manage <end>
<start> going to basically put the index so index row for the most part and <end>
<start> the data all that good stuff so what we're going to do is we're going to <end>
<start> something like that then we also need to say android id <end>
<start> give us what basically which list view was clicked it's going to label that <end>
<start> for the most part now what we need to do is we need to kind of reference this <end>
<start> to call this one preferences and then for the id we're going to <end>
<start> for application now the only other thing we need to do is add a reference <end>
<start> reference here and then set up your ad within there have the same id as well <end>
<start> let's see the date and time thing we're going to add analog clock right <end>
<start> data so we're going to say data dot this comma and then we're going to say <end>
<start> to do is we're going to name it so we're going to say name and this is going <end>
<start> surface class so just get that set up and we're good to <end>
<start> just show you a quick example of what this can do so what we're gonna do <end>
<start> just gonna use input stream and output stream so we're gonna do is create <end>
<start> whatever let me pull this over can you go into finder documents android <end>
<start> space and then again just cursor dot get string and we're going to say this <end>
<start> imports and you know also for this class we're going to need a <end>
<start> anything within a renderer class so yeah a renderer class should be fine we <end>
<start> which is called e and we're just gonna say dot will set up a string and <end>
<start> drawable in the context then we're passing our drawable into <end>
<start> followed along exactly like me and jumped off the same bridge well <end>
<start> going to set this equal to you know our method that we <end>
<start> which again is our drawable item that's being passed in and then what we <end>
<start> do is in after we add our imports we're going to set up our audio manager <end>
<start> that is create method and then we're just gonna copy all this stuff here <end>
<start> files pretty simple i saved a few on my <end>
<start> pin point you can think of it as and handle it within that class so <end>
<start> title list set up a key reference we're going <end>
<start> here we're gonna say key row id comma key name id or key name and key <end>
<start> we're going to do is we're going to say new tab host instead of saying like <end>
<start> we want the bottom so we're gonna go we're gonna go five six one and if <end>
<start> accelerometer so let's you know go into activity import that and our sensor <end>
<start> the most part here but we're just setting up the setting up all the <end>
<start> then our song and don't define it or anything just set up the variable <end>
<start> and then we're going to say our result divided by 60 wait no divided by <end>
<start> won't be asked so let's go into our data hit <end>
<start> of this series where you guys would look at something like this and be like <end>
<start> with ends parameters hit ok and it kind of sets it up for us as <end>
<start> to kind of use a ratio by using the density pixels so this is going to <end>
<start> go so now let's go down to our accelerate class i just want to <end>
<start> entity and there we go we've set up our bufferedreader and again we just <end>
<start> return collected and again collected was that <end>
<start> going to do graphics and we're going to say extends activity just as always <end>
<start> we're getting passed in so what we're gonna do is we're gonna say <end>
<start> to get it to 50 percent of the whole available width so they're there <end>
<start> set up a string variable we can again do private if you want string and <end>
<start> by right-clicking within the brackets going down to the source and then <end>
<start> you can see when we draw our bitmap test we're just going to change this to <end>
<start> called on click so again we're just called on click so again we're <end>
<start> that we're extending and we can use all these methods from within that <end>
<start> from and then we're also going to set up something else called android <end>
<start> all we have to do is type key store or key tool i'm sorry - list space - <end>
<start> good review here async task and then we want a string reference anta juror <end>
<start> right there but we're going to call this array because again it's <end>
<start> the same concept we had you know something like this instead of a <end>
<start> going to do is just add that reference as always <end>
<start> standard activities for both of these and import it actually i probably <end>
<start> sleep so let's get into it as you can see this type of data is called <end>
<start> this equal to or attributes that's being passed on orders and copy that and <end>
<start> to add our imports and add our unimplemented methods for click <end>
<start> array and we're going to call this text and then we just set up what we want <end>
<start> it go a little bit lower on the campus until it gets to the point that <end>
<start> android layout height is going to wrap the content the only other thing <end>
<start> is we're gonna say our save button dot set visibility and and what we want <end>
<start> it some data so we need to change a variable down here - travis love bacon <end>
<start> to know how to set it up so let's go into our on create method we're <end>
<start> set wallpaper i believe it is something like that but yes set wallpaper <end>
<start> you know our state where we can read and write and can w equals false here <end>
<start> for the cursor and the version since we have our database we set up that <end>
<start> those are the two things that we're gonna use with this tutorial so <end>
<start> go in this direction so seven six four something like that and then let's <end>
<start> stay tuned for that but two buttons and an edit text and let's go into the <end>
<start> man shared preferences it's gonna be the same layout same kind of stuff that <end>
<start> going to set this to result and we're just going to initially set it <end>
<start> our textview so it needs to be a string we're just gonna say data to <end>
<start> about it so you guys understand it a little bit more thoroughly instead of <end>
<start> know there we go there we go now our lurtz gonna show up it's basically <end>
<start> then what we're gonna do is we're gonna use our handle which we called <end>
<start> determine whether is the set wallpaper button or again the take the <end>
<start> going to tell our program that everything is okay and then we're <end>
<start> button that gets pressed often and you guys want to update your ad or <end>
<start> random object called our set this equal the new random and then we're all <end>
<start> comment out those within the on create method and then we're going to go <end>
<start> browser our brow something like that and again we're just gonna say find <end>
<start> where we set up our our first bitmap called test let's actually cut that <end>
<start> button but basically it's not a button because when we click it we can <end>
<start> to do is we're going to create a new java class you guys probably <end>
<start> going to do in this tutorial we aren't actually going to work with the data <end>
<start> we're just gonna print a new line so you print a new line again just backslash <end>
<start> you do want to allow it to rotate and you just want to switch up the <end>
<start> get we're going to call this our request we're going to do we're going to <end>
<start> and we're gonna use a method called update app widget and the first <end>
<start> saying hiding the keyboard after using an edit text so again if you're <end>
<start> this my bring back and again class name should be uppercase so we're going to <end>
<start> tutorial in series and what we're going to do is we're going to update <end>
<start> refer to a class called glu and we're just gonna say dot glu glu look at <end>
<start> and we want this holder to be accessible to our whole class so we're gonna <end>
<start> selected our selection list which is again a radio group we're gonna hit <end>
<start> see alright so we're going to try and take a picture and it opens up <end>
<start> us is pressed then we're going to do it the old-school way the first way <end>
<start> change you know our is running it true so not too big of a deal there but <end>
<start> going to say set up another add view and we're going to call this ad as well <end>
<start> go in this direction so seven six four something like that and then let's <end>
<start> this triangle or we'll get into 3d programming with the square of some <end>
<start> going to say get instance of a context and again the context that <end>
<start> i'm not going to the other thing we want to do is do our splash and our <end>
<start> so we're going to say a default value which is what it's going to start as <end>
<start> we're gonna do is convert that's that into a string because again our <end>
<start> to set it as final no law anymore so we're just going to delete the <end>
<start> returning let's just get down to the second parameter so let's just get <end>
<start> and we also want you know map dot set street view to be true and <end>
<start> change this one to like maybe 20 dp see how that looks looks pretty good and <end>
<start> that we're having is basically we're redefining it here and it's <end>
<start> first thing we need to do is say request window feature and then we hit <end>
<start> say at drawable let's just do it this way hit equals and then at <end>
<start> the video but i this was see just change it to context so it's a little bit <end>
<start> going to go shared preferences dot and then you can see some of the things <end>
<start> to say t for text tv results that looks pretty good maybe maybe we should do <end>
<start> webview and we're going to say dot load url and then we're just going to <end>
<start> if statement when they release so we're gonna say <end>
<start> for the most part and then we're going to say we're going to set up a <end>
<start> that row for the most part and we're going to get the string data of <end>
<start> gonna say new input source and we're gonna refer to our website or url <end>
<start> content view to this xml layout here i just want to show you guys if we run <end>
<start> role i guess it's not again but we're just <end>
<start> have to change that to make the connection you know with our specific <end>
<start> get address in place pinpoint what did i do here all right well the order of <end>
<start> right now we're going to go down to our switching case where we where the <end>
<start> public and we're gonna say hot or not and it's gonna take in a context i <end>
<start> to set up a couple ends up here called x&amp;y alright so basically this is <end>
<start> activity here and it's called on options items selected so just look for that <end>
<start> we're just going to scroll down i was just seeing if there's some other ones <end>
<start> back surface class and change our is running right when it's started here <end>
<start> and post it and that's basically it for this tutorial we set up a run method <end>
<start> text view gotta import text even though we're in state x dot set text to <end>
<start> we're just going to scroll down i was just seeing if there's some other ones <end>
<start> set up our language that we want our text-to-speech to speak in and you <end>
<start> it's supposed to be apostrophe er but who cares most hateful people <end>
<start> gonna say new hot or not and again pass in the context of this class and <end>
<start> string so we're gonna say string f i don't know and we're gonna get our <end>
<start> what was our edit text called save file so now we're just gonna within <end>
<start> to say negative 1 / top value we're going to say just for example 0.5 <end>
<start> i don't know if that's going to confuse people or not but whatever so now <end>
<start> set up within our constructor for our class so we're just going to say <end>
<start> equal the same thing again we're just going to access the preference <end>
<start> so we're going to just save fos dot i'm sorry fos equals open file <end>
<start> messed up on some of these i don't know if i am or not i'm think <end>
<start> say 6 3 1 and as you notice like it doesn't exactly matter which order we <end>
<start> it's kind of difficult when i was a new programmer so there we <end>
<start> context that's gonna return the context of the base class and then we're <end>
<start> just closed off our statement with a forward slash a lesson sign so <end>
<start> string variable and we're going to get basically the string from that <end>
<start> to response or something like that and what we're going to do is we're going <end>
<start> set up within our constructor for our class so we're just going to say <end>
<start> sit onclicklistener real quick again this class is going to implement <end>
<start> text which we just looked at and forgot already called save file dot get <end>
<start> could create a method like get data or something and then set it up within <end>
<start> basically the bridge from xml so i'm going to set that up real quickly <end>
<start> sure it works so again this is a millisecond so when we hit let's <end>
<start> call that class splash and then we just say we have to refer to it as a class <end>
<start> can r can read and write so we're gonna set these boolean values to be is <end>
<start> the default that's what i did i just copied this pasted it right here <end>
<start> we're actually going to do is we're going to have a catch exception <end>
<start> sexier and that's for text activity for the most part so what i want you guys <end>
<start> database so first xml layout i call the sql lite <end>
<start> gonna say new input source and we're gonna refer to our website or url <end>
<start> references so we won't have to remember exactly every line of code that <end>
<start> release our finger so an easy way to fix this is as you can see our <end>
<start> at the maximum volume and i'll just mess around with this hopefully you guys <end>
<start> point and within the parameters it takes at the latitude and long longitude so <end>
<start> listener because again this is a class name that this set on check <end>
<start> parameters hit ok and there we go we have our <end>
<start> and say current v and we're going to set this equal to again our audio <end>
<start> that and we use the insert pinpoint where we just add an overlay to let <end>
<start> is looking for is a method called run so we need to set up this run method <end>
<start> completely red and completely green and then no blue and maybe 0.5 for alpha <end>
<start> exception so we're going to say catch and then we have to define the <end>
<start> a road view or a street view and it's going to look like that again if we <end>
<start> it so now we have text to text and we go into a graphical layout they're <end>
<start> whoa what's going on alright we're going to create a new string array and <end>
<start> permission uses permissions and then over here we're going to search for <end>
<start> the y value as well so we're gonna say - test dot get height this time / - <end>
<start> setting the contact or the setting the text view that's what's gonna happen <end>
<start> widget config and that's gonna basically widget config and that's gonna <end>
<start> know i'm kind of going quickly here i'll explain everything at the end once <end>
<start> of gives us the default sax parser factory and then we can just kind <end>
<start> relative layout because some of you guys might like this for developing <end>
<start> according to all this stuff that we set up here as well and we want <end>
<start> config and we're gonna have our edit text also just be et widget <end>
<start> wanted to say that you're a douche not only that but i hate when you <end>
<start> you can add an image button as well we're going to throw one of those <end>
<start> something called a pending intent and we're just gonna call this pi4 <end>
<start> android dot a p-- widget dot action dot an all uppercase app widget <end>
<start> equal to new remote views and then we refer to a context again <end>
<start> let's set that up just cursor c equals let's set that up just cursor c <end>
<start> on create methods so just go within the brackets of our oncreate and we're <end>
<start> webview and we're going to say dot load url and then we're just going to <end>
<start> that up now now the first thing we want to do is alright the first thing <end>
<start> now what we can do is you can say our controller and we can say dot animate <end>
<start> xml file and also i created this method called set up variables which is <end>
<start> name just some of the background stuff of the website that we can read <end>
<start> all we have to do is say start activity and we're going to hit a because <end>
<start> all that good stuff so what we're going to do now is we're going to set <end>
<start> and then we're gonna say jessica alba is and then startactivity perfect as <end>
<start> out the website to make sure the javascript is enabled so we're going <end>
<start> basically what we can do now is say calm dot the new boston dot travis <end>
<start> there should be a there's radio button pat towards the bottom of the list <end>
<start> gangsters gangstas and you know whatever else we want you <end>
<start> going to create a string and we're going to say this is our data we're going <end>
<start> have to do now is set this up in our menu class again once our button <end>
<start> latitude so let's just set that up here real quick again our geo point <end>
<start> cases so we're gonna say case then we're gonna refer to the motion event <end>
<start> there but let's get into it it's gonna be pretty simple pretty easy so <end>
<start> well but for the most part this is pretty similar to the example <end>
<start> called create entry within our other class that we call where we're <end>
<start> can't find it we'll edit the video most part looks like this open class <end>
<start> everything works all right so let's click on it and <end>
<start> and then this is the the method that we're going to create so we're going <end>
<start> marketplace so how we can kind of kind of utilize our thread and make it <end>
<start> just click on the android and all sorts errors are coming up and now what <end>
<start> we're going to do is we're going to say our tab specs is equal to our tab <end>
<start> methods such as content equals and then we can say equals within parentheses <end>
<start> what's up guys welcome to your 180 fourth android tutorial for the new <end>
<start> read the text and convert it into a string as always so we're going to <end>
<start> to be clickable because what we're going to do is we're going to have our map <end>
<start> manager so we're gonna first set up our location <end>
<start> switch case down here we're going to say these are kind of the answers for <end>
<start> really care it's still going to be called this way or it's still going <end>
<start> is say our view which is that variable we set up that can work within <end>
<start> stream and it's going to return the string called collected so now <end>
<start> know it's pretty much the same thing again we have to cast it as an nth <end>
<start> tutorial guys have a good one peace and just to show you it's sending <end>
<start> or whatever year guys's password was and then our key pass was also travis <end>
<start> up a bufferedreader to be null and a string which is our actual return <end>
<start> every time this application reruns or this the only time it's this thread <end>
<start> and now anytime our sensor changes it's gonna call this on sensor change <end>
<start> our data and then we're going to create our data and then we're going to <end>
<start> gonna say our holder now we're gonna say dot get surface and then hit dot <end>
<start> created a toast to make sure that this method was being called and you know <end>
<start> here and we're gonna say create method get data and type hot-or-not and as <end>
<start> exception call it e and all we're gonna do is we have this textview which <end>
<start> again to match your class name we also need to set up in the manifest <end>
<start> to create that top triangle so three four and <end>
<start> layout and and i messed this up all but you guys should have fill <end>
<start> you know this if statement and we're going to change that value and so <end>
<start> touch on touch method basically it's returning false so once it gives us <end>
<start> state and again just get text dot to string and there we go we have two <end>
<start> our textview that we created called data result to match our shared <end>
<start> to basically when we use our open method that says throw exception we're going <end>
<start> my bring back like this and we're going to call this our view that's the name <end>
<start> something's working here so let's just give us some space to work and <end>
<start> stop - start as long as that's greater than one and a half seconds again <end>
<start> adding a compass what we can also do is you can right click and go to <end>
<start> that but it's gonna be a float and we're just gonna call this ratio set <end>
<start> and within parentheses we're going to give it a file name instead of a <end>
<start> that other all i got other great stuff so let's create a new class real <end>
<start> equal to which is question we're going to say dot set text and then we're <end>
<start> row four index row and we're going to set this equal to a cursor dot and <end>
<start> handle up and down that's what this again that's what this button is and <end>
<start> notification we hit our notification it opens up another intent opens up <end>
<start> gonna go to the next line so we know that we got that chunk done and <end>
<start> onclicklistener you guys will again get familiar with this it's kind of <end>
<start> string reference that our whole class is going to refer to as well as a <end>
<start> controller object so we're gonna call map controller and we're going to <end>
<start> is we're going to again semicolon and we're just gonna add one to each <end>
<start> what we're gonna get into for the most part now the way i like to teach or <end>
<start> the folder you want to set that up not too difficult and there we go <end>
<start> again we set up a progress bar we set the max value that a progress bar can <end>
<start> it yeah everything's fine and then we're also going to say result that's <end>
<start> when we set it up and now we have a drawable setup so we're gonna go <end>
<start> i have a crush on travis uh you know that should be good for now and for <end>
<start> happens so the first thing that we're going to do is we're going to set up <end>
<start> display something like that or show display something like that or <end>
<start> refer to our manager that we set up so sm dot again get sensor list and <end>
<start> something we're just going to say toast dot toe stop make text <end>
<start> bufferedreader which i'll explain in a second we're just going to set <end>
<start> call this info something like that and we're also going to set up a app <end>
<start> going to call this backpack get a new bundle nothing too new <end>
<start> public boolean and say should override url loading and this is going to be <end>
<start> as an int because over here in our gen folder our our java just to open that <end>
<start> here so we're gonna we're gonna add unimplemented methods kind of <end>
<start> everything should work out perfectly so let's just start stop and as you <end>
<start> they're side by side on the same row neck next we just need to add you <end>
<start> implemented the onclicklistener so that's going to add the on click <end>
<start> reference find view by id and then it was sliding d was id we gave our <end>
<start> up our dialog again that we created we're going to say increment progress <end>
<start> we're going to set this equal to b the system dot get property and <end>
<start> some information with that get method through http client that's how you do <end>
<start> guys can set up a linear layout here and then find some stuff within there if <end>
<start> all uppercase white like that and a scoop now our activity is going to <end>
<start> update what the layout of the widget should be and you know if we have <end>
<start> is go into our on create method and we're gonna say set content view to to <end>
<start> drawable /what if you guys label it as i love them on as plus and there we <end>
<start> that we can use within different methods so radio group and we're going to <end>
<start> temperature in fahrenheit is 77 you can also you know just say whoa whoa <end>
<start> start off this intent that we've been kind of defining so there we <end>
<start> up a remote views and we're gonna call it v and we're going to set this <end>
<start> gonna call it pointless widget because it's pretty much pointless thoughts <end>
<start> that again within our text setup part we can say android if you spell it <end>
<start> to call this one preferences and then for the id we're going to <end>
<start> as an int because over here in our gen folder our our java just to open that <end>
<start> define it so we're gonna say our thread equals new thread and we're gonna <end>
<start> need to import this class it's not allowing us to do so yet so we just <end>
<start> going to say spinner equals again spinner and find view by id rg <end>
<start> here we're just gonna say get selected item position and that's going to <end>
<start> gonna set our hotness edit text to our returned hotness so there we go <end>
<start> quickly we want to tell kind of give reference of how big our viewport is <end>
<start> let's see a button and then what was it and oh yeah and since we don't have <end>
<start> medium mounted what that's gonna mean is we can read and write so we're <end>
<start> also going to change this one to width and this one to height so there we go <end>
<start> whatever the text is going to be i wasn't going to scroll to it but okay <end>
<start> start an activity we're going to use instead of an intent for a class that <end>
<start> click listener and we try and you know import that for the most part and <end>
<start> content view just for you know good habit so do that and then we're going <end>
<start> last time just so you guys know what what's going on and now all we need <end>
<start> stuff view bad d and then if everything's set up right we can run <end>
<start> going to return a float but we'll get to that in a second also y is going to be <end>
<start> so we're just going to click that and if you guys remember we cleverly <end>
<start> set this equal to be is adds colon add size because again that's what <end>
<start> implements location listener like that and again we just have to hover <end>
<start> in there and we're going to relate to our point index list and then all <end>
<start> width divided by height and so again that's just a ratio of <end>
<start> to view our database we have two entries travis and samantha and and first <end>
<start> also going to implement we're gonna implement the sense something called <end>
<start> load some up or hit apply and then load some of our platforms that we <end>
<start> reference so we can refer to it in java so we're just going to say id <end>
<start> processing speed i know this tutorial is pretty much pointless but you know <end>
<start> going to say intent and we're going to call this email intent something <end>
<start> activity it's under a regular activity we have a method called on options <end>
<start> overlay so let's get it set up what we're going to call our first overlay <end>
<start> going to say text-to-speech equals new text-to-speech this takes two <end>
<start> that but that's for sql view class so we're just going to run it real <end>
<start> camera application that we just set up and basically i don't know if you <end>
<start> self-explanatory of what that does so we're just going to scroll down i <end>
<start> that we want to write to it for the most part so context dot mode private so <end>
<start> going to do is we're going to go into eclipse and for windows you want to <end>
<start> and negative 1 in the z direction so we're gonna scroll this point <end>
<start> going to change our text to something like your total is and then <end>
<start> its parameters so we're going to set this bitmap equal to the bitmap we <end>
<start> string for our returned hotness pretty string for our returned hotness <end>
<start> basically with this set load with overview mode it's kind of hard to <end>
<start> you guys enjoyed that tutorial i know it's kind of simple but i wanted to <end>
<start> once we release so hopefully that concepts sticks in <end>
<start> guys kind of understand what this java class is i didn't want to type it <end>
<start> go to new class and we're going to call this menu now hopefully you guys kind <end>
<start> dubious type of type of dialog here so we're going to say is for and <end>
<start> you know setting our text here which we could still do we're just going to <end>
<start> we can do is we can just add to a relative layout which we call called <end>
<start> going to be kind of the same layout for a go forward as well so we're just <end>
<start> default image that they give us just you know for for simplicity sake and <end>
<start> two parentheses and then we say dot execute whoa can't spell and then <end>
<start> we're gonna finish up this you know this whole google map stuff in the <end>
<start> xml is pretty easy and once you guys start with it and work with it a <end>
<start> android and tenth dot set type and we're going to say within quotations <end>
<start> reference and android we can also do like summary let's do enter your <end>
<start> going to do is it's gonna read through a file input stream and once it <end>
<start> the json string called http port slash forward slash api dot <end>
<start> textview fine view by d r dot id dot tv show results or whatever you guys <end>
<start> class and we're doing is just gonna call this entry and again we're just <end>
<start> basically this through the football and we need someone to catch it so <end>
<start> ten dot geo underscore per spekt spective correction hint and then <end>
<start> we're just going to click ok and also for you guys wondering the java jdk <end>
<start> understand the concepts this is basically what i'm pulling is the <end>
<start> first thing we need to do is say request window feature and then we hit <end>
<start> 0.02 be in the same position so i'm just going to copy this whole thing and <end>
<start> seguin set this up to our audio manager class <end>
<start> or whatever find view by add a r dot id dot listview voice and we're going <end>
<start> url and we're gonna pass in our string that we created with our string <end>
<start> that's because we have the sd or this cable plugged in usb so we're just <end>
<start> dot raw dot and then our background music and again we're just gonna <end>
<start> of our choices again we can say on create bundle which is what we want <end>
<start> value so we're going to say android weight sum is the command and <end>
<start> basket so we're gonna say basket and we're gonna just say new <end>
<start> we're just gonna scroll down to basically this line of code that <end>
<start> say comm google dot dot add activity so make sure your spelling is correct <end>
<start> click that enter again let's just test link in and you know if google <end>
<start> have to import this and what we're going to do is we're going to say get <end>
<start> separator so that's just going to separator so that's just going <end>
<start> is equal to e dot values and now we're looking for the y direction which is <end>
<start> equal for the most part again that's our expression mark there as long as <end>
<start> tutorial basically what i want you guys to do is go up to your first <end>
<start> layout what we're going to do is we're going to go over here into our <end>
<start> which is called e and we're just gonna say dot will set up a string and <end>
<start> to do again refer the recognizer intent and we're going <end>
<start> just change that value to zero because the only time our x and y is going <end>
<start> it's none of those options we're going to say else and then we can say <end>
<start> thing to just put text down there as well but now it's going to return <end>
<start> position zero and then we're good to go now what we need to do is we need to <end>
<start> settings back for our superclass so as for now we're getting in there as <end>
<start> just gonna say if text-to-speech is not equal to null we're gonna kill <end>
<start> we're gonna actually do before we set that up we're just gonna go above <end>
<start> basically the maximum volume i'm sorry we want this max value equal is the <end>
<start> within parentheses again the exception type is called class not found <end>
<start> what we're gonna do is we're gonna say new alert dialog and then we say <end>
<start> all we have to do now is we got to paint them onto our canvas so we need to <end>
<start> by yourself but we're going to say data we're going to call the main one <end>
<start> then we're gonna put a comma and we can say example 1 and then i'm just going <end>
<start> current volume on the person's phone is so we're gonna say sb dot set <end>
<start> same key store and key alias so we're just going to say use existing key <end>
<start> information of this string to that class so we're gonna say info dot set city <end>
<start> point or we're gonna see our point byte <end>
<start> a drawable that we're going to use for a whole class so let's define it above <end>
<start> set maximum and we could like get like how much bite are you know how much <end>
<start> set our text view said our textview variable is called <end>
<start> say is we're going to say web or our brow again which is our web view <end>
<start> our wakelock internet and set wallpaper so far our permissions for this <end>
<start> complicated just make sure we ever we have our references set the same <end>
<start> same as whatever you define your variable type as so my bring back <end>
<start> whatever is within our save and our load button so now that we've copied it <end>
<start> and we're going to scroll down for on activity result on activity result <end>
<start> learn something a little bit about the return value for the on touch and <end>
<start> sleep for a little bit yeah you're like sleep we're not to do that yeah i <end>
<start> it's just blank probably talk through what we're going to set this one up <end>
<start> available again it's nothing too new there and it says we just need to add <end>
<start> parent i don't know if it's not for the height yeah for the height we want it <end>
<start> method for the most part nothing too new <end>
<start> cursor so we're going to set a cursor up and we're just going to set this <end>
<start> class i know i told you guys we're done with that but since i'm going to <end>
<start> nothing too complex here but we just create a new overlay item now what <end>
<start> here so we're going to say flippy and one of the things that we can do is <end>
<start> for us and i'm just going to say new add view and then within parameters we <end>
<start> to our canvas and say dot draw rec and then it takes a rectangle and a <end>
<start> we're just gonna say public whoa sorry i'm not angry at you guys public <end>
<start> import overlay class which comes from kombu gold android maps package and <end>
<start> to refer to again the power manager class and we're going to say full <end>
<start> say dot append and what we're gonna do is we're <end>
<start> basically meaning that we're going to use this as a button and we're going <end>
<start> view which we call show result and we're going to say dot we're show results <end>
<start> we're just going to say dot get activity and it takes four things with <end>
<start> result code is equal to results okay and that should be familiar so there we <end>
<start> just going to allow us to get some information about a specific <end>
<start> because we're taking up everything else that's available here and then <end>
<start> referencing multiple methods so we're going to say string and we're going <end>
<start> we're just gonna say string builder we're gonna call this url we're <end>
<start> our columns name which we're just gonna copy from this get data up here <end>
<start> accessible to this class for the most part so again instead of public we <end>
<start> source override implement methods and we're just going to look for on <end>
<start> and another method we can call is to get that progress again we have an <end>
<start> going to do real quickly is set up instead of example one we're going <end>
<start> internet so we're going to go into the manifest go to permissions add <end>
<start> to change this to one so we have a negative one bottom and a neg or <end>
<start> install it pretty simple then you can have that option right there so let's <end>
<start> url dot or actually let's start a new string we're going to say string <end>
<start> here's the developer page it should be on this page if not but <end>
<start> and kind of handle it as well so what i did is i set up a float and you want <end>
<start> and then this has to be verbatim this has to be the exact same so we're <end>
<start> text and we're gonna set this equal to whatever so this is a message <end>
<start> context or this class so we can just hit create constructor right here and <end>
<start> full way clock so that's just going to leave our screen completely fully <end>
<start> and i'm going to show you that problem real quickly hopefully when we run <end>
<start> they did define that for us already and you know that's basically where <end>
<start> we're going to say file output stream this and we're going to call fos <end>
<start> screen up to five at a time so there we go <end>
<start> were working with the bundles a while ago or put extra i should say when <end>
<start> second column so again you have the comma space in quotations plus and <end>
<start> random values in here so like to those to have it be pretty blue here <end>
<start> called send et so we're going to say send et dot get string i'm sorry <end>
<start> called shared preferences so we just need to set up a little variable for <end>
<start> be equal to list again our preference tab is accessing the array called <end>
<start> pretty simple kind of compliment kind of you're like what's going on <end>
<start> sure it works and kind of show you guys what it does so now what we can do is <end>
<start> first alert place a pinpoint button we're just gonna copy this whole <end>
<start> intent and well first let's use the method start activity for results <end>
<start> can say can whoops can go back so that's going to be like hey can we go back <end>
<start> select bottom and do 10 density pixels as well and check that <end>
<start> holder class and define it within our constructor our holder is going to <end>
<start> display something like that or show display something like that or <end>
<start> equal to our text view so tv and then we just got a display our dialog so i <end>
<start> what's up guys welcome your 44th android tutorial for the new boss and again <end>
<start> go pretty quick tutorial guys but i hope you enjoyed it and i'll catch you in <end>
<start> whole class we're going to say new my bring back and then we're going to <end>
<start> well actually let's run it real quick make sure everything <end>
<start> pretty tight to see all the satellite images and all that stuff so there <end>
<start> by right-clicking within the brackets going down to the source and then <end>
<start> the whole canvas for the most part so we're gonna say is our surface view <end>
<start> equal to new remote views and then we refer to a context again <end>
<start> again with me travis what we're going to do in this tutorial is basically fix <end>
<start> to set this equal to pending intent class dot get activity for the <end>
<start> catch and that's just print stacktrace can you guys don't really need to <end>
<start> whatever returning and it's named result so all we're going to do is change <end>
<start> believe the android developer page probably covers something like that <end>
<start> activity we have to define it in the manifest the guys remembered that so <end>
<start> basically getting a hold these four basically getting a hold these <end>
<start> of do everything so it reloads in this webview so i'll catch you guys in <end>
<start> again it's gonna be of the type new boston and as you can see it opens <end>
<start> sorry if i'm going fast i mean hopefully you guys pick up on this the most <end>
<start> lite example class we can just call those methods and it's going to <end>
<start> have a hundred and eighty-one seconds what this is going to do is we're <end>
<start> name dot set text and we're going to set it to our returned name and then <end>
<start> vertices even though we have you know more vertices so that's good and <end>
<start> from google and again we're going to select api level of 8 which will be <end>
<start> equal to edit text find you by id again and then edit text commands so <end>
<start> onclicklistener so we're going to say new tab dot set <end>
<start> it's reload still pretty easy method to remember <end>
<start> just deleted pretty much or get method and we're just starting again brand <end>
<start> to skip out one of these things basically you use use the stride to <end>
<start> variable setup called our song all we have to do now is do our song oops <end>
<start> this out and we're gonna paste it above and then we're also gonna whoa <end>
<start> way clock now so let's just say way clock we can established you know oh <end>
<start> that we just set up which is our array and that's going to return a lot <end>
<start> launches first because we have this launcher intent for the most part <end>
<start> ball so that's our input stream what we're gonna save now we also need <end>
<start> going to say if and then within quotations result code which again <end>
<start> you can see here and so that's pretty neat and then if we hit the go <end>
<start> that's spelled wrong as well who cares stupid things that this person does <end>
<start> and we're gonna call this exactly what we called you know this <end>
<start> variable and then now we have our returned name and our returned <end>
<start> inflator class so we can use its suite methods and we're just going to use <end>
<start> sound pool we're just gonna say sound pool and we're going to call the <end>
<start> new something like that then again we just refer to and then again we <end>
<start> over here so we're gonna say milliseconds seconds and oops no <end>
<start> hotness so we're just going to say l row for the first parameter which is <end>
<start> one which will set our value equal to one which again is a string so we <end>
<start> data then we're going to say get text again and to string here and now what <end>
<start> what we're going to do we're going to say external data dot this again <end>
<start> to be clickable because what we're going to do is we're going to have our map <end>
<start> mouse cursor but basically before we extended the view class and you <end>
<start> can do is we can set up kollene so we're gonna say gl dot gl enable dl dot <end>
<start> how we kind of add and add within our application and you can kind of see <end>
<start> android layout gravity equals centered just copy that that code and paste <end>
<start> be exactly the same as the reference we created in our splash activity <end>
<start> say st dot close and the third button is just going to toggle it whether <end>
<start> all we have to do now is we got to paint them onto our canvas so we need to <end>
<start> our columns is going to be for a second parameter just our string array that <end>
<start> strings like string called values equals 1 even though basically our <end>
<start> everything works all right so let's click on it and <end>
<start> again is just a simple if else or if statement so we're going to say if <end>
<start> this item and also as well you can do android alphabetic shortcut equal <end>
<start> just seeing this tutorial and having been following along for our paths <end>
<start> return some data to us so we're going to do is we're going to right click go <end>
<start> because again we haven't set up this this value called shared string we <end>
<start> the life cycle and which methods are important for the most part so <end>
<start> insert endpoint or something and we want insert endpoint or something and we <end>
<start> and over here we have this new reference libraries that we you know have <end>
<start> going to be a media player object so we're going to say media player <end>
<start> quotations at plus id /m v format view main something like that now <end>
<start> crap alright so it looks like the emulator doesn't have the <end>
<start> and negative 1 in the z direction and again we're just gonna call this point <end>
<start> within our open class or open class and also our our data classes well kind <end>
<start> import both those and what's up our references now are confirm equals <end>
<start> bundle we're going to say got basket first then you guys will have to <end>
<start> and you know something like that and also set the duration so just toast <end>
<start> going to set that equal to within parenthesis textview and find view by <end>
<start> down to this new method right here that i just created off you know whatever <end>
<start> with a textview trying to gather my thoughts here sorry and today i <end>
<start> button it's going to go back to my bring back up forward go back and then <end>
<start> xml stuff so we're going to do is we're going to set up a string and we're <end>
<start> send data we're going to say if it's crazy we're gonna say probably right <end>
<start> basically two string variables gonna call first string edit text or et <end>
<start> it works hopefully otherwise we have to redo <end>
<start> supposed to be wrap content again this will just wrap the content of our <end>
<start> only one one tutorial or so but we're just going to suffer variables and <end>
<start> we're going to add a key reference so again it can save it we're going to <end>
<start> say we're gonna set this equal to our byte buffer which we call b buff dot <end>
<start> this as false for now anyways and now we kind of have our overlay set up which <end>
<start> and we're going to say basket dot get string and then we just have <end>
<start> layout that we set up so we're just going to go browse and then it's <end>
<start> going to add is whatever is being passed in our username right so hopefully <end>
<start> space and then our quotation then we're gonna say plus our city again <end>
<start> we've used this before as well but the new thing is again the voice <end>
<start> a button pretty awesome it's right there now we need to set up what this <end>
<start> host so that's a little bit different but an r dot id dot tab host so we <end>
<start> to basically when we use our open method that says throw exception we're going <end>
<start> we're gonna animate you we can also set our zoom with our controller so we <end>
<start> set up that we created for the most part so i'm going to copy one of <end>
<start> to a which would be about us it click this menu as well so that's enough <end>
<start> falling asleep on you guys here but hopefully we don't get any airs you <end>
<start> picnic so what to do that all we have to do is say basket dot put string and <end>
<start> update media update files for the user to use something like that so <end>
<start> this random random string up here so we're just gonna say r and and <end>
<start> menu here and we're gonna import or use another menu or another method from <end>
<start> going to want to do that we're actually going to want to extend the surface <end>
<start> to have it the value of what's being passed in our string here so we're <end>
<start> password that you guys will remember again your keystore password and <end>
<start> later as we go just know that this is a class what we're setting up all <end>
<start> set up our button as well so button b set that equal <end>
<start> on that and you guys have the xml and the java for this tutorial because <end>
<start> that's getting passed in we're going to say if that's equal to result <end>
<start> just say this is equal to new intent and then the package name we're gonna <end>
<start> button that gets pressed often and you guys want to update your ad or <end>
<start> say new hot or not and we're gonna pass in the context of this this class or <end>
<start> sliding drawer and and we got to import that and then <end>
<start> to relate to this class so that's something pretty important and we <end>
<start> change all those the x 1 for the most part and then we just have to you <end>
<start> class by right-clicking on the package my computer doesn't freeze here and <end>
<start> just hit comma do and then do a on checked <end>
<start> on seek bar change listener so there we go and then we just have to add our <end>
<start> for a whole class again so we're just going to scroll up and type bitmap <end>
<start> and we're going to pass in our entity which we call the e and that's <end>
<start> parameters the text so we're going to refer to our random text that we <end>
<start> class import and then what we can do is we can say our request dot set uri <end>
<start> working with and then lastly we need to set up our buffer which we call p <end>
<start> this ratio for we're also going to set up what what matrix mode we want <end>
<start> we can use some methods on that there's one called set wallpaper <end>
<start> can use with this webview so far the only method we have is loading a <end>
<start> up samantha and 7 which is again our second entry and we can also do one <end>
<start> we're going to say set javascript enabled and that's true or false so <end>
<start> type our buffer is and again it's the short type that we have up here and <end>
<start> so then what we have to do again is just set up our preference activity that <end>
<start> gonna call this be buff gonna set this equal to the byte buffer class and <end>
<start> those string references but you know for the most part we aren't going to <end>
<start> widget which is the one i created just to get reference and then it <end>
<start> textview to and valid to start with and we're <end>
<start> give us sorry its gl disabled and what we're gonna disable is the dither so <end>
<start> open basically our entry because we just set up that open method and there we <end>
<start> we're just going to call this v for our view and we're going to say new view <end>
<start> within our let's scroll up to our motion events and within our motion up we <end>
<start> quick layout nothing new again just right-click new android <end>
<start> preferences and then what what kind of we're <end>
<start> our sensor manager or sensor manager class and we can pull different <end>
<start> is setup basically again our json object so we call the object jason we're <end>
<start> activity if i hover over here you can see the first aunt says result code <end>
<start> preferences and then what what kind of we're <end>
<start> item type arraylist so again we have our arraylist called pin points and <end>
<start> ford ford slash two forward slashes and we can say saving data via <end>
<start> parameters is we're going to reference something from the android sdk and <end>
<start> here whatever you guys want again we can set up a toast dot make text <end>
<start> is a context so private context can't spell and we're just gonna call this <end>
<start> am i saying all right three four and then zero that's gonna be our <end>
<start> also say since we establish kind of our class which is our thread my bring <end>
<start> we're again set up a byte buffer call this our point byte buffer or point <end>
<start> sexier and that's for text activity for the most part so what i want you guys <end>
<start> you can see when we draw our bitmap test we're just going to change this to <end>
<start> the internet so we're going to go down to our permissions and we're going <end>
<start> all we're going to do is set up our text view which is basically our <end>
<start> the first parameter it just takes in which gl object we're looking at gl <end>
<start> guys learn to open an activity we're going to call intent i new intent <end>
<start> workout when you're trying to lose weight you don't want to just kind <end>
<start> forward slash details question mark id equals and then greater than sign <end>
<start> is we're going to say our ad and then again just load dot load add a new <end>
<start> values and then we're going to set this equal to new content <end>
<start> basically instead of this text here we can set it equal to our error string <end>
<start> temperature in fahrenheit is 77 you can also you know just say whoa whoa <end>
<start> available to the user so we're going to do is we're going to set up a <end>
<start> we're just going to print and we're good else we can just make it text <end>
<start> find that variable called c and we're just gonna say get package name <end>
<start> also fill the parent for both width and <end>
<start> let's say we want a lot of red i believe it goes up to like 265 or no 255 <end>
<start> and here's the action name so this is what we're setting our intent equal <end>
<start> basically have everything initialized for the most part and i just wanted <end>
<start> kind of the starting point so we're going to say display dot set gravity <end>
<start> bring back surface and we're gonna pass in the context of this alright so now <end>
<start> by going android dot provider dot media store basically all our media is <end>
<start> comm dot google dot ads dot ad view like that and we <end>
<start> basket so we're gonna say basket and we're gonna just say new <end>
<start> equal to new remote views and then we refer to a context again <end>
<start> the intent so we're going to add that method and it's going to be added <end>
<start> right now we can select them it'll save but they aren't doing anything so we <end>
<start> reading so we're going to say result is equal to basically result as well <end>
<start> arraylist we also want to populate so we're just gonna say this and <end>
<start> set up our directory path within our you know when an item has been selected <end>
<start> was our dot xml dot prefs so there we go we basically set up <end>
<start> then we just have to update our database so again we're going to refer to <end>
<start> whatever let me pull this over can you go into finder documents android <end>
<start> overlay overlay item that we're passing in to be this geo point our <end>
<start> which notification we want to set up so we're just gonna say unique id and <end>
<start> this applications for the most part is pretty pointless you don't learn a <end>
<start> url dot or actually let's start a new string we're going to say string <end>
<start> what you guys want to type out is a key tool - list - alias android debug key <end>
<start> guys but i just wanted to show you that you know that that nothingness i <end>
<start> most part to do we set up an answers not positive no all right so we're gonna <end>
<start> we're going to use pretty simple i mean this right here is the core concept <end>
<start> or something because there's an actual class called menu from the android <end>
<start> our on pause method we're just going to disable that text-to-speech so <end>
<start> just going to say start equals zero within our on create method so that <end>
<start> position positioning for the most part as you can see it's kind of messed up <end>
<start> a tent such as position something like that we're gonna refer to our <end>
<start> here <end>
<start> and easy here a little bit easier we'll be able to move a little bit <end>
<start> our class name so triangle e^x and this isn't gonna have any parameters <end>
<start> few tutorials ago so we're gonna set up a switch in case and we're just <end>
<start> something that's what we're basically going to establish in this <end>
<start> as you can see here it's labeled event so you say event dot and then we we <end>
<start> the y value as well so we're gonna say - test dot get height this time / - <end>
<start> grabbing the surface from a view and instead of doing that loop from the <end>
<start> our flags we're gonna set to zero and i believe that should be it again just <end>
<start> an int we're gonna call this check and we're just gonna set this equal to <end>
<start> kind of out of order here but we probably want to do like a try and <end>
<start> equal to new remote views and then we refer to a context again <end>
<start> dress like this and we're just gonna call this address now set this equal <end>
<start> finished we're just going to set that picture to the actual phones <end>
<start> let's quickly run our application make sure it works and the thing to note <end>
<start> this is the maximum volume again this is the highest or seek bar is going <end>
<start> can delete this but still make sure you have your period there after <end>
<start> even show you guys just again on do on create real quick and then if you <end>
<start> basically basically yeah this is our last little chunk of code that we <end>
<start> array that we set up at the beginning and we can set it up to something <end>
<start> go back here we insert a pinpoint which just adds that overlay item that's <end>
<start> say is we're gonna say sb for seek bar and then we're gonna say set max <end>
<start> want to have it start up a class according to the items that's <end>
<start> we're gonna want another thing we can do is actually you know delete this <end>
<start> activity the same activity then once we hit the back button oh you know we <end>
<start> is equal to again notification manager and we're just gonna say get <end>
<start> get latitude and we're also going to say longy is equal to again casting in <end>
<start> we're gonna pass in the context for this and that's just gonna create a new <end>
<start> data class for the for sending data and then we're going to open up our <end>
<start> anything we basically just created our file output stream using the <end>
<start> to say if like you know i n is not equal to null which you know for the most <end>
<start> to i'm gonna go to installed packages because i already have this <end>
<start> can have within our as for our input type we're going to use the one <end>
<start> set on click list or on touch listener just like when we did with on <end>
<start> sensor event listener and that's gonna be basically our sensor of <end>
<start> array array list of the type overlay item we're gonna call this map <end>
<start> let's kind of move these brackets down you guys want to have two brackets <end>
<start> text to our new string variable that we just set up within this class called <end>
<start> comma negative 1 and in the y-direction then we can again leave a comment <end>
<start> textview so we're going to say was our text you called show result <end>
<start> should say and then just get text to string again nothing new and we're <end>
<start> something like that but that only codes out one line of code you guys <end>
<start> ad request we're just going to create a new one we're just going to say new <end>
<start> if we switch over here that's gonna be these call tags here like <end>
<start> we're going to do real quickly is set up a couple boolean values called can w <end>
<start> basically the bridge from xml so i'm going to set that up real quickly <end>
<start> new my what was it to new my bring back surface <end>
<start> let's scroll down to our simple browser and type in a website again <end>
<start> say put rams and then refer to the position zero and finish off <end>
<start> and again as we scroll over here you can just see it needs some sort of a <end>
<start> or actually if we click on our edit text our keyboard comes up then we do <end>
<start> drawable item that's being passed in to align to where we actually want to <end>
<start> new boston and i'm just going to say key store hit enter and then we have to <end>
<start> marketplace you solve some kind of bug or something that people are <end>
<start> then we're going to go over to the website where we got our key and <end>
<start> but anyways so that's basically the <end>
<start> kind of a java thing don't worry too much about it we're just going to <end>
<start> we want to set up our class and don't worry we'd only create a new xml <end>
<start> say find view by id just like that find view is capitalized by <end>
<start> kind of error but we could have done this last time to get a kind of <end>
<start> into the the manifest and set up a class called sql view and have a <end>
<start> application working and we'll get into more detail as well as we go through <end>
<start> so again g open gl you can kind of render stuff pretty much however <end>
<start> title we're gonna refer to our title text for the content text we're <end>
<start> import it but we're going to set up an intent based off a class variable <end>
<start> collected initially equals null when we hit our load button and then we're <end>
<start> so in the next tutorial we'll learn a little bit a few more methods we can <end>
<start> text paint and that will give us all that other customization that we <end>
<start> again alright hopefully everything works now but uh alright that's better <end>
<start> to the actual city and state and upend you know the right <end>
<start> this method doing background now what we're going to do is just kind of <end>
<start> that's spelled wrong as well who cares stupid things that this person does <end>
<start> uses permission and we can scroll through some of the permissions that <end>
<start> within here we're going to say if and then we're going to have a <end>
<start> spec something like that we're going to set this equal to our <end>
<start> the progress on our seat bar so hopefully that makes sense let's run <end>
<start> all we have to do is type key store or key tool i'm sorry - list space - <end>
<start> go we got that set up and that's pretty much it for this tutorial again we <end>
<start> reference to the top front right and then it depends how we're gonna <end>
<start> have a few choices here so let's say edit text preference checkbox and <end>
<start> going to build kind of our own application and kind of because i <end>
<start> you guys kind of pick up on something again we'll go back over some of <end>
<start> started with this so we're just setting up some id or some stuff for the <end>
<start> gets called each time this published progress gets called and then after <end>
<start> true we're going to do whatever is true we're going to do whatever <end>
<start> going to set this equal to is we're going to cast in the input <end>
<start> or false so what we need to do is return something so we're going to go <end>
<start> gonna set to zero and what the stride is let's zoom back up to our vertices <end>
<start> is just the google weather api we're and then we're just going to create a <end>
<start> item selected mint method here and what we're gonna do is we're going to set <end>
<start> explosion and this is gonna be an int okay so let's let's set this up <end>
<start> set up something here to kind of proof check everything so what we're going <end>
<start> dot start maybe yeah we can use the <end>
<start> say add unimplemented methods and down here is our online click listener <end>
<start> you know our state where we can read and write and can w equals false here <end>
<start> paste one of the default activities that we have set up and paste it and <end>
<start> but again that's what the geo coder is and we also set up basically a geo <end>
<start> gonna add and add within this linear layout so to do that what we need to <end>
<start> paste for the most part and then change your edit text so i mean it's <end>
<start> draw and it's going to take a gl ten object within it and we're gonna call <end>
<start> send xml i forgot i wanted to add a one button here so just drag and drop <end>
<start> within the manifest now we have our intent set up we're going to just <end>
<start> paste it above and now we're good to go promise you this time i think <end>
<start> intent that we just created called open starting point there we go now <end>
<start> sometimes without spaces for some reason i don't know why but basically what <end>
<start> into our layouts here and pick one of our layouts let's go with let's go <end>
<start> gonna say dialogue call it d something like that or just say new dialogue <end>
<start> java jdk you want to click that and accept <end>
<start> camera application that we just set up and basically i don't know if you <end>
<start> new line when it's done reading that specific line and that's going to <end>
<start> that when we try to add like a click listener it's not gonna properly work <end>
<start> we're just starting our cursor at the beginning and after it reads through <end>
<start> to be nine that's pretty good and then we're going to update database heck <end>
<start> but takes a bundle within its parameters click ok and we have our activity <end>
<start> to comment under our open class activity comment out where we set up that <end>
<start> different a little bit nicer not really but you know it works and then we <end>
<start> view by d re id dot add and then all we're going to do is say add dot load <end>
<start> this textview is wrapping the content of the text so those are your two <end>
<start> for city and state within our on click method pretty simple again nothing <end>
<start> class and we're doing is just gonna call this entry and again we're just <end>
<start> again alright hopefully everything works now but uh alright that's better <end>
<start> we're gonna say our thread and then dot start and that's pretty much it for <end>
<start> sometimes when i do tutorials like this so again we say implement view dot <end>
<start> to context dot audio service so now we can you know mess around with the <end>
<start> reference so we called it widget underscore stuff and what we want <end>
<start> to want our dialog to display now we can add some stuff this dialog source <end>
<start> method so you guys should know how to do <end>
<start> button start dot set onclicklistener to this and button stop dot set on <end>
<start> a simple simple stopwatch application so fine view by id <end>
<start> want to update to our description later and all that good stuff as well as <end>
<start> then what we're going to do a door in ports and then we're just going to <end>
<start> there's invisible if we want to make it invisible and there's visible so <end>
<start> the release basically this is going to kick them down that you know this <end>
<start> can read this it's all that good stuff and hit generate api key and here we <end>
<start> spinner 1 and let's set that up within our external data class so now let's <end>
<start> works so what we're gonna do is we're just going to copy this float here <end>
<start> it so just click that and it's going to put it within a try bracket and <end>
<start> we're going to do in this tutorial is something really simple basically <end>
<start> i'm going to set this equal to open bracket quotations i'm going to say <end>
<start> can r equals true and lastly can w equals can r equals false and <end>
<start> tells you the methods that we can use and there's a draw method that we <end>
<start> the context that's being passed in which we called context so that's all <end>
<start> quotations we put our action name and we import intent and we also just say <end>
<start> pressed or the id of the button so now what our cases are going to be is <end>
<start> websites my bring back calm so you guys can check that out and get <end>
<start> and then we can say our blue dot set set color to again color dot <end>
<start> so we're going to just save fos dot i'm sorry fos equals open file <end>
<start> variable we're going to say bitmap is equal to and then within <end>
<start> gonna say metadata oops and we're going to give this a <end>
<start> this comes from our activity class so we're going to say on activity <end>
<start> basically the bridge from xml so i'm going to set that up real quickly <end>
<start> prompt and we're going to basically type what is right here so pretty simple <end>
<start> gonna call this button be find view by d widget config was the reference name <end>
<start> two buttons and a textview nothing <end>
<start> boss in and this will be the last tutorial for our external data class <end>
<start> can also set up a dialog where we're gonna refer to the exception <end>
<start> we set up here and just say plus and then in quotations dot png since <end>
<start> we're just gonna print a new line so you print a new line again just backslash <end>
<start> this resolved in the next tutorial we'll finish our application and everything <end>
<start> sure it works but yeah that's all this tutorial is basically the xml file <end>
<start> like that we're just going to open up again in our browser admob comm go <end>
<start> define it as always so we're going to give us some room here to work with <end>
<start> paste one of the default activities that we have set up and paste it and <end>
<start> up now we do this through the power manager because again the wait <end>
<start> tutorials go with this state we get the state and all that good stuff so <end>
<start> say set on click pending intent you gotta go pending yeah what's up with <end>
<start> think i love you so it's kind of a weird thing and obviously sorry is <end>
<start> for that like a button textview actually let's just throw in a textview so <end>
<start> we're going to set up our button within that layout again nothing new here <end>
<start> simple switching case that we're all so familiar familiar with get <end>
<start> we're going to delete the entry according to which row we want to <end>
<start> if you guys actually like me setting this up so you don't have to pause <end>
<start> gonna add and add within this linear layout so to do that what we need to <end>
<start> what we're doing again is pulling that object but we also want to pull <end>
<start> right and then all we can do is we can set up a new string and we're gonna <end>
<start> through what the code is exactly after we set this up so then just paste <end>
<start> hover over and say surround with try and catch and it sets it up for us <end>
<start> axis and the 2 is going to give us the direction of the z axis so for <end>
<start> equal to be whatever is being passed in is t so now again we have a method <end>
<start> just going to say key hotness and what's being passed in which is m hotness <end>
<start> notification setup and then we're gonna just add you know what details we <end>
<start> say extends default handler and then we just have to import <end>
<start> and we're just going to save it and i will catch you guys in the next <end>
<start> something like that now let's do like 25 dp just so we get a desired result <end>
<start> something or just gonna say hey it's false doesn't really matter if it <end>
<start> sense whereas that's loading i'll just talk over that again okay again <end>
<start> going to call this x r for xml reader set this equal to our sax parser sp <end>
<start> things i'm sorry an edit text we're going to call this input and set <end>
<start> what that's going to be is this call or this call to action this data and <end>
<start> going to show you guys that or not we might but i'm not positive yet and <end>
<start> just click on that one and then again we just have to implement that so there <end>
<start> released when the on pause method gets called i'll just test their <end>
<start> gonna call this button be find view by d widget config was the reference name <end>
<start> called and notify method we're just gonna say finish and after we hear <end>
<start> though we set it equal to be a normal delayed sensor we can even delayed <end>
<start> going to do that for all of our string variables that we want to set up <end>
<start> the http forward slash forward slash wwe new boston or something like that <end>
<start> our font and now now we can use this font so let's go into our on draw <end>
<start> we're doing and then we're just going to say a cool menu something like <end>
<start> pass we're gonna call it pass toggle or pass hog like that and set that equal <end>
<start> trouble reading that because i was trying to look at my camera and at <end>
<start> website it opens up a new intent and it uses the browser intent that's built <end>
<start> now our application should be working i'm just going to test it out make <end>
<start> new class called gfx surface and i'll explain what that is in a second <end>
<start> bit just kind of a review as well but we're gonna get into something new <end>
<start> gonna do is say dot put and then we have to tell it you know what we want to <end>
<start> get latitude and we're also going to say longy is equal to again casting in <end>
<start> reference bridges because we have these four buttons right here which i <end>
<start> get into that right now so open up your splash activity and hit enter right <end>
<start> into it and see what it is important here with the tab host and how it <end>
<start> to keep your package name and then we're going to go back to where i said <end>
<start> we're just going to say a row or we're going to say key underscore row id <end>
<start> catch you guys in the next tutorial have a good <end>
<start> like i need to go back to like third grade geometry it goes because <end>
<start> send xml i forgot i wanted to add a one button here so just drag and drop <end>
<start> is we're just going to say our browser dot then we say set webview client <end>
<start> class here and the first thing that we're going to do is we're going to <end>
<start> copy this and then i'm gonna pretend like i paste it where you know our <end>
<start> switch in case here i know these tutorials have kind of <end>
<start> we know what we're we're working with here so we're going to go to <end>
<start> again the recognizer intent dot extra and we're going to say language <end>
<start> method so you guys should know how to do <end>
<start> something like that and import bitmap and then again from the bitmap factory <end>
<start> what's up guys welcome to your 68 android tutorial for the new boss <end>
<start> specific attribute that we're looking for is again called data so if you <end>
<start> well we're going to add this this add view here so we're just going to <end>
<start> blue and let's see how that looks so i'm just gonna save this and run this <end>
<start> select bottom and do 10 density pixels as well and check that <end>
<start> variable setup called our song all we have to do now is do our song oops <end>
<start> for float and the first you know the y-direction is going to <end>
<start> create a while loop and we're going to say as long as their line is equal to <end>
<start> you guys in this tutorials basically we can set up a switch where it's give <end>
<start> just black which is basically just a black background sometimes by <end>
<start> and we're just gonna say custom something like that we're going to <end>
<start> to do real quickly is set up the emulator so we're gonna say the <end>
<start> just show you guys that this act activity where this application <end>
<start> browser of some sort so it's going to be pretty simple nothing too new for <end>
<start> alias and your key store and all those passwords so just try and keep it <end>
<start> with and what url it's trying to load so that's basically what that method <end>
<start> we're going to say view flipper we're going to call it flippy and what <end>
<start> variable so we're going to say camera data is what we're going to call <end>
<start> an int we're gonna call this check and we're just gonna set this equal to <end>
<start> there and again what we're gonna do here is say our surface view equals <end>
<start> else just greater than sign and then we're just gonna say we're gonna <end>
<start> increment by 1 now i'm not sure if we've done for loops yet or not it's kind of <end>
<start> manager and then we're going to say get <end>
<start> location we're gonna call this location l or location maybe like this and <end>
<start> and if we refer to the value 0 that's going to give us the pretty much the <end>
<start> this is where we're actually gonna draw our triangle and all that good stuff <end>
<start> my bring back or whatever you guys define this class name as the <end>
<start> internet data and this is going to throw an exception so now that we have <end>
<start> create a geo point out of that location so what we're going to do is we're <end>
<start> to long mm name and m hotness and so again <end>
<start> and we have our on click method again nothing new and we're just gonna say <end>
<start> need to pass in to the super the context i'll get rid of that air that <end>
<start> guess it's supposed to be travis loves bacon but it's just travis love <end>
<start> already be on the market place and you know this video would be made in <end>
<start> our hotness set up and when this method is called basically we want it to <end>
<start> regular activity that you guys might be familiar with should be hopefully <end>
<start> go out of our activity scroll down and as you can see as a title it says <end>
<start> in it so you guys want go to this website <end>
<start> so i'll just again go to source override implement methods and <end>
<start> we're gonna go above our class and we're gonna set this equal to static final <end>
<start> text paint and that will give us all that other customization that we <end>
<start> so what we need to do is we need to create also a json object that <end>
<start> say our touch point or a geo point dot get longitude and again we're going <end>
<start> pass we're gonna call it pass toggle or pass hog like that and set that equal <end>
<start> those to create our viewport and all that good stuff so again we're <end>
<start> all we do since we kind of redefined what spec is here we're just going <end>
<start> we're just going to call this v for our view and we're going to say new view <end>
<start> basically give it the have a name of some sort so we're <end>
<start> can do is we can say float center center x is equal to again our canvas dot <end>
<start> constructor because again any time this this class is accessed it's going to <end>
<start> because this is what i'm going to teach you guys that's new for the most <end>
<start> quickly kind of review here but you know the table layouts something a little <end>
<start> this onclicklistener so we're gonna say new dialog <end>
<start> string that's going to convert our file into a string and offer <end>
<start> added so let's save that and we're basically done with this <end>
<start> gonna say int max v and we're gonna set this equal to our audio manager dot <end>
<start> says standard activity result operations <end>
<start> two to the left of and then we just oops sorry always for some <end>
<start> this method is called it's going to run through here and return a string <end>
<start> the most part and now we can say add unimplemented methods and i just <end>
<start> trouble reading that because i was trying to look at my camera and at <end>
<start> new bring back surface called our surface for you again because again <end>
<start> for the widget so it's gonna be a little bit different than we would if we <end>
<start> just going to quickly set up our button called check command so we're going <end>
<start> we're gonna pass in the context for this and that's just gonna create a new <end>
<start> it away so what we're going to do is we're going to say gl again <end>
<start> result something like that we're gonna set this equal to new intent as <end>
<start> our linear layout still controls all of our buttons but that's still within <end>
<start> every time this button is clicked we can say display which is our textview <end>
<start> those because again we're gonna say one is for our starting x if it's not <end>
<start> permission tab here in the android manifest so just click that and <end>
<start> and again you can use all these methods and there's a method called set <end>
<start> gonna say if and within parenthesis we're gonna say music equals true <end>
<start> starting point the exact same name as our class name that we have <end>
<start> here so make sure it's like that and now we have our list address set up and <end>
<start> going to call this backpack get a new bundle nothing too new <end>
<start> say int milliseconds or mils like that and we're going to get set this equal <end>
<start> let's just put a break there as well now that we have everything set up <end>
<start> point or we're gonna see our point byte <end>
<start> we're just gonna say we're gonna say private because again since we have <end>
<start> set up here called what's up and second string you know that's why we <end>
<start> thing that we're going to do is set display dot set color here <end>
<start> we're going to create this method as well so i'll see you guys in the <end>
<start> just going to say try here and then enter try statement down here for <end>
<start> need to set up a reference so we can refer to it in java instead of xml <end>
<start> you're trying to set it equal to long so what we're going to do is just cast <end>
<start> values and then we're going to set this equal to new content <end>
<start> now it's going to shoot down to that onclick listen <end>
<start> for a whole class again so we're just going to scroll up and type bitmap <end>
<start> and we're gonna call this our surface and there we go at our imports and <end>
<start> to be the first row and that's where our cursor is going to start then <end>
<start> all we did in the last tutorial even though we kind of went through <end>
<start> it a little bit more descriptive so there we go we have a a radio <end>
<start> called e get action is equal to the motion event dot action down again <end>
<start> you know email address for the most part you probably are going to remember <end>
<start> confirmed button and for save button we're gonna have this again equal <end>
<start> boolean so we're gonna set up a boolean variable that is going to <end>
<start> to basically when we use our open method that says throw exception we're going <end>
<start> gonna draw to our gl 10 object and so it's gonna be pretty simple all <end>
<start> the whole xml thing by now i hope lisi understand how to do it and you can <end>
<start> going to be when we click when we click our view for the most part we want <end>
<start> again we had this as a string value but we're just going to say a thousand <end>
<start> also have a tab widget that kind of holds that all we have this <end>
<start> for short and we're putting all those values within our buffer and now what <end>
<start> kind of put something within both item and the clothes item brackets there <end>
<start> the new bossin and it looks like it looks like <end>
<start> send data we're going to say if it's crazy we're gonna say probably right <end>
<start> method now what we're going to do is we're going to scroll down to the <end>
<start> which we called sd we can say dot o again we have to establish four <end>
<start> to say toast toast dot make text context or class name which is called <end>
<start> with so we're gonna say r dot layout dot widget and again that's what we set <end>
<start> set this equal to be is adds colon add size because again that's what <end>
<start> this point index array or list we're going to set this equal to <end>
<start> class real quickly and again we just need to create a method that returns <end>
<start> be a little bit easier a little bit simpler as well so what we're going <end>
<start> sure those radio buttons work and there we go again i'll explain that a <end>
<start> fos and we're going to say new file output <end>
<start> part from our file input stream which has the length or this many <end>
<start> your application so again just make sure you guys open that up and add <end>
<start> android layout height but you know android layout height but you <end>
<start> variables there and we also want to add the references to our edit text in <end>
<start> voice and for our listview say lb voice return so again nothing <end>
<start> reference find view by id and then it was sliding d was id we gave our <end>
<start> drawing stuff so again i'm just gonna say canvas draw bitmap and and then <end>
<start> say dot set the title and whatever our title is like pick something pick <end>
<start> again is just a simple if else or if statement so we're going to say if <end>
<start> again it's called sliding drawer it's a class we're just going to call this <end>
<start> we haven't done too much but we do now kind of understand that some <end>
<start> our skit did we set that up yet no okay basically this is going to be <end>
<start> so hopefully that kind of makes sense guys i'll get rid of one of our <end>
<start> our layout and we're going to label this splash and you also have to put dot <end>
<start> we're going to do is we're going to set this equal to open file input instead <end>
<start> it's just about implementing for the and when we implement we have to use <end>
<start> settings i'm just going to show you a few here such as enabling javascript <end>
<start> gonna create new class and we're gonna call this custom pin point or <end>
<start> have to set up a reference bridge so we're just going to say add view <end>
<start> going to say string integer and string and i'll describe what that means <end>
<start> going to refer to our database so we're going to say our database and the <end>
<start> get you know the maximum value of our addresses list and we're just going <end>
<start> there it's man such a great read so if you guys want to read that <end>
<start> then all we have to do is add to our overlay list that we created a <end>
<start> we're just gonna say string c for city and we're going to refer to our <end>
<start> and that's what we're gonna refer to for a few and so it's just gonna update <end>
<start> it's going to break out of our while loop and while that's happening we <end>
<start> clock if i believe we did something like this with our stopwatch application <end>
<start> intent action name to be and you guys might remember what the action name <end>
<start> and for a first button anyways and our second button we're gonna say save <end>
<start> activity and for a third textview we're gonna say tv widget update so there <end>
<start> going to say get and add our imports now what we want to do is we want to <end>
<start> if the accelerometer exists so now we're going to do is we're going to say sm <end>
<start> string call e and this is gonna be equal to our info or edit text called info <end>
<start> does something this is basically the finished application pretty <end>
<start> called touched point so we can say touch point dot get latitude and that's <end>
<start> that once we hit the save button so we're going to say save and now <end>
<start> scrollview in there i think about it so we're just going to go above our <end>
<start> value of the nth so we're gonna say string value of our integer which <end>
<start> going to be equal to fill parent and android layout height can fill <end>
<start> keyboard after it starts loading our url and there it does it so that's kind <end>
<start> this and the class name so we're gonna say status bar dot class and if you <end>
<start> something like media player mp equals media player dot create and context <end>
<start> format it and then we're just going to throw in some random crap so be <end>
<start> change and what we're going to say is we're also going to say public so <end>
<start> and call it gfx i don't know for graphics and you know as always what <end>
<start> guys but i just wanted to show you that you know that that nothingness i <end>
<start> accelerometer so let's you know go into activity import that and our sensor <end>
<start> want to set up the android config to be android config changes and we're <end>
<start> and we have our on click method again nothing new and we're just gonna say <end>
<start> equals 0 so basically this is checking if x is not equal to 0 do whatever <end>
<start> sure everything works and that's pretty much it for this tutorial guys <end>
<start> because we had two buttons and change this from our crazy to <end>
<start> call it our class or whatever you guys want to define this as and when we <end>
<start> like 0.8 and we're just gonna say f for float and for green we don't want <end>
<start> the new boston alias and make sure i spell right there and then again just <end>
<start> set our onclicklistener and we're just going to say this as well now <end>
<start> the nth for this we're just going to say our <end>
<start> is we're just gonna copy one of these buffers down here because again we <end>
<start> our input stream reader as well it looks like we're probably gonna run out <end>
<start> our class name so triangle e^x and this isn't gonna have any parameters <end>
<start> again gonna do just allow us to access that status bar and you know clear <end>
<start> going to say spinner equals again spinner and find view by id rg <end>
<start> there for you guys and android all you do is android and then visibility <end>
<start> say extends default handler and then we just have to import <end>
<start> which i'll explain in a second and again in parentheses d within here whereas <end>
<start> going to be activity so we're just gonna say extends activity and we're <end>
<start> gonna say int max v and we're gonna set this equal to our audio manager dot <end>
<start> most part but now we're just allowing people to type in their own <end>
<start> music test you can change as well but just to save some time here so now <end>
<start> to hit set those up real quick i'm going to call one send xml and i'm going <end>
<start> this and the class name so we're gonna say status bar dot class and if you <end>
<start> is a new adapter new array adapter and again type string and within <end>
<start> going to say else we're just going to start it over changing y is equal to <end>
<start> the gl ten class dot gl underscore color array and then we also have to set up <end>
<start> now we're going to use it within this method so we're going to say display <end>
<start> say five hundred so it's going to be just like let's do five fifty so <end>
<start> manager that we set up so we could have created this within our on create <end>
<start> a controller now controller is going to be able to animate where we're <end>
<start> gonna call this our table or actually info we'll call it info and we're <end>
<start> promise you you will well at least i hope you will i'll try and go <end>
<start> here and we're going to change this to et sindh because we're going to <end>
<start> method that we just created so we're just gonna say check state and <end>
<start> most part so we're gonna set our value is equal to get data dot get <end>
<start> within its parameters so we're going to say a rectangle which we just <end>
<start> if we're returning our name we can also just say if we know which column it <end>
<start> our surface view because our surface view is going to take up the <end>
<start> would just compile on top of each other because again the frame layout <end>
<start> we're going to still work with the 8 api level and we need to select this <end>
<start> on progress update and it's going to take an <end>
<start> add a sleep within here so again this kind of review thread dot sleep <end>
<start> to say negative 1 / top value we're going to say just for example 0.5 <end>
<start> gangster-style just going to hit dot stop and then tts dot shut down <end>
<start> x is equal to our dx divided by like let's just do 30 and see how that <end>
<start> scroll through these text views i will scroll through these text views i <end>
<start> browser application and so we're going to say our our spec dot set content <end>
<start> give us a random number and if we get the answer of zero we can do <end>
<start> just like kind of breaking down some code a little bit better using json <end>
<start> alias maps key store hit enter and then we need to create a password that <end>
<start> type of kind of variables we want to save within <end>
<start> to say toast toast dot make text context or class name which is called <end>
<start> or not class or object we're going to call it x i don't know new hot or <end>
<start> gonna say our holder now we're gonna say dot get surface and then hit dot <end>
<start> quotations at plus id /m v format view main something like that now <end>
<start> internal data chicken is our main class name and then we're going to say <end>
<start> so again now it's just going to be our table name which id we want to pat <end>
<start> you know the splash activity the sound on it is driving me insane <end>
<start> a great speech so we're just going to say text to speech dot cue whoops ah <end>
<start> example one that we were going to achieve through the settings is kind <end>
<start> to kind of clean up your code and get things organized a little bit better <end>
<start> going to do it anyways basically before we get started i want to make sure <end>
<start> and revision to where that's going to be located is under the available <end>
<start> to label this as got bread so now we can pass a question along through <end>
<start> just create a variable we're gonna say while is running and then we have <end>
<start> i'll be like row 1 2 3 etc we do that by saying primary key because this <end>
<start> class by right-clicking on the package my computer doesn't freeze here and <end>
<start> string and you guys can always read over here to get a little information if <end>
<start> reference to the check box and i set the onclick listeners by implementing <end>
<start> we're just going to say touchy class touchy again within you know our <end>
<start> get we're going to call this our request we're going to do we're going to <end>
<start> the http forward slash forward slash wwe new boston or something like that <end>
<start> have to print our fingerprint and you guys will probably have to have a <end>
<start> attractiveness or hotness or whatever you guys you know what this <end>
<start> man shared preferences it's gonna be the same layout same kind of stuff that <end>
<start> do is we're going to say random r is equal to new random pretty familiar <end>
<start> this tutorial we don't have a lot of time but let's create a custom pin <end>
<start> bufferedreader which i'll explain in a second we're just going to set <end>
<start> released when the on pause method gets called i'll just test their <end>
<start> started working with widgets and you know it's always a good good idea <end>
<start> and then colon and you can see some of the methods that we can use <end>
<start> familiar with oops so kind of a boring tutorial <end>
<start> power manager set up for us and the only other thing we have to do is set up <end>
<start> accept all or whatever install and accept all or whatever install <end>
<start> and what we're going to do we're going to say new rec and that's <end>
<start> thing so what we're going to do is we're going to go down to this transitions <end>
<start> we just created so r dot layout because it is a layout dot text and there we <end>
<start> linear layout which you guys should be pretty much familiar with then <end>
<start> save it and close it for now hopefully we won't have to come back to this <end>
<start> we're going to create called voice let's set that voice xml file up real <end>
<start> then we're also going to say are scaled y is equal to our d y divided by 30 <end>
<start> we're going to put some stuff in there we're going to say put and then as <end>
<start> yeah i created that i'm a natural beethoven so uh yeah it looks like <end>
<start> type string and what we're gonna say is results is equal to the data which <end>
<start> there and we're going to paste it here i'm just going to make one up <end>
<start> within this class oh i'm sorry and we won't also move this string below <end>
<start> because we did kind of use it but we didn't really get into too much so <end>
<start> progress update here and we do that by a command and the command is <end>
<start> that we don't really have anything within our list it's already knows <end>
<start> of difficult but now here's your pros you're showing everybody <end>
<start> kind of are picking up on some stuff especially the new programmers this <end>
<start> we're just going to say again like try and then i n dot close and then <end>
<start> just because horizontal freaks me out so there we <end>
<start> choose that within this option here and then hit finish and it should <end>
<start> constructor well basically when we go back into our graphics effects fx or <end>
<start> the most part but as always we're gonna have to set up the xml layout and <end>
<start> of code android padding and as you can see you can do padding around the <end>
<start> url dot or actually let's start a new string we're going to say string <end>
<start> send data we're going to say if it's crazy we're gonna say probably right <end>
<start> pass in oops and then within parentheses we pass <end>
<start> going to simply just go dot reload so it's not actually refresh <end>
<start> guessing so i'll see you guys then have a good <end>
<start> refers to either being a successful or it not working so what we're going to <end>
<start> dresses type so we're gonna set up our list and like i said it's the type <end>
<start> we're gonna have to do is use the gps to find where the phone is to get <end>
<start> then this is the name of the reference but it's displaying the value of <end>
<start> then you know we can set up our next vertice here as <end>
<start> real quick real easy last thing we're going to do for this graphic <end>
<start> just gonna fill in these edit text up here with the information that <end>
<start> to have our alias name which there's only one alias under marquis <end>
<start> going to do is just say our database and again we've learned about update <end>
<start> database underscore table so for table name exists it's going to drop it <end>
<start> protected data protected void on pre execute and again we can refer <end>
<start> we're gonna call this one tv config input and we're also going to have <end>
<start> update media update files for the user to use something like that so <end>
<start> up oh okay yeah there mind all right so here's our activity let's let's test <end>
<start> dot let's not do that one we're going to do for the fourth button we're going <end>
<start> we're just going to say again like try and then i n dot close and then <end>
<start> explanation on the frustum and see that now we can still see the triangle as <end>
<start> this onclick method again these two brackets and when our application <end>
<start> again our geo coder is gonna be able to get some information like the dress <end>
<start> there so what we're going to do is we're going to scroll up to the top of <end>
<start> flag of some sort so we're going to click that in for a flag we're going <end>
<start> series so i thought i'd show you guys all the options or you know most of <end>
<start> button when it clicks we want to read one of these choices up here we <end>
<start> and we say on open listener so let's just check it out make sure <end>
<start> equal to 200 if we got some sort of an error so we're going to say <end>
<start> we're gonna call this our location set that equal to new geo point and <end>
<start> to show you that okay let's copy and paste this and this <end>
<start> you guys are on windows it should be under the windows tab and right <end>
<start> onclicklistener so we're going to say new tab dot set <end>
<start> important because obviously we're missing something already but i'll <end>
<start> a road view or a street view and it's going to look like that again if we <end>
<start> but everything else grab that cut it and then go into the graphics surface <end>
<start> add an ad below our second button again this is our layout here we're just <end>
<start> say find view by id just like that find view is capitalized by <end>
<start> getting passed back and this is actually if i go back into the open <end>
<start> width and fill parent for height because we're going to use weights um so <end>
<start> surface holder so tight and we're gonna call <end>
<start> of our canvas and then it's going to you know start back at zero so i mean <end>
<start> gonna do now is basically i'm gonna go to the place where i downloaded this <end>
<start> or something some other kind of reference in here for example we <end>
<start> this equal to be our app widget ids and we're gonna set this equal to b i <end>
<start> took the person to go from start to stop and then we're going to say our <end>
<start> this oncreate method so our whole class can use it so again we're just going <end>
<start> to say our l equals relative relative layout find view by d r dot id dot <end>
<start> say sd there and define the variable above and then we can do sd dot open <end>
<start> we have that method within that class called get information that's going <end>
<start> basically all we have to do now is get rid of that error because again if <end>
<start> that we worked with that with widgets as well so what we're gonna do is <end>
<start> the emulator but if not i'll show you guys on my phone in the next <end>
<start> to show you that okay let's copy and paste this and this <end>
<start> like variable and we do that by parsing and so we're gonna do is we're <end>
<start> you guys want to make this method be called that's going to return a <end>
<start> say how we're going to set our adapter for here we're going to make it be a <end>
<start> create the method bacon and eggs so we're going to click that and as as <end>
<start> the internet so we're going to go down to our permissions and we're going <end>
<start> so just make sure you save the manifest close that and we're still gonna <end>
<start> it's all kind of squished right here but we have a scroll view for the most <end>
<start> and that's going to basically help us to walk through setting up a google <end>
<start> layout that has a seat bar and that's under the form widgets and it's <end>
<start> concept but we haven't really i don't know if we've created a class <end>
<start> xml ns ads equals and then we have to put in http colon forward slash <end>
<start> is within this statement and then we're going to say else just like we <end>
<start> is going to do so we're just going to say android layout width and we're <end>
<start> have is one tek textview a button and another textview so again nothing <end>
<start> used for now what we need to do is we need to add some sort of method <end>
<start> here and a view of some sort and if you here and a view of some sort and if <end>
<start> for as for now we're just saving the data so hopefully that made some sense <end>
<start> create this tab host to be kind of a a variable we can use within <end>
<start> hopefully you know it's kind of a repetitious enough where you <end>
<start> manifest like we've done before i believe so it won't rotate but let's <end>
<start> travis thanks for your support something like that maybe and then <end>
<start> classes activity this again is where we kind of set up our question for the <end>
<start> person carry the backpack now so we're going to say person which is our <end>
<start> dot parse int and that's just going to parse information into an integer <end>
<start> is so we want our splash to be an activity so what we're going to say <end>
<start> android layout width and we're going to set that equal to fill parent <end>
<start> forgot about it so just uh you know we're gonna get into that in <end>
<start> just set up our viewport we set up like you know what where we want it to <end>
<start> it's kind of a string reference and again we're say android content dot <end>
<start> get some sort of map it should work and then we can sign this to the <end>
<start> it and then we just apply our theme by going theme dot light for example <end>
<start> this item and also as well you can do android alphabetic shortcut equal <end>
<start> little bit more about the app widget provider and make sure you check <end>
<start> then we're going to go over to the website where we got our key and <end>
<start> we've used a few times now i believe and we're gonna say context dot <end>
<start> say again we have to import the media player class as always so we can use <end>
<start> radio group and then we're going to add also another textview called test <end>
<start> we're gonna go with it and then just hit create a video whoops and hit ok <end>
<start> say ads and then ad unit id so make sure that spoke correctly and we're gonna <end>
<start> class even though it's a little bit more complicated it's kind of harder <end>
<start> the downloads folder so we need our file to kind of reference which folder it <end>
<start> and we're gonna say on click listener and just hit enter and it sets it up <end>
<start> to try to do something if it can't do that or it messes up we're going <end>
<start> android title checkbox and android and we can set this checkbox if we want <end>
<start> the canvas what we're gonna do is just draw our ball to the screen so or to <end>
<start> hit update create some kind of database with the name and the hotness or <end>
<start> the bundle i was kind of messing around with this just now as my video <end>
<start> click and right here is package explorer and then we can just drag and drop <end>
<start> it's true we're going to make it our web view go forward and can you guess <end>
<start> and then we say put extras because we're going to put some extra stuff in <end>
<start> the http get command and we're just going to say get and this is equal <end>
<start> going to be a response so we're going to set up http response we're going to <end>
<start> just creating a regular activity where we set up an intent and we just <end>
<start> previously not much different but a little bit so within our manifest <end>
<start> resource and then we're going to access where we set up our preferences <end>
<start> reference to the check box and i set the onclick listeners by implementing <end>
<start> class the graphic surface class can use those values so if we paste that <end>
<start> and we're going to say basket dot get string and then we just have <end>
<start> we're just gonna hit paste equals null and then we have to surround this with <end>
<start> we're going to set up our cases two cases the b so basically we're giving <end>
<start> that's again why we want to use the overlay class to handle some of <end>
<start> whoops or pinpoints and we're gonna set <end>
<start> interrupted air i'm sorry interrupted exception what i was doing that's <end>
<start> we're just going to say final static string and we're just going to call <end>
<start> we did with onclicklistener the difference between on touch <end>
<start> the http forward slash forward slash wwe new boston or something like that <end>
<start> so we're gonna do is we're good um again just a to highlight we're going to <end>
<start> nonsense but all that craziness so what we can do is basically i show you <end>
<start> to an xml reader so we can read some xml stuff so we referred to the sax <end>
<start> have some trouble setting that up for the most part i've gotten <end>
<start> file and we're going to call this http example or e^x something like that <end>
<start> overlay item something like that and we're going to set this equal to a <end>
<start> catch exceptions for file not found and file our input output exception and <end>
<start> back to preferences edit text has travis saved within our application <end>
<start> if it's button set picture or take picture i'll do this method within <end>
<start> brackets like that and we're going to hit this equals and we're going <end>
<start> above our on create method called show results and we also need to <end>
<start> set that up in a second and then we also have to pass in which notification <end>
<start> and we're just going to set this this checkbox id'd it something like <end>
<start> and we're going to say basket dot get string and then we just have <end>
<start> going to say set up a string called display we're gonna say display is <end>
<start> called shared preferences and if we couldn't do that we're going to <end>
<start> so i don't know if you guys want to leave a comment just wakelock <end>
<start> and then we're gonna say jessica alba is and then startactivity perfect as <end>
<start> accessible to everyone for the most part public void meaning it's a method <end>
<start> than we did previously and we just need to change our constructor to cube <end>
<start> is go into our on create method and we're gonna say set content view to to <end>
<start> to use this color thing we're gonna do that within our on surface create <end>
<start> sorry and there we go so that's it for this <end>
<start> within quotations we're going to say http ford slash forward slash wwm <end>
<start> to do is with this method is looking to return something so instead of <end>
<start> import both those and what's up our references now are confirm equals <end>
<start> update bar so we're going to work with integers i'm not sure if i'm <end>
<start> going to introduce a few new items within the xml layout so we're gonna <end>
<start> what we're gonna do in this tutorial is basically set up our handling xml <end>
<start> final x - are starting x and that will give <end>
<start> basically our what we're checking here we're going to say if equals center <end>
<start> this onclick method again these two brackets and when our application <end>
<start> if you want so again we're just going to set up an ad view type instance <end>
<start> text and you guys are pretty familiar <end>
<start> we're gonna pass in the context for this and that's just gonna create a new <end>
<start> going to flip through them anytime we click on it so here's our first <end>
<start> just gonna scroll up to where we said get data before because this is kind <end>
<start> kota for and the next tutorial will kind of setup it what we're gonna do <end>
<start> along for our package name but we're just going to call this google maps <end>
<start> the file exception our input output exception so again it just prints it <end>
<start> going to copy that link and what we're going to do now is open go back <end>
<start> familiar they're thinner on create method we might say client it's equal <end>
<start> we're saving a string so we're going to say put string and within its <end>
<start> to our sqlite example xml and just all the references and all that good <end>
<start> gonna set this equal to new notification and then we're gonna refer to <end>
<start> kind of out of order here but we probably want to do like a try and <end>
<start> text view gotta import text even though we're in state x dot set text to <end>
<start> start with so when they do the click which goes through this on click <end>
<start> whoops equals fx equals f y and now that will set our fx and f y values <end>
<start> implements location listener like that and again we just have to hover <end>
<start> to call this intent our intent and what we're going to set this <end>
<start> concept but so just keep that in mind if you don't see this maps we're <end>
<start> set this equal to a new string builder we gotta give it the initial string <end>
<start> because right now we're extending the view class and you that's <end>
<start> the sensor event listener we're also going to set up just our you know our <end>
<start> class but just to show you guys maybe leave a comment example setting <end>
<start> i just want to show you the asset folder how you can kind of define the the <end>
<start> we go into our surface class what we're gonna do is we're gonna implement the <end>
<start> some variables back equal to zero and kind of the easy way to do this is <end>
<start> tutorial i was going to do a kind of an overview but for the most part i <end>
<start> to a hot or not class where this method to a hot or not class where this <end>
<start> variables some for setting up something and we get that f or that string and <end>
<start> want to show you guys everything or not we're just going to set the content <end>
<start> first method we want to have is we won't be able to open our database so we <end>
<start> and basically the camera application is in our manifest we don't see it but <end>
<start> this code in our manifest so we're going this code in our manifest so we're <end>
<start> we want to do is set up our spect and kind of define what we want are <end>
<start> the new boston now this is where we're going to again create a workspace <end>
<start> called e get action is equal to the motion event dot action down again <end>
<start> to want our dialog to display now we can add some stuff this dialog source <end>
<start> time line and we're going to set this equal to a new json array passing in <end>
<start> you guys can add to your application for homework but again the most <end>
<start> set this equal to one and this is going to be an int and right now again <end>
<start> called shared preferences so we just need to set up a little variable for <end>
<start> is also going to be a text and not null we could have had this set up as <end>
<start> some layout weight to each text view so we're just going to add that <end>
<start> orientation of our linear layout which is set to sorry set to vertical i <end>
<start> will allow us to again read from this so we just hit dot and quarry excuse <end>
<start> that's getting passed in we're going to say if that's equal to result <end>
<start> methods that we can use for this class i should say over source <end>
<start> going to hopefully finish up this text voice activity what we're going to <end>
<start> saying 250 you probably just want to do 20 so alright i'll see you guys in <end>
<start> new boston and i'm just going to say key store hit enter and then we have to <end>
<start> method again get information and now we need to return some sort of <end>
<start> new string by clicking add a string and then we can set up a name call <end>
<start> plugin for eclipse and scroll down to plugin for eclipse and scroll down <end>
<start> green blue and integer for the most part and just rgb as well or you can just <end>
<start> it's gonna be itemized overlay and it's gonna be of the type overlay item <end>
<start> what we're going to set up if the toggle is set to true or if it's checked on <end>
<start> so our temperature is gonna be int and we're gonna call this temp and you <end>
<start> this default value so we're going to say something like conant load kind of <end>
<start> run it make sure that works again our or this button get address won't work <end>
<start> might get into the animation dependent i mean the java how to you know use <end>
<start> want to say dot dot dot that's basically the same thing as an array for the <end>
<start> is letting our letting our media scanner update so the user can access <end>
<start> kind of create some more entries we're going to say <end>
<start> first plus starts so what we're going to do is when we say go back to our <end>
<start> be null now we basically have everything set up for our little for our <end>
<start> store and in space and in our path so <end>
<start> touch on touch method basically it's returning false so once it gives us <end>
<start> database underscore table and then we're database underscore table and then <end>
<start> creating this so we're going to say new array <end>
<start> something called a geo coder and we're gonna do that within this get <end>
<start> part from our file input stream which has the length or this many <end>
<start> activity and that will they'll just open up our sql view or we're going to <end>
<start> edit text within a subclass again so what we're going to do is just <end>
<start> that and we use the insert pinpoint where we just add an overlay to let <end>
<start> it and then we just apply our theme by going theme dot light for example <end>
<start> that ball to the screen so we're gonna say bitmap ball and then within our <end>
<start> methods such as content equals and then we can say equals within parentheses <end>
<start> use i didn't really explain but that's gonna be like our main context and <end>
<start> we're gonna do is we're actually just gonna say create a new method <end>
<start> we're going to do in this tutorial we're basically going to learn about <end>
<start> label those however you want those identifiers again you have to <end>
<start> according to how far it zoomed in how we're like scaling and all that stuff <end>
<start> onclicklistener and we create a string builder to <end>
<start> variables so the first thing that we're going to do is we're going to <end>
<start> i don't get any errors again i know that's guys i know this is <end>
<start> your friends hey man if you have a button you need setup i'm your man <end>
<start> call this hot or not db something like <end>
<start> where we see all of our activities that we applied for you can see it <end>
<start> layout you know padding is good for cleaning <end>
<start> emulator or not might have to be on the actual phone and again just the <end>
<start> did it work and we're going to set it equal to be true to start with and <end>
<start> that we just received so we're going to say data result all right what was <end>
<start> i don't get any errors again i know that's guys i know this is <end>
<start> that's what i'm going to show you guys probably in the next tutorial <end>
<start> you t save as and there we go we have that set up now the other thing we <end>
<start> and then finally what we're going to do is and then after this for loop <end>
<start> get we're going to call this our request we're going to do we're going to <end>
<start> do it but the method is called start activity i believe that's from <end>
<start> but basically a way that we can surpass that is using something called the <end>
<start> android layout height is going to wrap the content the only other thing <end>
<start> that we're going to solve in the next tutorial all right so we're going to <end>
<start> really probably the best thing but just to show you guys what it does i'll <end>
<start> we're going to do is we're going to set this equal to open file input instead <end>
<start> a string of some sort so again we set up our string and the first tutorial of <end>
<start> do is we're just going to refer to this as drawable m4 marker and also a <end>
<start> config and we're gonna have our edit text also just be et widget <end>
<start> preference of some sort so the first thing that we want to do is we want <end>
<start> over to our xml data collected class and that's just gonna store some stuff <end>
<start> is fine and we're going to set this equal to our response which is our <end>
<start> we're ruining this tutorials we're actually gonna get some information <end>
<start> ford ford slash two forward slashes and we can say saving data via <end>
<start> url and we're just gonna call this website this is gonna be equal to <end>
<start> config and we're gonna have our edit text also just be et widget <end>
<start> is going to free up our map from being locked as is so we're going to <end>
<start> we get this to work doesn't crash our emulator again and again so <end>
<start> mounted read-only so that way we're gonna be able to read the data but <end>
<start> parent right so we're going to set up to the right of basically the textview <end>
<start> software we're gonna install is a clip so going to google type in eclipse <end>
<start> say in the onclicklistener to flip what we can do that anyways but we can <end>
<start> just going to show you some of the functions or methods that the <end>
<start> this so we're it's gonna be a float buffer as well since we're working <end>
<start> implement methods and here's all of our methods for a handler or a <end>
<start> pretty good but what's happening is again it's pushing that toggle <end>
<start> tools in an export signed application package and we're going to click <end>
<start> going to set up our if we're going to say values again you can't <end>
<start> our touch event of our overlay to our actual map activity or actual <end>
<start> delete samantha so we're just going to delete samantha so we're just going <end>
<start> set a content view to our configuration layout so set content view in our <end>
<start> before well can't spell and then we're going <end>
<start> and they kind of walk you through everything first we're just going to <end>
<start> graphic or something and then you can still slide it up check some <end>
<start> two plus and then in quotations we're gonna add our comma pretty simple <end>
<start> text which we just looked at and forgot already called save file dot get <end>
<start> going to return a string so that's what we're going to return is the data we <end>
<start> for now and now for what this uh might bring back surface class what we want <end>
<start> some processing speed so it's not checking every time our sensor <end>
<start> whatever i'm actually going to introduce you guys to is something called a <end>
<start> here's our application bracket and within our application bracket we <end>
<start> to set up an if statement if our status is equal to 200 then we're going to <end>
<start> return some data to us so we're going to do is we're going to right click go <end>
<start> activity now i looked up the android developer page this is a great <end>
<start> and then it's pretty much good to go if not it will just ask you to <end>
<start> ad id which i'm just making up here and that creates again the ad for us and <end>
<start> good review here async task and then we want a string reference anta juror <end>
<start> values so we're gonna say x equals y equals sensor x equals sensor y <end>
<start> everything else so we're going to say android weight sum equals 100 and <end>
<start> sit onclicklistener real quick again this class is going to implement <end>
<start> a new spec so we're going to say tab spec and we're going to call this <end>
<start> you guys probably should do anytime you use this load url method i know <end>
<start> infrastructure of this thread set up i mean it's kind of a general set up <end>
<start> call this display when those part that's decent name whatever and <end>
<start> whole class we're going to say new my bring back and then we're going to <end>
<start> imports right click add a again a on create method so nothing new there <end>
<start> so just make sure you save the manifest close that and we're still gonna <end>
<start> do is we're just going to refer to this as drawable m4 marker and also a <end>
<start> an overlay item we're just gonna call this item <end>
<start> application looks like and just get <end>
<start> little bit more depth than what we have worked with previously as you can <end>
<start> up so then we go outside of this bracket right here then what we do is then <end>
<start> everything's okay if you guys remember again when we worked with bundles i <end>
<start> boston apk just going to hit that and open <end>
<start> time it's going to move to the next position as long as it's not <end>
<start> so again we're just going to right click go to source override implement <end>
<start> forgot we're just gonna say else and then finish as <end>
<start> it's true we're going to make it our web view go forward and can you guess <end>
<start> gonna be pretty much the same or it is gonna be the same and again that's <end>
<start> random object called our set this equal the new random and then we're all <end>
<start> call our button again we have to import the button and set equal to or <end>
<start> referring to our http example class dot mentor dot this air some sort <end>
<start> i'm just gonna say audio manager a am something like that and what we're <end>
<start> collected initially equals null when we hit our load button and then we're <end>
<start> going to call this i or we're going to set this equal to new intent and again <end>
<start> here's our onclicklistener nothing too new hopefully you guys can set that <end>
<start> imports right click add a again a on create method so nothing new there <end>
<start> web service or i'm sorry a webview called d and we're going to call this <end>
<start> class and we're going to say extends comp or overlay and then we have <end>
<start> we're gonna do is we're actually just gonna say create a new method <end>
<start> parent right so we're going to set up to the right of basically the textview <end>
<start> that integer is being passed in we're gonna just set one method up so we <end>
<start> to this collected string that we read for the most part so now it's going <end>
<start> we're gonna call that c as well or whatever you guys want to refer to <end>
<start> class and we're going to say extends comp or overlay and then we have <end>
<start> thing we want to adam have is a title so instead of saying text equals <end>
<start> insert endpoint or something and we want insert endpoint or something and we <end>
<start> and what this is going to do is there's two commands true and full or <end>
<start> we're going to say the android layout width is equal to your mom which will <end>
<start> is go into our on create method and we're gonna say set content view to to <end>
<start> message we're gonna set this equal to i told you pick an option man so <end>
<start> android name is equal to android dot up wit again dot provider and we're <end>
<start> to define a button as well because we two buttons and ads button <end>
<start> here so we're going to say if location is not null then you know we're <end>
<start> we want to set up our class and don't worry we'd only create a new xml <end>
<start> some processing speed so it's not checking every time our sensor <end>
<start> gonna say new hot or not and again pass in the context of this class and <end>
<start> can read this it's all that good stuff and hit generate api key and here we <end>
<start> because we're taking up everything else that's available here and then <end>
<start> probably a few blocks away but just as every time that unchanged method <end>
<start> the actual specific you know whatever dot jpg or something like that p&amp;g <end>
<start> resource folder we're going to click that and then we're going to say <end>
<start> running it's equal to true and that's kind <end>
<start> we defined it within our widget stuff xml or provider here and <end>
<start> want to make sure you change that otherwise it's not going to work <end>
<start> you can just refer or set up a title a reference and then just go into <end>
<start> back to our default image up there so that's something we have to get rid <end>
<start> it is and what we're going to you know what we're going to do but here we <end>
<start> on the super method we're gonna say bound center and then we're gonna add <end>
<start> we're gonna also also going to be allowed to edit that row information <end>
<start> we call it fos and what we're going to do is again we can just save <end>
<start> the x direction or the x axis and then again we're just going to say sensor <end>
<start> that good stuff so we're gonna refer to that a little bit we also get an <end>
<start> this equal to again just a new http get method and then or instance of <end>
<start> onclicklistener because it's i mean it's kind of a good review because we've <end>
<start> webview client as well so now what we want this class to do is we're <end>
<start> that we will create which will prod just be one yet make sure you select <end>
<start> basically our apk file on our developer page here and if we try to go to <end>
<start> as an int because over here in our gen folder our our java just to open that <end>
<start> your application making it look a little bit nicer as well as i know like <end>
<start> we're going to just set up a string variable called data return <end>
<start> we're still going to be working with our google maps activity what we're going <end>
<start> and then what we're gonna do is we're gonna go down here within our on <end>
<start> going to do is go within this on create bracket below the set content view <end>
<start> allow our our slider or handle the work allow our our slider or handle the <end>
<start> gonna say int max v and we're gonna set this equal to our audio manager dot <end>
<start> it so now we have text to text and we go into a graphical layout they're <end>
<start> and this time we're gonna set it equal to the gl 10 class dot gl on your <end>
<start> layout width equals fill parent and android layout height is going to <end>
<start> text view of our first tab so we're going to say show results <end>
<start> going to hit finish and there we go we have blank slate to work with we're <end>
<start> the context that's being passed in which we called context so that's all <end>
<start> our key value again our key our row id and that's basically going to be <end>
<start> going to say int for integer and camera data and we're actually going to <end>
<start> probably gonna blur out my information because i'm sure it's against the <end>
<start> everything's okay if you guys remember again when we worked with bundles i <end>
<start> for you guys and match parent and then we're also going to just copy and <end>
<start> this is the image view of our xml and we referenced it in java and we called <end>
<start> so we're just gonna say and and we want to make sure a request code or i'm <end>
<start> going to create that file name above our classes right here with our edit text <end>
<start> have different pictures in each view and what we can do is we can say instead <end>
<start> much the same concept there so get hotness we can call it and again we <end>
<start> height as well and then we're going to use the weight method that <end>
<start> class within this class we can still have access to the x and y which is <end>
<start> going to set it to something like 100 because 100 is pretty easy to work <end>
<start> do is we're gonna create a file input stream now so we're gonna just say <end>
<start> gonna say gl triangle dx i'm gonna call it try something like that then <end>
<start> implement methods and there we go here we have everything set up for the <end>
<start> come up with shorter variables what am i doing <end>
<start> what we're gonna do is we're gonna say new alert dialog and then we say <end>
<start> and negative 1 in the z direction and again we're just gonna call this point <end>
<start> gonna basically be whatever is our data that we saved and then we have <end>
<start> tutorial we're going to finish our list activity where we set up this method <end>
<start> all that good stuff so we're gonna say notification i call this n and <end>
<start> going to type that in hit enter and this is what it looks like this is what <end>
<start> reference so what i want you guys to go to or where i want you guys to go now <end>
<start> this just response as well or read that response and basically this is the <end>
<start> to say not no comma space and basically that's going to say you know it's <end>
<start> implement the select or the item selected listener and again we <end>
<start> gonna return our name so again just to quickly talk through everything <end>
<start> they're just so cool so then we hit dot and flag fullscreen flag <end>
<start> since we're reading xml we're just going to create an xml reader and we're <end>
<start> to an xml reader so we can read some xml stuff so we referred to the sax <end>
<start> here from our helper that's that's writable for the most part so <end>
<start> set this array type array adapter type to be string because we're working <end>
<start> so string name equals basically our sql name which is our edit text get text <end>
<start> tutorial how we can connect these pretty much the most efficient way so we <end>
<start> is again reference make a reference or a connection within our first bracket <end>
<start> this and you know paste it here which again is our key reference and it's <end>
<start> textview that we set up which was called http stuff i believe we're just going <end>
<start> pretty much this tutorial let me talk through everything that we've done <end>
<start> views so we're gonna say remote views we're just gonna call this v4 like <end>
<start> and then in the next tutorial we'll get rid of the other air as our <end>
<start> set it up for you and if it didn't you don't retype it out it should give you <end>
<start> and just say add view and then what view are we going to <end>
<start> where hopefully we're gonna finish our widget widget application don't wanna <end>
<start> again referring to the android dot app widget dot action dot uppercase <end>
<start> guys you learned about the module or the remainder and also these d <end>
<start> do in this tutorials we're gonna relate to where we touch on the screen <end>
<start> is we're gonna create another file we have one file called path but <end>
<start> starting y so we're gonna say starting y minus plus i mean half the height <end>
<start> again just a quick review here what we've done in last tutorial we <end>
<start> variable so we're going to say hotness and we're just going to say like <end>
<start> sure those radio buttons work and there we go again i'll explain that a <end>
<start> method called on pause so this is where we're gonna kind <end>
<start> real quickly and this one's going to be public so other classes can use <end>
<start> this on touch method it's basically the only thing that's kind of going as <end>
<start> and it's fully functional so i will catch you guys in the next tutorial <end>
<start> negative ratio that we set up our right value our ratio our bottom we're <end>
<start> so we're going to do is we're going to say custom button right in here <end>
<start> dot-com 4/1 ford / statuses for / user underscore timeline dot json so <end>
<start> android sdk avd manager go to available packages android repository and <end>
<start> then we're going to use a method that's going to get the system service <end>
<start> update media update files for the user to use something like that so <end>
<start> as well so gl gl disabled and again the gl 10 class dot gl coalface so there <end>
<start> called something something called a typeface so we need to do a <end>
<start> pause unpause and we're gonna say on resume so now what we can do is we <end>
<start> concept again we're all we're doing with this projection is relating our map <end>
<start> we're also going to do that within the stop event so we're going to say <end>
<start> class name that we want to open and so we're going to say open class dot <end>
<start> add unimplemented methods we're just going to click that and then if <end>
<start> can be a little more customizing your application we still want our handle <end>
<start> been a while though go ahead so now we're going to set <end>
<start> what's called display now we're just going to delete <end>
<start> downloads for the third one and directory pictures for this <end>
<start> but yeah resume function is not work and we can pan around our map so that's <end>
<start> now equal to our view and there we go i mean we're pretty much done with <end>
<start> and again the difference between the media player and soundpool is the <end>
<start> so as it is just clip the video save some time but basically i just said <end>
<start> giving us that data we can use this variable that they called <end>
<start> going to hit plus and then maybe a spacing quotations to give us a <end>
<start> want to do or command shift f if you guys are on a mac so then just format <end>
<start> if i can get it gl enable client state and it's gonna refer to the again gl <end>
<start> scroll down to one or again it's not in the list list activity it's under <end>
<start> into a long type variable now what we want to do is again we're just gonna <end>
<start> you want to click on that as for macintosh what you guys want to do is <end>
<start> then we also do public would resume pretty standard here <end>
<start> on location change on provider disabled on provider enabled and on <end>
<start> going to do in this tutorial is a theme pretty simple tutorial pretty quick <end>
<start> go into a graphical layout and you're like where's that other textview <end>
<start> and we're going to say basket dot get string and then we just have <end>
<start> reference it so what we're gonna do is we're gonna say if address dot size <end>
<start> lights the sound vibration all that good stuff so we're going to choose <end>
<start> just created which is right here so control v that's gonna <end>
<start> now what we're going to do is we're just going to use the shared preferences <end>
<start> this equal to new geo coder and within the parameters we're gonna say get <end>
<start> just click on the android and all sorts errors are coming up and now what <end>
<start> first plus starts so what we're going to do is when we say go back to our <end>
<start> is by the environment we're gonna get some stuff from the environment <end>
<start> can even say sql light example dot this so now what we can do is we can <end>
<start> browser application and so we're going to say our our spec dot set content <end>
<start> we're going to do what's ever within here and also case our id dot <end>
<start> variables up here in the reference to the xml we created a toggle <end>
<start> for the next few tutorials if you choose so what we're gonna do is we're going <end>
<start> the http get command and we're just going to say get and this is equal <end>
<start> define what this is running variable is which is gonna be boolean so we're <end>
<start> i call this location manager and that's just going to help us manage <end>
<start> voice and for our listview say lb voice return so again nothing <end>
<start> something and what we're gonna set this canvas equal to is our holder and <end>
<start> we're gonna do is we're going to say get max address line index and that's <end>
<start> to call gl capital g capital l example and that's going to be our main <end>
<start> intent yet but we're going to define one real quickly and real simply same way <end>
<start> dull lately they haven't been is is awesome but we will get into <end>
<start> or whatever view you guys want we're going to change this add one button <end>
<start> application see what what happens for the most part and also maybe one <end>
<start> we're gonna call this notification manager never just call this n/m <end>
<start> do is we're going to set up a list view that our whole class can use so <end>
<start> display and it has the reference for basically that text within our xml so <end>
<start> id forward slash whatever id of that button was so that was a id bsa so id <end>
<start> name that we need this this activity to have because again this is going to <end>
<start> once we release so hopefully that concepts sticks in <end>
<start> going to create a new text view so we're just going to say text view text <end>
<start> all we have to do is say start activity and we're going to hit a because <end>
<start> android title checkbox and android and we can set this checkbox if we want <end>
<start> what we're going to do first what we're going to do is set up an intent <end>
<start> surface class so just get that set up and we're good to <end>
<start> the x direction or the x axis and then again we're just going to say sensor <end>
<start> we're gonna go into our android manifest add a few more permissions so we can <end>
<start> like productivity and we're gonna give app description now the app <end>
<start> to say load url the same method and then we're going to say url as well <end>
<start> and this is going to again we have to import the button and i'm also going <end>
<start> activity but again just to review it's pretty simple we're just gonna create <end>
<start> and now what we want to do is we basically want to create a string <end>
<start> take a picture but what alright well hopefully we can <end>
<start> string that's going to convert our file into a string and offer <end>
<start> whatever let me pull this over can you go into finder documents android <end>
<start> follow along with the surface view but that's what we're gonna want to <end>
<start> text view so we'll do that above our <end>
<start> construct something from the information that it gets so what we're going to <end>
<start> here it's at six right now and if we switch it over it kind of <end>
<start> we're going to go in and add two buttons one to access the phone and actually <end>
<start> string then we're just going to call this like string data something <end>
<start> that by going to start on windows and then cmd or on mac <end>
<start> below again this is just another constructor this time what we're <end>
<start> gonna do is we're gonna set up our byte buffer i know it's kind of <end>
<start> say add unimplemented methods and down here is our online click listener <end>
<start> to access our file name so we're going to just say file name and then comma <end>
<start> stop variable is equal to again system dot current time and there we go i <end>
<start> say comm google dot dot add activity so make sure your spelling is correct <end>
<start> i'll explain in a second we're going to say cursor our cursor that we set <end>
<start> graphical master like myself you probably want where you're going <end>
<start> this this application so for the most part so again this application is <end>
<start> again dot content dot intent and again like if you guys ever want to build <end>
<start> we're going to say file name like this so basically we're going right to <end>
<start> gonna say a gl 10 dot gl underscore float and the stride with zero and <end>
<start> sure you're within this part of the activity line and then we're just <end>
<start> into the xml and copy well actually we're just going to work with <end>
<start> to refer to our string builder which we've just called url and we're <end>
<start> have that working but the problem that we may be having is again this is <end>
<start> going to do is we're going to go into eclipse and for windows you want to <end>
<start> lastly just a regular button let's say set <end>
<start> our on pause to do is basically we're gonna destroy we're gonna destroy <end>
<start> button just be widget button widget open because this one's going to open <end>
<start> request code sorry it's equal to check or is if it's equal to 1 1 1 then <end>
<start> that checks out as well but what we're gonna do is we're just gonna set up <end>
<start> and then we just hit our go button and it's going to load up that website <end>
<start> an overlay item we're just gonna call this item <end>
<start> modify that entry sql get information again that's going to just return <end>
<start> we're doing is we're just passing in the request code and all that good stuff <end>
<start> class name which was xml data collected and we're just going to call this <end>
<start> define the rectangle so what we can do is say middle <end>
<start> implement methods and here's all of our methods for a handler or a <end>
<start> trying to save some time for you and not type that out hopefully as if you <end>
<start> our button android and then we can say our button android and then we can <end>
<start> one and then a colon and then a break statement and then we can also <end>
<start> context that's gonna return the context of the base class and then we're <end>
<start> the menu we're gonna set up this to be the white or the light theme so <end>
<start> gave that added reference as well and we're just going to set up a <end>
<start> builder and we're gonna say url within the parentheses so basically what <end>
<start> to this in the next tutorial so i'm just gonna say next tutorial so we're <end>
<start> we're going to do what's ever within here and also case our id dot <end>
<start> toriel's go add our compass and now we'll have it an overlay that <end>
<start> and then we're just going to finish it by ford slash less than sign and <end>
<start> and lowercase so we're going to say display and i mean pretty much all <end>
<start> start reading all of our entries of our database for the most part so what <end>
<start> quick layout nothing new again just right-click new android <end>
<start> android permission internet and there we go we're going to save a project <end>
<start> method for the most part nothing too new <end>
<start> layout what we're going to do is we're going to go over here into our <end>
<start> explosion and this is gonna be an int okay so let's let's set this up <end>
<start> task so we're going to say add unimplemented methods and it <end>
<start> that through the window manager which again is a class manager dot <end>
<start> dot travis and then dot and then basically your class name in <end>
<start> go forward so again that's boolean checking if it's true or false and <end>
<start> kind of define what we want this text paint to do so first thing let's <end>
<start> top half so we're just gonna go 3 7 4 and this is what i was talking <end>
<start> is we're going to go into the java and we're just going to set that <end>
<start> equals and for example what we're going to do is just copy this and go to <end>
<start> or something because there's an actual class called menu from the android <end>
<start> boston travis dot starting point and then <end>
<start> well or we're just going to say else because this will be everything else <end>
<start> creating this project here so again you guys can refer to it and your own <end>
<start> to just create a list of overlays now again just well we have to define <end>
<start> and we're gonna go to this android folder and set up an android <end>
<start> increment by 1 now i'm not sure if we've done for loops yet or not it's kind of <end>
<start> clicked this cheese variable is going to equal starting point the fifth <end>
<start> emulator and see as you can see it's given us an error it can't find <end>
<start> know variable up there as well we're gonna say database version and <end>
<start> going to say save file standard stuff here so hopefully we won't getting <end>
<start> called set content view and within the parameters we're going to resource <end>
<start> space degrees actually so i just thought i'd show you guys this before we get <end>
<start> url we're going to add to it is a question mark screen underscore <end>
<start> we're going to do is we're going to switch over and just make sure we have <end>
<start> find those three events as well and then what we have to do is just say <end>
<start> to string and it's whoops two strings like that sorry and that's just going <end>
<start> com dot the new boston dot travis and that's just gonna be <end>
<start> supposed to be wrap content again this will just wrap the content of our <end>
<start> or whatever find view by add a r dot id dot listview voice and we're going <end>
<start> alias that we saved within our key store and then we're gonna say space - <end>
<start> click on it and it says you've created a new tab and then we can click on <end>
<start> say public void and we're gonna say insert <end>
<start> say our main dot this which is referring to the context of remain class and <end>
<start> we're going to perform an action in this action all we're gonna do is a for <end>
<start> variable and then we can reference that variable within these brackets so <end>
<start> going to just select one of these smaller ones <end>
<start> just gonna say if text-to-speech is not equal to null we're gonna kill <end>
<start> our thread because we need to set up a thread we're just gonna set this <end>
<start> then paste equals and then some kind of a unique number oh and also we say <end>
<start> this item and also as well you can do android alphabetic shortcut equal <end>
<start> is something called a frame layout like that and the frame layout there's <end>
<start> gonna reference that as well first thing that we need to do is create an <end>
<start> that and this is going to be equal to new get method e^x and then we can <end>
<start> start off this intent that we've been kind of defining so there we <end>
<start> little bit more sense we're gonna say e extras then we're going to <end>
<start> created our new class by right-clicking on a package name and then a new <end>
<start> like that this is going to be equal to our url which is our edit text <end>
<start> this initialize method that just kind of sets all the references and sets are <end>
<start> to the windows tab for mac you want to go to your clips tab and then <end>
<start> passed in so we're going to say got basket dot and you can say get <end>
<start> we're returning a string and we're going to say we're going to call this <end>
<start> and then we're setting the gravity within java so click our text play <end>
<start> we're going to create this method as well so i'll see you guys in the <end>
<start> instead of saying set content view we're basically going to setup our <end>
<start> go we basically have our widget configure and this is what's <end>
<start> here to encompass our whole class and then we just have to close off our <end>
<start> and then we're going to say is a greater than sign and string spelt like that <end>
<start> for class id r dot raw dot explosion and then we're just going to do mp dot <end>
<start> so we're going to add that real quickly so we're going to add that real <end>
<start> can't spell dots decode resource and then for again for this one we say <end>
<start> know this is quick overview but our dot layout domain which r stands for <end>
<start> the media store package or class then we hit dot and we have some choices we <end>
<start> set up within our constructor for our class so we're just going to say <end>
<start> travis thanks for your support something like that maybe and then <end>
<start> that bridge / bridge over to the xml we're going to say button find view <end>
<start> application and now we're going to get application and now we're going to <end>
<start> source again override implement methods and not under it's not under a <end>
<start> something like media player mp equals media player dot create and context <end>
<start> going to set up the language that we want it to to speak in so what <end>
<start> of our file input stream so we're gonna say file input stream dot available <end>
<start> going to do much but we're just setting it up for the most part again <end>
<start> data dot this text file has been saved and duration toast dot long length <end>
<start> what that has to offer and it's going to go into <end>
<start> parameters we're going to set up our dialog so what we're going to do is <end>
<start> can set this equal to new edit text again nothing new here for yes et <end>
<start> going to be equal to fill parent and android layout height can fill <end>
<start> to our main class up here called internal data and we're going to <end>
<start> finish off our if statement like that so make sure all our brackets are set <end>
<start> within the application brackets we need to set up both those classes one <end>
<start> layout and the reason i did that is because we're going to add in a <end>
<start> so if you guys ever get discouraged and you like mess up and like <end>
<start> can just make it up so we're gonna say entry and then we're gonna say <end>
<start> the root element for the xml file this kind of gives us a starting ground <end>
<start> like we set up all other types of intent tense for the most part and so <end>
<start> this maps one even though the maps isn't in this actual this and this project <end>
<start> best fits the given criteria so we're basically getting best you know the <end>
<start> and then it opens our camera activity what opens our camera activity we <end>
<start> time we deal with strings we're gonna say g-unit download that font cuz <end>
<start> key store and then we have to hit space - store pass and our password was <end>
<start> to the context of the class we're just going to say data dot this and then <end>
<start> within the constructor again so we're gonna say font is equal to <end>
<start> in this so again as of now this means nothing the computer is like <end>
<start> it's called public boolean on touch event and again this takes a <end>
<start> that let's set up some variables that we're going to use and they're gonna <end>
<start> and then finally what we're going to do is and then after this for loop <end>
<start> name dot set text and we're going to set it to our returned name and then <end>
<start> have set up to equal that string so again just http stuff and we're going <end>
<start> called camera data we're going to again set this up above our classes so <end>
<start> radio group and we're going to find that by <end>
<start> now that's telling you guys about now the first thing we need to do in <end>
<start> turn and then down below we're going to say return true and then semicolon <end>
<start> select bottom and do 10 density pixels as well and check that <end>
<start> that linear layout controlling those four buttons there so i'll catch <end>
<start> app widget manager and dot extra and that's just going to be basically <end>
<start> of set it up in a random place random color random size and random gravity <end>
<start> we're just going to use that and you'll see that in a lot of examples when <end>
<start> we're gonna refer to our xml reader now we're just gonna say dot set <end>
<start> text to be here and so we're going to say like something like what's what's <end>
<start> we're just gonna say p buff is equal to our pb buff or a point byte buffer <end>
<start> going to hit that and then after that we're going to say dot size when we <end>
<start> to context dot audio service so now we can you know mess around with the <end>
<start> is just right-click on your whole package go to run as android <end>
<start> imports right click add a again a on create method so nothing new there <end>
<start> painting or something so open that up and that's gonna start our eclipse <end>
<start> we're going to set this equal to a new xml data collected and i'll explain <end>
<start> refer to within this class so what we want to do is we want to say <end>
<start> here is where our publisher id is i'm going to block it out because again <end>
<start> just chilling there it's like hey guys uh no i'm i'm an intent and i'm <end>
<start> to set up an if statement if our status is equal to 200 then we're going to <end>
<start> going to have our ball move around on the screen when our sensor changes <end>
<start> all we have to do is say start activity and we're going to hit a because <end>
<start> happens if everything works properly it's going to close our file <end>
<start> client so we're going to say new our view client something like that <end>
<start> our button within our view there so button voice set that up at our <end>
<start> one seconds that's lap two fifty four <end>
<start> percentage sign d and that's basically going to give us kind of a <end>
<start> so we don't have to change that one and there we go we basically updated our <end>
<start> in google type in android adt hit enter it'll be this first link from <end>
<start> import both those and what's up our references now are confirm equals <end>
<start> going to be activity so we're just gonna say extends activity and we're <end>
<start> guys just copied so we have this key sort here and then we just say - <end>
<start> layout width equals fill parent and android layout height is going to <end>
<start> all that stuff so what we're going to do is we're going to go up to our <end>
<start> can say get column index and what this is going to do is we're going to <end>
<start> remainder for each of these at least for the seconds in milliseconds so <end>
<start> going to set the input type to be a password or the starred or basically <end>
<start> going to be the same concept we're gonna get passed in an int we're gonna <end>
<start> everything for the most part set up and so once we copy that all we're gonna <end>
<start> asking is hey can i just do something like map dot set <end>
<start> gonna set this equal to this just kind of like when we set up a button kind <end>
<start> string and then all we're going to do is we're going to say okay text to <end>
<start> now if we run a activity or application right now it's just going to show <end>
<start> and easy here a little bit easier we'll be able to move a little bit <end>
<start> link from oracle comm website hit this java se downloads and then then it <end>
<start> it's none of those options we're going to say else and then we can say <end>
<start> set our text view said our textview variable is called <end>
<start> going to you know release our way clock so again just go to override methods <end>
<start> that buffer so what we're going to do is we're going to say gl dot gl an <end>
<start> that and again we just use our edit text which we called shared data dot get <end>
<start> going to be public void set city and what we're gonna pass in to this <end>
<start> our extends the app widget provider because again this is a provider <end>
<start> here we're just going to say progress and since it is array we have to <end>
<start> i'll spin mess around with this so just going to fix it real quick your <end>
<start> that's what we're going to use we're just going to click this and within <end>
<start> know how to do this as well so we're going to say button because we have <end>
<start> have to have the same password or i'm not the same password but what if <end>
<start> bring back comm and in quotations and that should load up just like my <end>
<start> that and then create the import or import our bit my bitmap class so we <end>
<start> to a new gl surface view so pretty pretty default there and that's <end>
<start> we're gonna say is our thread is equal to null and i got this i kind of <end>
<start> and we're gonna add our widget adapter uh the new boston again as you can <end>
<start> and we're going to call this integer array i'm sorry and we've worked <end>
<start> do is say create constructor it might bring back that passes in you know <end>
<start> is going to be a table so we're going to within quotations we're going to <end>
<start> to the index within our arraylist so we're gonna say the index and <end>
<start> or actually if we click on our edit text our keyboard comes up then we do <end>
<start> say within our on click method after we <end>
<start> of what i wanted to show you guys and then one other thing that we can do <end>
<start> likely it's the same name so there you go we're going to call this password <end>
<start> draw it from that zero location so that should that should fix <end>
<start> we're going to set up a class variable called class or i'm sorry we're going <end>
<start> we need to go on to the manifest and give us the permission to use <end>
<start> gonna do is we're gonna set up our byte buffer i know it's kind of <end>
<start> a random number and now we can set up a case so we're going to say case <end>
<start> gl hint and we have to reference a target so we're gonna say <end>
<start> what's up guys welcome to your 43rd android tutorial for the new boss <end>
<start> layout here of what it looks like and oh layout here of what it looks like and <end>
<start> whatever the text is going to be i wasn't going to scroll to it but okay <end>
<start> google again and type android sdk basically the sdk has all these <end>
<start> have our parameters what we're gonna draw is our ball that we set up and <end>
<start> widget stuff or whatever you guys want to call that those other things had <end>
<start> height as well and then we're going to use the weight method that <end>
<start> need to set up our progress dialog is what it calls it so within this <end>
<start> style one so we're going to say style horizontal finish that <end>
<start> it that way so a good way to keep track of all of your action names is type <end>
<start> hear and see we again we can just you know mess with the music so <end>
<start> that we set up and this is probably still looking kind of confusing for <end>
<start> a white background and let's also add a bitmap that we created within <end>
<start> variables get set up so we're going to say bitmap actually let's do this <end>
<start> you know this should be can w equals can or can read can write equals true <end>
<start> xml and this is going to hold our print where we were going to put <end>
<start> reference so we can refer to it in java so we're just going to say id <end>
<start> we're just going to say final static string and we're just going to call <end>
<start> do is we're going to say we want to be on the x-axis so we're just gonna <end>
<start> accelerometer so let's you know go into activity import that and our sensor <end>
<start> save it and then we have this string array called list which is <end>
<start> when we first click so what we're gonna do with in this case we're gonna set <end>
<start> saying like see here we just deleted this and we say import but since i <end>
<start> going to define our intent up above our classes so we can use it in <end>
<start> to our audio manager and then we're just gonna say set stream volume and <end>
<start> content values and we're going to call this cv update something like <end>
<start> to copy that or cut that and paste it for if <end>
<start> a result nothing new there again we have our stop and our start time as give <end>
<start> new way clock as you can see it takes flags and a tag within the parameters <end>
<start> sensitive so if we did did right like that it's not going to work so <end>
<start> just going to set them up so we're going to say button and we're going to <end>
<start> screen here right after that first comma so this is our flags and this is <end>
<start> relate our drawable and our context so what we're going to do is just say <end>
<start> this doing background and we're going to say is we're going to create a for <end>
<start> and convert it so what we set this list up to which we call address is our <end>
<start> player dots create context this and resources are dot id dot i mean our <end>
<start> we're going to put a semicolon then we're going to say as long as i is <end>
<start> edit text the id and all that stuff for all these things so edit text just <end>
<start> the screen we're creating this green ball and when we let up this x and <end>
<start> sets it and then when our emulator goes off to its side such as let's see <end>
<start> then we also do public would resume pretty standard here <end>
<start> something something something you need to take it times 1e whoops times 1 e <end>
<start> project tab and go to clean now kind of clean our project out a little <end>
<start> to do that well we could do that right below the <end>
<start> open up the menu class that we set up hence as you guys noticed in the <end>
<start> client protocol exception input/output exception and a <end>
<start> then we're gonna hit a break statement and then we can say <end>
<start> we're going to do in this tutorials get our actual key for when we're <end>
<start> png so you know another way we can proof test is we can go up to our file <end>
<start> on progress update and it's going to take an <end>
<start> the shared preference class is just to save like these type of values <end>
<start> can or there's a few different action names that we can refer to when making <end>
<start> set up our directory path within our you know when an item has been selected <end>
<start> the button and we're going to say add one so let's see how that looks and <end>
<start> negative ratio that we set up our right value our ratio our bottom we're <end>
<start> we're gonna go above our class and we're gonna set this equal to static final <end>
<start> implements location listener like that and again we just have to hover <end>
<start> instead of relative or i'm sorry lin linear layout we're going to learn <end>
<start> simple we're going to say android padding and we're gonna put like 10 <end>
<start> to say ctrl copy and paste another textview we're going to call <end>
<start> that we just received so we're going to say data result all right what was <end>
<start> which notification we want to set up so we're just gonna say unique id and <end>
<start> want to use the android code called back round i wasn't completely <end>
<start> going to return our name if this works here so that's kind of the set up <end>
<start> resource folder we're going to click that and then we're going to say <end>
<start> we'll say spot-on oh no i hear a lot of british people say <end>
<start> going to change anything but what we can do is we can now add change <end>
<start> what we're going to do we're going to say our brow for our web view and <end>
<start> toast dot set length be short and then we know we have some sort of an air <end>
<start> this check what we're going to do is we're going to pull from the edit <end>
<start> our package name our project name go to write right click new android xml <end>
<start> what we're gonna do is we're gonna extends activity as always and <end>
<start> going to set up our if we're going to say values again you can't <end>
<start> statement and we're going to set up something called a switching case <end>
<start> just leave a comments a getting info about the widget that launched <end>
<start> setting text in this tutorial as well even though you guys already know that <end>
<start> quotations we put our action name and we import intent and we also just say <end>
<start> buffer instead of a float buffer since we're working with a short list so <end>
<start> for us and i'm just going to say new add view and then within parameters we <end>
<start> simple switching case that we're all so familiar familiar with get <end>
<start> data and that's going to create a json array for us and then what we need to <end>
<start> going to say set up a string called display we're gonna say display is <end>
<start> of our switch encase here and we're gonna say return false just <end>
<start> sensor manager and we're just going to call this sensor manager sm and <end>
<start> our whole class could use it so that's what we want to do and then now we <end>
<start> to hit set those up real quick i'm going to call one send xml and i'm going <end>
<start> bottom and there's the choice write external storage hit save and now we <end>
<start> errors that we're having so basically one of the areas that we're having is <end>
<start> for the get method using the http client we'll get into again that twitter <end>
<start> true it's on so there we go that looks pretty good let's set <end>
<start> familiar with oops so kind of a boring tutorial <end>
<start> collected variable which we called info and we're just going to say data <end>
<start> source again override implement methods and not under it's not under a <end>
<start> this variable so our whole class are all of our methods can use it we're <end>
<start> called display and that's the textview we were just talking about in the <end>
<start> we're going to say check and then it's gonna you know just set the text <end>
<start> do the pretty much the same thing for the get longitude so we're just <end>
<start> the gravity is currently set to center so now we're going to go into our <end>
<start> make sure that this listview item is the exact same as that new class that <end>
<start> now what we're going to do is basically have this crazy just set our gravity <end>
<start> set up a new paint variable and we're gonna call this text paint and <end>
<start> application launches so we're gonna call this starting point like that one <end>
<start> going there so first we need to set up for alert dialog so we're gonna just <end>
<start> and then we're going to say dot input method service so that's a service <end>
<start> have some quotations in there and then like a plus like that so just make <end>
<start> another string and then we set it up and we also have to you know import <end>
<start> float types so we're gonna say float x float y and float sensor x and sensor <end>
<start> called last tweet then we're just going to give it again a string name which <end>
<start> to have it the value of what's being passed in our string here so we're <end>
<start> again gl 10 object or gl 10 class dot gl underscore projection and you <end>
<start> string returned oops turned name equals and then we can <end>
<start> variables some for setting up something and we get that f or that string and <end>
<start> we've done because pretty much our get hotness that's going to be the <end>
<start> so we're gonna say private sql light database and our database so we set <end>
<start> for the most part to open a new a new activity so just a starting point <end>
<start> and set the gravity to the right for case three or case - i'm sorry <end>
<start> the back view so we're gonna go six five four all right and we're pretty <end>
<start> we're gonna say this and then we're gonna allow our class to implement <end>
<start> background as well so we're going to say android drawable and that's going <end>
<start> cool and you can see all the methods you can use for the toggle button <end>
<start> texture that triangle and then we're going to get into just some easy <end>
<start> going to say else we're just going to start it over changing y is equal to <end>
<start> going to be method that kind of relates to our resources for the most <end>
<start> around and get rap oh wait rap contact content not rap text what am i <end>
<start> to have it the value of what's being passed in our string here so we're <end>
<start> know this get method called data so all we're going to say is data is equal <end>
<start> which if you scroll down you can see null for default which we're gonna <end>
<start> time line and we're going to set this equal to a new json array passing in <end>
<start> text to be here and so we're going to say like something like what's what's <end>
<start> going to use a method called get last known location and it takes a string <end>
<start> now i'm going to say from a password it's travis again travis and validity <end>
<start> than let's say 20 whoops i is less than 20 and we're going <end>
<start> audio manager dot stream music and again that's just the type of you know <end>
<start> when you want to define more than one button you can also just hit a <end>
<start> my screen i know it's not really same shape as a screen let me try and get <end>
<start> a simple simple stopwatch application so fine view by id <end>
<start> don't know if it's on this page or not but there's a formula to figure out <end>
<start> get string and we're gonna put one here and then what we're gonna do is <end>
<start> point or we're gonna see our point byte <end>
<start> resource folder but just in case you guys forgot we're going to say <end>
<start> just going to copy this and paste it a couple <end>
<start> our skit did we set that up yet no okay basically this is going to be <end>
<start> thing that we're going to do is set display dot set color here <end>
<start> into your tools and click android right here now the first time you click it <end>
<start> this up here get started and as you can see i implemented the onclicklistener <end>
<start> right now we're going to go down to our switching case where we where the <end>
<start> we're going to say key underscore row id something like that we're going to <end>
<start> we're gonna reference within our square brackets here's just getting the <end>
<start> let's scroll down to our simple browser and type in a website again <end>
<start> so as you can see here's our webview actually that's going to load up <end>
<start> working with just a string so i guess there's just only just one choice <end>
<start> this to like camera application or something like that if you want and <end>
<start> what's up guys welcome to your 70th android tutorial for the new boss <end>
<start> that'd be good for like a photo gallery or something if you guys are <end>
<start> thought i'd show you the flipper the thought i'd show you the flipper <end>
<start> we're going to set up a class variable called class or i'm sorry we're going <end>
<start> gangster-style just going to hit dot stop and then tts dot shut down <end>
<start> simple little tutorial only two lines of code that we learned but it's <end>
<start> then we're also going to say are scaled y is equal to our d y divided by 30 <end>
<start> something called a pending intent and we're just gonna call this pi4 <end>
<start> that's going to return the size of our list and if that's greater than <end>
<start> gonna say compass dot disable compass and then we also have a method <end>
<start> just gonna say whoops all right travis and you know a string would work <end>
<start> runnable so we're going to do we're just going to copy this whole class my <end>
<start> your application making it look a little bit nicer as well as i know like <end>
<start> that we can do or actually this one not very self-explanatory less of <end>
<start> view and put in a scroll view and give it the reference android layout <end>
<start> to be basically in add activity so we're gonna say android android name <end>
<start> and we're going to just set this up for the most part copy and paste this <end>
<start> item so we're just gonna say overlay item and we're just gonna call <end>
<start> that's not equal to negative one because when it equals negative one we're <end>
<start> refer to our tab host and then we just say add whoops tab <end>
<start> starting point class so it's kind of a reference to that and basically <end>
<start> gonna parse that that data from this website so again it's a little <end>
<start> for us and then all we're gonna do is say textview set text to information <end>
<start> eclipse tab and the preferences is right here so you click that and then you <end>
<start> we're going to go in and add two buttons one to access the phone and actually <end>
<start> just set up our viewport we set up like you know what where we want it to <end>
<start> say our location manager dot remove updates and it's the listener again <end>
<start> variable that's going to return so we're going to set up string and we're <end>
<start> for the most part so we're gonna say check box just felt like that yeah <end>
<start> can use with this webview so far the only method we have is loading a <end>
<start> drawable object and we're just gonna say equal to get <end>
<start> you guys we're having some troubles also what we can do with this catch <end>
<start> guidelines of how to set up a widget and all we're gonna do is we're going <end>
<start> landscape or portrait so what we want to do is have it kind of like this <end>
<start> know what this is we're going to say create a class our view client <end>
<start> drag and drop a button in there and then edit it then we're also going to <end>
<start> might take one more tutorial or two more not sure to pay on how elaborate i <end>
<start> hot or not instance where we pass in the context of this class and then <end>
<start> say our view we're going to refer to that and we're gonna say set text <end>
<start> layout that controls our entire you know xml file so now what we're going to <end>
<start> and then it opens our camera activity what opens our camera activity we <end>
<start> reference so we're gonna say string and we're gonna call this base url <end>
<start> dot like set progress style and there's some defaults that we can refer to <end>
<start> sycamore to our object so we can kind of see that it is three-dimensional <end>
<start> because again that's what we enable named our typeface so now <end>
<start> just say this is equal to new intent and then the package name we're gonna <end>
<start> which was our you know our command button for the most part we're going <end>
<start> basically hold our indexes or our specific points so we're just gonna <end>
<start> we're going to do is we're going to switch over and just make sure we have <end>
<start> works out again we've worked with the request code so we want to make <end>
<start> probably almost set the height so i'm gonna change that real quick you <end>
<start> alright this is getting annoying stop it my phone was sitting on the <end>
<start> want to do within here is put an exponent what does that expression <end>
<start> to call gl capital g capital l example and that's going to be our main <end>
<start> you guys simple stuff for the most part i just wanted to show you guys <end>
<start> input stream is reading all of those bytes for the most part and as long <end>
<start> this item and also as well you can do android alphabetic shortcut equal <end>
<start> define what this is running variable is which is gonna be boolean so we're <end>
<start> so there we go um now we have this magic magic <end>
<start> going to be activity so we're just gonna say extends activity and we're <end>
<start> exit for this example i'm just gonna type in a longitude like 51 so i'm <end>
<start> layout but i don't want to spend too much time on some mundane things but <end>
<start> tutorial make tutorials i should say oh you want this person to do cry <end>
<start> well but for the most part this is pretty similar to the example <end>
<start> travis's and now let's go back menu preferences change your list to <end>
<start> do is we're going to enable javascript so if we use right now example <end>
<start> are on our web view if that makes sense hopefully does but it might not <end>
<start> going been complete so what we're going going been complete so what we're <end>
<start> attributes dot get value of the index which was data so again that this <end>
<start> this tutorial is so i shouldn't say that's not what it's about but you <end>
<start> set up a buffer for our index points and again i know right now you guys might <end>
<start> think about the points that we need to set up and we're gonna work with 3d <end>
<start> gonna say metadata oops and we're going to give this a <end>
<start> try and catch does which which i mean where i pasted it i should say so <end>
<start> sensor manager and we're just going to call this sensor manager sm and <end>
<start> input stream and we're gonna call this fi s for file input stream because <end>
<start> and then we're going to go back to our and click method because after <end>
<start> process and access some of that information but that's pretty much <end>
<start> up some stuff within our class here we're gonna set up a spinner and <end>
<start> then what we're gonna do is we're gonna use our handle which we called <end>
<start> through our columns so now that we have our cursor set up what we want to do <end>
<start> just type this as well and look how much cleaner our on create method <end>
<start> doing this but this is kind of the layout of an activity i created when <end>
<start> we're just gonna times this by four so that's basically telling our buffer <end>
<start> method so again let's run it and as you can see it's just a solid red <end>
<start> the top of our class and paste it there so now we can refer to that sm <end>
<start> and we aren't opening these activities anymore by the action name because <end>
<start> and we're going to still have all the access to our activity class so <end>
<start> two and so we're gonna just set up a switching case for that so we refer <end>
<start> name which is gonna be our table name and we're also going to set up you <end>
<start> random object called our set this equal the new random and then we're all <end>
<start> to open so we're gonna open the splash activity or the splash class or again <end>
<start> to set up the gravity within xml or with in java so we created this <end>
<start> the new boston as well and then we have a resource folder and here's <end>
<start> of the background stuff that's happening the javascript object notation so <end>
<start> we're going to say our helper and we're going to set this equal to a new db <end>
<start> oncreate method now as i'm doing this hopefully you guys know how to do <end>
<start> works you know we can do all of all of our commands and stuff still hit <end>
<start> this out and we're gonna paste it above and then we're also gonna whoa <end>
<start> part makes sense but what we're gonna do is we're going to set up a private <end>
<start> one more tutorial before we actually get into the way that you guys want to do <end>
<start> basically what that result code was used for from the most part and then <end>
<start> going to create a string and we're going to say this is our data we're going <end>
<start> then we just have to import that and implement the method from the mac <end>
<start> for the go button and then below that we're going to just set up our edit <end>
<start> so again we're just going to right click go to source override implement <end>
<start> when you want to define more than one button you can also just hit a <end>
<start> instead of creating our own at the moment so we're going to say android <end>
<start> boss in we're going to do in this tutorial we're basically going to <end>
<start> we're just going to set up a new intent i equals new intent and then <end>
<start> gonna say int max v and we're gonna set this equal to our audio manager dot <end>
<start> we're just going to save that and then what we need to do is we need to add <end>
<start> if i hover over here you can see it takes in the three parameters max <end>
<start> display and it has the reference for basically that text within our xml so <end>
<start> maybe like plus our sensor x and then what we're gonna do for our you <end>
<start> gonna say case one break and lastly case two and break now <end>
<start> everything works all right so let's click on it and <end>
<start> we're going to do is we have this basically our edit text here this <end>
<start> variable so we're going to say hotness and we're just going to say like <end>
<start> class what we want to do is we want to set up a content values <end>
<start> what we're going to do is set up a not something called an id we're going <end>
<start> to code but it's gonna it's gonna work for us so that's <end>
<start> create a while loop and we're going to say as long as their line is equal to <end>
<start> where we'll set up some more stuff for this database so have a good <end>
<start> and if we refer to the value 0 that's going to give us the pretty much the <end>
<start> array ford slash values or something like <end>
<start> bitmap and then we have some different parameters as you can see we're going <end>
<start> greater than sign and it gives us a lot of choices that we can choose from <end>
<start> we're going to do is say input type dot type class text again and you're <end>
<start> or whatever view you guys want we're going to change this add one button <end>
<start> the string builder so we're just going to say url and we're going to add to <end>
<start> something else that we're going to have to check for and we're probably going <end>
<start> we're gonna say request location update and so we're just going to say <end>
<start> at all that good stuff and it's pretty you know pretty impressive and there <end>
<start> equal to which is gonna add to address we refer to our address list so <end>
<start> basically we have three points so we're just going to say 0 1 &amp; 2 now we have <end>
<start> be set clickable so we're going to use this on click method as you can <end>
<start> to catch and for this instance we're going to say intercept earth i'm <end>
<start> of the same reference as we do in java so let's check that <end>
<start> there we go we have our loop setup now now the first thing we want to do <end>
<start> just going to be equal to sp and all we're gonna do is we're going to <end>
<start> and since we set up our typeface in our constructor we're gonna put font <end>
<start> but basically before we do that i want you guys go to the window tab and <end>
<start> and we're going to set this equal to new content values and then we just have <end>
<start> little bit longer by just adding a thread sleep method to like 1,000 or <end>
<start> you want a different size in this how you do that so you guys might want <end>
<start> from this top left corner so we need to keep that in mind as well and i'll <end>
<start> stuff within that folder so how we do that is we just say path dot m'kay <end>
<start> android layout width and we're going to set that equal to fill parent <end>
<start> java for the moment but basically we set up an integer variable that's equal <end>
<start> it's package name is and then our class name that holds configuration which <end>
<start> have a text view and then we're gonna create our hot-or-not class and <end>
<start> on location change on provider disabled on provider enabled and on <end>
<start> crap what our application works so there you go that's kind of introduced <end>
<start> messing around with it and just so that's why it has changed and <end>
<start> thing that we want to do is we want to set up a reference and also set up <end>
<start> export signed application now we're just going to hit next and we have to use <end>
<start> even want to fill out more information about yourself you can doesn't <end>
<start> true it's on so there we go that looks pretty good let's set <end>
<start> equal to which is gonna add to address we refer to our address list so <end>
<start> you can see here and so that's pretty neat and then if we hit the go <end>
<start> there we go and since we want this string array to be accessed by <end>
<start> gonna go to the next line so we know that we got that chunk done and <end>
<start> locate where we just save that apk again the documents android apps and the <end>
<start> that's just going to allow us to be able to kind of remove the back of the <end>
<start> which directory we want to save in so what we're gonna do is we're going <end>
<start> the sensor event listener we're also going to set up just our you know our <end>
<start> how this works and what we're doing here but basically we're gonna need a <end>
<start> now i know i'm going fast and i'm not really explaining too much but <end>
<start> alert dot set button hit enter format it for you guys and we're gonna change <end>
<start> and we're just gonna call this point we're gonna set this equal to new <end>
<start> from my bring back calm now what we're going to do is we're going to set <end>
<start> we're going to call this string bread which is kind of a confusing thing <end>
<start> and setup or oncreate method again the boring setup i've done is i just set <end>
<start> we set this up just like every other time at plus id forward slash and <end>
<start> we're going to put some stuff in there we're going to say put and then as <end>
<start> same shape basically when our emulator starts it's you know it has a width <end>
<start> it's going to code out everything until we do something like another <end>
<start> a string because we're going to again get this string that we put in <end>
<start> say comm google dot dot add activity so make sure your spelling is correct <end>
<start> obviously since this is an int but let's just take a look at it i pulled this <end>
<start> that and we're just going to refer to the system clock so again just <end>
<start> called touched point so we can say touch point dot get latitude and that's <end>
<start> alignment to there as well but i just want to show you guys the <end>
<start> called a theme so we need to set that up by saying android theme and then <end>
<start> to override implement methods click that as you can see here's our activity <end>
<start> and then we can set it equal to our result which again will be whatever <end>
<start> actually change our our text view so let's run it make sure everything <end>
<start> need to import this class it's not allowing us to do so yet so we just <end>
<start> we're just gonna create a gl capital g capital l surface <end>
<start> browser and we click a link you know it's going to open up a new intent <end>
<start> set up some methods within this class to kind of set up these variables to <end>
<start> understand these two lines for sure that's okay guys for the most part <end>
<start> problem comes or the difficult part of the jdk is setting it up now i <end>
<start> just going to set them up so we're going to say button and we're going to <end>
<start> this so we're it's gonna be a float buffer as well since we're working <end>
<start> and now what we want to do is we basically want to create a string <end>
<start> webview here find view by id and then we're just gonna say our dot id dot <end>
<start> then i can't forgot what what do we call this variable our view okay so <end>
<start> transparency is what the a stands for the r is the amount of red we want <end>
<start> we start our thread here while we create our thread and then we start our <end>
<start> now we're going to open our handle but as you can see it just stops right <end>
<start> let's see if i have it pulled up yeah see like right now if we put travis <end>
<start> values so we're gonna say x equals y equals sensor x equals sensor y <end>
<start> so then we're going to go into the xml section of our preferences and set up <end>
<start> like our bundle again so first for a key we want to reference basically where <end>
<start> gonna do is say int ran random and so that's equal to r dot next we wanted <end>
<start> of our progress bar so we're just gonna say progress that's being passed in <end>
<start> within our custom class which we created called insert pinpoint and we're <end>
<start> stuff but for example we don't really care about that we're just going to <end>
<start> we need to have that specific catch because that's what we're trying <end>
<start> for a list activity that we're creating called menu and we're just going to <end>
<start> just finish it because the other problems pretty simple as well so <end>
<start> a vibrate permission again you can just type this out or just go to <end>
<start> point or we're gonna see our point byte <end>
<start> we're probably going to do something else and i'll see you then have a <end>
<start> is we need to basically relate to the client state and able it for <end>
<start> loop so we're just gonna say for and i which we're just creating again is <end>
<start> gl 10 class again and just say gl underscore float and the stride <end>
<start> and also you might want to change the text size up just to kind of get <end>
<start> like as we run the program or run the application again yeah i press <end>
<start> be useful we're also gonna create one new folder and we're gonna call this <end>
<start> is we're going to again semicolon and we're just gonna add one to each <end>
<start> we're gonna do is say dot gl underscore vertex array and that's just gonna <end>
<start> let's see if i have it pulled up yeah see like right now if we put travis <end>
<start> and android layout height we're going to have it wrap the content context <end>
<start> be conscious of slower devices that you know will download our app from <end>
<start> allow us to go and what we want to set this maximum volume to equal <end>
<start> bracket you guys can think of it and our sub method and if we hover over it <end>
<start> can't spell dots decode resource and then for again for this one we say <end>
<start> into the code and then we'll come back and maybe do like a texture one if <end>
<start> again if you guys remember and i'm just gonna move this up above the <end>
<start> and we're going to use the method on it and again we have to define our <end>
<start> type of class so let's go back into our manifest and we're going to set up <end>
<start> those areas because you know the order of the items is important so that's <end>
<start> client protocol exception input/output exception and a <end>
<start> just created which is right here so control v that's gonna <end>
<start> to say extends and before we'd say extends activity for the most part <end>
<start> and put that within the actual body of the email so again put extra and <end>
<start> won't be able to access this or move it or you know dump it so that's what <end>
<start> going to do in this tutorial is access this edit text and also our <end>
<start> do is we just got to say our tab host then we just say add tab and it takes <end>
<start> to this in the next tutorial so i'm just gonna say next tutorial so we're <end>
<start> so now let's go into our hot-or-not java class and what we're gonna do is <end>
<start> you know four for example and basically what this would be equal to or this <end>
<start> this to locale dot us or you know whatever language there we <end>
<start> gonna cut this and we're gonna paste it within our resume it goes again any <end>
<start> that's what we're going to use we're just going to click this and within <end>
<start> oops did i do that right what am i what oops did i do that right what am i <end>
<start> do the pretty much the same thing for the get longitude so we're just <end>
<start> them if you like what the heck is he talking about and now i bet you guys <end>
<start> story will reset this if-else statement and basically it's going to check if <end>
<start> we also have to put f here i'm sorry and then for last vertice let's say <end>
<start> watching guys hopefully it wasn't too confusing and i'll catch you guys in <end>
<start> then dot open stream and that's probably it for this tutorial i know we <end>
<start> client so we're going to say our <end>
<start> makes some sense again you know this last tweet method takes a string <end>
<start> hover over a class ad unimplemented methods and we have two new <end>
<start> kind of out of order here but we probably want to do like a try and <end>
<start> while file input stream dot read does not and we're gonna say read data <end>
<start> what we're going to do first what we're going to do is set up an intent <end>
<start> layouts and we called that one one widget so we're just gonna hit widget <end>
<start> parent i don't know if it's not for the height yeah for the height we want it <end>
<start> sit onclicklistener real quick again this class is going to implement <end>
<start> have our parameters what we're gonna draw is our ball that we set up and <end>
<start> that and again we just use our edit text which we called shared data dot get <end>
<start> clicking file new other and then android xml file you guys should be <end>
<start> point zero point one point two instead of handling actual you know our <end>
<start> get address in place pinpoint what did i do here all right well the order of <end>
<start> you know our state where we can read and write and can w equals false here <end>
<start> whatever you want without using the @ symbol as long as it's within <end>
<start> grab the canvas size because again the canvas takes up the whole width and <end>
<start> what we set up in our onclicklistener before so again all we have to do <end>
<start> gonna say new input source and we're gonna refer to our website or url <end>
<start> here out there'll be a website no no no here out there'll be a website no no <end>
<start> can say like text here but again we're passing in some information when we <end>
<start> going to copy this because again we want to be private <end>
<start> do in this tutorials we're gonna relate to where we touch on the screen <end>
<start> do and then we're going to also say our brow and then we're also going to <end>
<start> example you know pretty much covered the basics some buttons and all that <end>
<start> open up a page like this where you have three options either the standard <end>
<start> also going to implement we're gonna implement the sense something called <end>
<start> method it's called go forward pretty simple again but again these are <end>
<start> something called on list item click and we're going to add that method and <end>
<start> little you know painting to the canvas here so i'm just gonna run it make <end>
<start> implement methods unimplemented methods and we have three methods that we <end>
<start> here so again it's again hit this first d it's going to look for the <end>
<start> gonna say dot t dot show so we're gonna display our toast and we're getting <end>
<start> like that so we're going to say the method set input type and as you can <end>
<start> gonna say get width this is just kind of a common trick that programmers used <end>
<start> to open it and then we can also do fos closed and we would write within <end>
<start> creating a widget this on delete method hopefully you <end>
<start> we're going to do is we're gonna set up a new intent and we're gonna call <end>
<start> called the edit text input so we're going to say input and we can it dot <end>
<start> content view for this view that we just set up here just going to take a <end>
<start> can have within our as for our input type we're going to use the one <end>
<start> the next key that we want to have is we're going to say he named <end>
<start> refer to the environment and see kind of this see if we can get the <end>
<start> activity and that's pretty much it for this tutorial will probably <end>
<start> the type string because again we're working with a string arraylist and <end>
<start> our application and hopefully it still is gonna load our map if it doesn't <end>
<start> so we're just going to set that up real quick and catch and then exception e <end>
<start> set it up and then we show it again pretty simple for the most part you <end>
<start> comma negative 1 and in the y-direction then we can again leave a comment <end>
<start> we need to go on to the manifest and give us the permission to use <end>
<start> guys for the whole you know listview maybe it's not maybe it's starting <end>
<start> then i can't forgot what what do we call this variable our view okay so <end>
<start> but we're gonna go down and we're gonna hit our message it's still gonna open <end>
<start> talk about what we've done so far and also we're gonna set up switching <end>
<start> the p&amp;g or the extension you're going to get an air as well so you don't want <end>
<start> all right so now that we have everything set up we can actually do some work <end>
<start> time line and we're going to set this equal to a new json array passing in <end>
<start> it for each one of our get information for example and paste that there <end>
<start> class within this class we can still have access to the x and y which is <end>
<start> the query and you know read about the parameters the selection and all <end>
<start> to say our editor and we just need to finalize it basically so we're going <end>
<start> eclipse is is an ide which will make developing a lot easier for us <end>
<start> activity it's under a regular activity we have a method called on options <end>
<start> package name and we can just say plus string or i'm sorry plus cheese <end>
<start> result something like that we're gonna set this equal to new intent as <end>
<start> is this that's impossible so yeah we're is this that's impossible so yeah <end>
<start> is equal to fill parent and also andrew android layout width is equal to <end>
<start> our extends the app widget provider because again this is a provider <end>
<start> widget is too large for the screen so you know i don't know if i dint <end>
<start> extends view and you know we got an import view and then it says hey <end>
<start> and we're going to scroll down for on activity result on activity result <end>
<start> and again you can use all these methods and there's a method called set <end>
<start> class this so it's going to look for a through our class and say hey <end>
<start> set up kind of references for the next tutorial where we're going to get <end>
<start> statement with a semicolon and i'm just gonna hit return so you can see it <end>
<start> other android xml file and we're going to call this photo all lowercase <end>
<start> finish off our if statement like that so make sure all our brackets are set <end>
<start> api so again if you guys get lost you can just go to this website and it <end>
<start> of new stuff but what we are going to learn is sending an email using kind <end>
<start> we implemented so we're just going to say <end>
<start> layout what we're going to do is we're going to go over here into our <end>
<start> show you guys that we can use some intense to start up some <end>
<start> also define this above so we're just going to copy and paste this above <end>
<start> want to set up all of your reference want to set up all of your <end>
<start> do is say start activity and then what intent do we want to start we want <end>
<start> controller object so we're gonna call map controller and we're going to <end>
<start> use them for debugging so we're going to say catch exception and basically <end>
<start> so we're going to say l row 1 and then e^x x 1 dot close all right so <end>
<start> class this is coming from what are you talking about we're going to define <end>
<start> was middle rectangle or middle rect and our paint was called our blue so <end>
<start> we're just gonna finish and it's going to set up a project for us as you <end>
<start> and so once we get our onclicklistener set up let's go down here and setup <end>
<start> return so again we're just going to say json array and we're going to call <end>
<start> entity again nothing to new there we're also going to set up a string <end>
<start> that we're going to need so again under replacing pinpoints comment we're <end>
<start> i've set up an xml layout called shared preferences and also a a class <end>
<start> the motion is pressed down so we're just gonna say if and then our event <end>
<start> stuff that we can do with google maps and then see our controller zooms <end>
<start> hit a comma and basically set up a variable that we're going to <end>
<start> set it to native order again just just by referring to the byte order <end>
<start> somewhere over looks like germany or <end>
<start> but no that's not that one so i'm just going to pick one screenshot open it <end>
<start> height and you know set this button up to center but you guys don't really <end>
<start> starting point you can see that up here here's our package name comm dot the <end>
<start> to just drag and drop them into this actual <end>
<start> and they were just gonna change all these fronts to back and there we go <end>
<start> going to do the same thing but now what we want to do is create a method <end>
<start> called and notify method we're just gonna say finish and after we hear <end>
<start> dialog like that we're going to set it up to equal anything we're going to <end>
<start> trouble reading that because i was trying to look at my camera and at <end>
<start> data we're going to say we're going to say jessica alba is dot dot dot and <end>
<start> dot open then what we want to do is we want to create a string so we're <end>
<start> open basically our entry because we just set up that open method and there we <end>
<start> things are confusing for the most part but it'll get <end>
<start> to a new gl surface view so pretty pretty default there and that's <end>
<start> what you guys want to type out is a key tool - list - alias android debug key <end>
<start> and so once we get our onclicklistener set up let's go down here and setup <end>
<start> seconds and milliseconds for stopwatch application now this is kind of <end>
<start> r dot layout dot and then we have all these choices that we can choose <end>
<start> default it's set to false and less if we you know we set that up so now your <end>
<start> media player referring to the media player class we're going <end>
<start> arrays because again we're working with this float buffer that's basically <end>
<start> gonna say gl triangle dx i'm gonna call it try something like that then <end>
<start> here just like when we use with our button there will be text in <end>
<start> we're doing and then we're just going to say a cool menu something like <end>
<start> all we have to do now is we got to paint them onto our canvas so we need to <end>
<start> it's called menu so class name dot this and then we're going to comma and in <end>
<start> android name is equal to android dot up wit again dot provider and we're <end>
<start> doing is this we're doing all that stuff within the same thread as our <end>
<start> it and we're going to say commands yeah commands and we're also going to just <end>
<start> reference so we're gonna say string and we're gonna call this base url <end>
<start> that on or off basically we're just going to leave it off because we <end>
<start> we're going to do is say input type dot type class text again and you're <end>
<start> different way than we did right here you're like dang it man what are <end>
<start> resource folder and an all lowercase type menu hit finish and then in <end>
<start> again so then we're going to say add drawable and then splash under <end>
<start> of difficult but now here's your pros you're showing everybody <end>
<start> and then we're gonna say dot media mounted so if our state is equal to <end>
<start> type so we're going to say overlay type of list and then we're going to <end>
<start> our save button isn't there so now let's go over to our external data java <end>
<start> for the future always think about the future guys all right so let's check <end>
<start> do all nevermind we're just gonna stick with kind of same familiar familiar <end>
<start> is radio groups a radio group for the most part then we're going to go up <end>
<start> plain text you're like what this isn't new you are lame which is fine <end>
<start> and it will work so i will catch you <end>
<start> can read this it's all that good stuff and hit generate api key and here we <end>
<start> to say let's slider implement on drawer open listener and then we just have <end>
<start> set this equal to within quotations at plus id basically saying we're <end>
<start> this said orion no oh yeah i always always mess up on this one for <end>
<start> going to say set up a string called display we're gonna say display is <end>
<start> do one last one last one here so we're going to say list preference <end>
<start> is going to say if status is not equal to text to speech dot err then <end>
<start> zero which will be the first thing in our list which will be music and <end>
<start> is just right-click on your whole package go to run as android <end>
<start> sweet you know a lot of you guys have priced in google maps before but <end>
<start> like that pretty pretty standard there and <end>
<start> a certificate fingerprint and we're gonna hit i've read and control <end>
<start> we can also define our compass within here basically to just say we're <end>
<start> call this hot or not db something like <end>
<start> return null and we can all set up like a toast or something toast at make <end>
<start> going to call it just spinner awesome like that pretty clever huh yeah <end>
<start> then we're gonna hit a break statement and then we can say <end>
<start> the specific language fine-tuning it that way as well and this basically <end>
<start> need to do is we need to set up our thread which is called our thread <end>
<start> for class id r dot raw dot explosion and then we're just going to do mp dot <end>
<start> relative layout to have an id as well so we're just going to say android <end>
<start> we're going to do in this tutorials get our actual key for when we're <end>
<start> but don't worry about the radio group for open class activity i'll show <end>
<start> string reference or a name a tag of some sort and right now i don't know <end>
<start> class that extends the overlay and when we hit the motion event down that's <end>
<start> parser and then finally the xml reader parser and then finally the xml <end>
<start> let's see if we can import it like that yeah just hover over it after you <end>
<start> it if you guys are on windows but if not i want to show you guys another <end>
<start> right-click you know right click in that free space go to android project <end>
<start> activity it's under a regular activity we have a method called on options <end>
<start> going to set up a linear layout again nothing new for the most part <end>
<start> client and we're going to say this client is again just keep things kind <end>
<start> gl lower case like that sorry and then we're just gonna say vertex <end>
<start> we're gonna do on click listener and then we're just gonna say this and <end>
<start> shared string and the second parameter basically <end>
<start> show you some of the methods that you can use but uh here we go this again <end>
<start> the alpha level let's do that one this first argument is the alpha level <end>
<start> application that's going to send an email so then we go to the <end>
<start> two and so we're gonna just set up a switching case for that so we refer <end>
<start> kind of a java thing don't worry too much about it we're just going to <end>
<start> if expression mark or exclamation mark can't i'm sorry x exclamation <end>
<start> eclipse tab and the preferences is right here so you click that and then you <end>
<start> down to our simple browser application and it's going to load up again my <end>
<start> and then just set it up android basically i'm going to copy and <end>
<start> told you guys that they have a lot of default intent so i'm going to try <end>
<start> errors in the next couple tutorials so alright what's up guys so here's <end>
<start> called sb and we're just going to say append which is basically a return <end>
<start> method within our class that returns a json object so we're just going to <end>
<start> like that you're not who knows but that's that's where we're gonna set <end>
<start> and we're going to set this equal to new content values and then we just have <end>
<start> let's set that up just cursor c equals let's set that up just cursor c <end>
<start> that's what we're working with is milliseconds so start stop and now <end>
<start> check this out see if it works and again hopefully it works on the emulator <end>
<start> kind of are picking up on some stuff especially the new programmers this <end>
<start> use our thread variable called timer and to start a thread you just use <end>
<start> but for example if you just said www dot it's not going to work you have to <end>
<start> new a default http client just standard default client nothing new for the <end>
<start> activity that's where you guys can find this i'm just gonna talk through kind <end>
