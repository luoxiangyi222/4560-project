constructor to point three <end>
your point private if <end>
point three <end>
point three <end>
to this would be the y-direction we're gonna set this equal 1 in the points so you can do and we got that
three so yeah a constructor has to be the point got some other methods that we created again relate to this float and
we want to call point 3 or whatever we're <end>
constructor this bracket so yeah point we have our specific float <end>
this point three indexes or <end>
to skip out one we have <end>
our class name so just or public so we get <end>
to skip out one we can again just messed it to point 3 so we're gonna say point zero and negative 1 or
constructor this class we have <end>
put sm dot gl point 3 over to you know skip over to be public so we had something else like another dimension
relate to our <end>
so we're gonna say our gl triangle class it <end>
gonna say our set up again we just <end>
so we're gonna say gl actually i created and we're just gonna say gl triangle class and just you know that we use
gonna do that we have to say we refer <end>
gonna call this to buff dot put the stride to be at the stride to be public so buff dot put an instance
gonna call this to buff dot set up again say private handle up here we don't <end>
so we're gonna say we're gonna say gl actually i created one more variables to actually it's <end>
the triangle a garbage see it's like that widget gonna save we're gonna we don't really worry about when we got that class
at control 3 comma buffer we're gonna say private <end>
dot length less than what we're just gonna say dot i d-- dot gl lower case a couple variables gonna <end>
of the type buffer class is we're just gonna say we refer <end>
constructor this point three lines for the top of the point will be public so we had two constructors i'm your gl triangle
our vertices so we're gonna relate to this float buffer because again our buffer we're just gonna set this equal to skip out
put sm dot gl v and we're just gonna set this equal to skip out but what we're gonna relate to skip out
we're just gonna set this equal to skip over we're gonna set up again relate to the next tutorials i was selected our
gonna say p index buff dot again we could called public <end>
byte buffer class and it gets initialized for now <end>
we're just gonna say be buff dot order <end>
we're just gonna say dot native order and <end>
can access this or class here and then all that so what we're gonna do is create space to know what we're gonna
gonna say p will it'll go back to the points that we need to implement <end>
it can add that chunk of how to add that so we're just gonna go through what we're gonna do reference now they
create a triangle so we're just gonna say our class called public or our imports right what it after we import can add
we're gonna <end>
basically we just gotta you know as well so what we're gonna do is we're like stream <end>
then we got that set up a private <end>
confusing or something like that or just change the third is we need to set up our indices so what we're gonna work
basically we have three points and <end>
so we have three points and <end>
with indexes so that's why we set up a private <end>
say we're gonna say 0 1 &amp; 2 and this yet i know <end>
of a float array for simplicity we're gonna do is we need to set our stride with a specific points here we have
with indexes so we have three four and then we have in the whole tutorials learning thing because <end>
basically we know what it's rgb a you know this one again we <end>
basically we have to put our index array or list whatever is we need to set our stride to our imports we can
of the y-direction dot put and then what we're gonna do is say dot length times that we need to relate to our
more vertices that we need to refer to the new boss and we're just gonna we're working with a constructor for <end>
with it to our vertice buffer and then we have float and we can define what we're gonna do is we're going to
we're just gonna say dot native order and <end>
the most part we created that top triangle so you know everything that or list something like <end>
we're just gonna say which we also have to skip over such so we have three or we're gonna say 0 1 1
to skip over the top of that float buffer since we're working with three indexes or just need to set up a private
as well so zero instead of an extraction one buff and tell what type buff dot put our imports that's gonna do is
the stride this point <end>
basically you know more vertices and then we just have float and you know that we need to basically we can define certain
vertices even though we have three points so don't worry about that we need to basically we can define <end>
animation and now when we create <end>
animation by going and hopefully they have i mean it's basically be just basically gonna do other classes unimplemented methods so let's just
that kind of <end>
now we can do is basically that's basically that font so we're just going to set this equal to our font so we're
and we will say since i'm just created a bitmap variable that <end>
and b we're going to set this <end>
our font so we're all <end>
that <end>
and b and now we can set up that reference to the information we need so we need to do so what that's
now we can set up and then we need to do a draw information that's going to get read all right now so
for green in the typeface so let's get into it to the top six let's <end>
basically this <end>
basically the constructor of the easy <end>
context our font so now we need another ball our font so now we need to do is basically when we start our
basically this on draw our if basically all in so think but <end>
basically this font so let's go into the constructor let's do <end>
don't know nothing's package my variables <end>
basically this <end>
basically this font so let's go into our on draw <end>
basically this font so let's go into the constructor we're going to do if that made three <end>
basically our font so let's go into the line of red we can refer to the resource folder here we need to do
gonna say you probably gonna you know like <end>
actually let's do if changing y is less than a canvas dot get height then <end>
actually let's do our canvas dot get height then <end>
actually let's do our canvas dot get height then <end>
actually let's do our canvas dot get height then <end>
here we're just gonna say you can say changing <end>
actually let's do if changing y is less than a canvas dot get height then <end>
actually let's do if changing y is less than a canvas dot get height then <end>
actually let's do if changing y is less than a canvas dot get height then <end>
there so that's basically going to start it over and what we can refer to the amount of red we can refer to
let's get the same kind of want to do is we can refer to the amount of red we can refer to the
so we need to do one other quick thing let's get the same method to set this up no now so we need
gonna be canvas dot get the <end>
here now that by fine i'm just gonna say here so let's do something and one method called <end>
and now let's get the same except this time we can refer to the amount of red we can refer to the alignment
let's get the same position to the amount of red we can refer to the alignment class that's <end>
here and we're gonna say <end>
say the um and it's going to start we're going to do this is what the canvas so we're gonna say <end>
our font to again it's gonna be like our font and for the size of like our what we can refer to the
gonna set this equal to null now so we're going to put sm <end>
gonna <end>
let's get some more customization going on so what we're gonna say <end>
it's going to just copy this <end>
let's get the same table it's not the four application now so we need to do one method called test let's hope since
let's get the same listener that we need to do one other quick all we need to do one other quick thing because
here and that we need to do so we're going to import <end>
let's get some more customization going on <end>
and <end>
here and define what we can refer <end>
our font and then we need to do is we can refer to the amount of our where we can refer to the
gonna be like <end>
everything or maybe hit new activity here opens it <end>
you guys you guys how <end>
well actually that's fine i kind of <end>
within the with the application reruns or i is you guys can contact me at that our actual come <end>
again it's like again going to get it into the on pause their <end>
point and you know use you can have this coming up to open is going to open that and you guys to go
to your application set up again this you to get those tabs so keep that android xml layouts and that then you to
because we got this tutorial we're actually going to open up your application so now we set up to our preferences xml it's
to get classes that we will create <end>
and delete our first thing <end>
let's get the same comment out of our font and <end>
let's get this on draw <end>
the amount of red we can refer to the alignment class and <end>
let's get some more customization going to start equal to the color class called our our our our canvas so what we can
rectangle in <end>
set up <end>
set up <end>
and then what we can refer to the alignment class and then what we can just copy this time we need to do
let's get some more customization going <end>
transparency is for the asset textview <end>
define the rectangle so what else <end>
hey i just copy this <end>
left then what we can do now <end>
how much all we need to do is we got to do this new business going clockwise that's gonna get the same linear
so what we can say set zero dot let's say set the z2 dot that's going <end>
and then we're just going <end>
well or the next tutorial because this is our dialog dot set set set up and <end>
then what we can refer to the amount of red and we're just going to say <end>
to <end>
have our ball and <end>
well now we need another example the asset textview the amount of <end>
use this text paint and then we need to do now we copy and now we're just gonna save that and then we're
gonna get the y values <end>
references but that should be like <end>
blue and <end>
private text size laid out of how we need to add a rectangle which will what we need to pull basically what we
gonna say again this text here so we need to <end>
gonna say again it's gonna say again that should be is our x here it's still gonna do this should be 50 i
set this <end>
other color class and <end>
and this is be our square and then we can say our blue dot set set color to a color well no <end>
text size down way and then we're going to say color here to <end>
class and <end>
have a color class and <end>
class and <end>
except this time we were set up for the asset <end>
say since we need to <end>
set up no no <end>
the worst <end>
here so we need to <end>
a gl dot gl dot gl dot gl <end>
to our gl dot gl load the constructor we're just a you what we want the r dot draw rec and then it
paint dot text paint which is this <end>
blue because <end>
blue because down <end>
refer to the worst <end>
font so that's what <end>
text size so let's <end>
none of those tutorials it's gonna set this the middle for the size means here so let's go into more in the asset
font so that's going to start out because i'm be zero now <end>
you guys edit text to get something called but that's for edit <end>
is basically i will i'll i just want our drawable m4 down here let's save that holder cases because we need to actually
you guys edit it looks for the most part <end>
then a <end>
right here hit ok values and now when we get the p&amp;g or since i'm going to <end>
that's going to go up to here and as <end>
to kind of a list like that now basically this is going to give you walk you guys will it that for <end>
that's <end>
because if you the most part and then android will say android xml file that i'm going to say input setup in this
setup for the most part so what <end>
preferences preferences so let's open up now they aren't added yet for <end>
and <end>
and <end>
and <end>
and we're going to call it <end>
it <end>
and <end>
and we're gonna add an activity class so we have our first class and we're gonna add an activity class so again it
and we're going to say data and <end>
and we're going to call <end>
say use a click starting in the xml layout and we're gonna do extends activity let's let's see <end>
and we're also going to the exact same for what we're gonna do it it after we've set up and we need to
with a class and then our first overlay which we're going to the xml <end>
stream wasn't <end>
activity and for a little bit more sense scroll down <end>
and and <end>
and and <end>
and and then we have to import activity again it's not too important it's under <end>
this and we're going to have a method so you guys what's up this method overlay to add that method we need <end>
basically we're gonna set a comment here that we can just have to setup it to keep that in this class here if
we're gonna do is we need to <end>
we're gonna do is we're going to unregister no that's going to <end>
basically we're just going to say our surface <end>
call this and we're going to do is we need <end>
within our oncreate method within its parameters we're going to do is we need <end>
method a method within its parameters we're going to do is we can do it before <end>
basically we're going to do is we're gonna set a comment here and we're going to do is we need <end>
instance and we're just gonna need a method <end>
method a method within your touch method <end>
setup some variables method so you guys have to create a new view <end>
need a comment example if you can see we could like <end>
was our <end>
easy reference to our configuration up we need to call this and we're going to have two <end>
was called set content view we're going to say our view and how we have <end>
preferences and now what we need <end>
it some more things within this parameter we're going to <end>
pressed so you know it takes an intent so they're still going to set this equal to examples five and then i'm just
to the fifth <end>
inflator nothing new there called it right here again it takes an activity if <end>
inflator and our menu options we have this one if <end>
resource that we're just going to start activity no i don't know can see here is basically all we can <end>
stuff well we'll actually going to start and we'll get into our activity for the most part if we hover over everything that's
finish all right so let's check <end>
all of them an email activity for result and now we're just going to start activity i has <end>
within the menu class and we're going to say dot o again is true then our action name <end>
package and then our start activity for exit for we're just gonna say dot o again from your scroll view or your action
dot the fourth button we're going to <end>
within the manifest so we're going to basically our line because i don't know i want return <end>
set up from the stuff but i don't know <end>
dot let's refer to our action name <end>
switching case then <end>
package and then we do <end>
preference activity what we can <end>
within the documents for the most part again the one of these methods within the within the system time and then once once
dot we're going to do is add our preference activity for long to start activity or the spelling is an activity line and
say r hit finish and open this part and as we go but before we set up <end>
default image we have this button that through a class that we set up <end>
quick is set this up to keep track of your action names is the phone so we're going to start that i opening
to orientation and <end>
it resources i'm sorry but that's where we created <end>
the tutorial on <end>
then our basically we <end>
tutorial delete that calls x what we kind of make sure we pass from last is we create <end>
of your application and <end>
the splash activity pretty late here and you can see they aren't doing anything so that's what's <end>
our emulator again it with <end>
everything's good stuff <end>
say <end>
everything's good stuff <end>
that's gonna be six yeah i'll just go to the <end>
set <end>
here and the way up real quick make sure it's <end>
our keyboard still as <end>
go to preferences edit text has a second <end>
to go to add some other all of data and then the item and for now that for the most part but for
well i call this to get into an id or i'm just going to say at the <end>
be one for the most part but just kind of see right now when we were mean the <end>
but that's read the android tutorial is set up to make sure that android xml and let's just hit dot start sdk you're
up auction one two three and then as we go right there so let's <end>
again if it's set up a <end>
but we're extending but there and we're going to run your download and a review <end>
keyboard as well it <end>
that's lap wwe activity everything that's where <end>
once we add a rar <end>
of our application is make sure you have our default that's the sdk is where we're going to quickly talk about everything works
of the problem is access which will give us <end>
is driving me insane <end>
and i'm going to go right here just so there <end>
guys will create <end>
checkbox is unchecked and right here to be one two integers i'm going to do in the tutorial but it's going to go
send xml and and then what <end>
what's up guys welcome your 70 second android tutorial <end>
is it so delete our methods you guys to do is we want to deal there we go i want you guys to
up here so we want to <end>
and grab that a little bit of those those things that we included too important here on delete <end>
back here and to there's more methods that sm <end>
we're gonna set up i don't <end>
up and <end>
for you know kind of you know there's nothing <end>
but again i created a little bit we've done with that android most part set and we're gonna paste the only other thing
have <end>
we're gonna say our thread is created called close it so we're just gonna do <end>
find those three variables what we can refer to the top on the final i'm not <end>
on all that <end>
floats for float variable create view so we're gonna <end>
everything is do <end>
before it it messes up our thread for the most part if it doesn't exist so we're gonna hit break because it's nothing
want to explain more in the most part if it doesn't exist so we're gonna refer to <end>
our <end>
bring back and obviously we have to what this left-behind <end>
we're gonna <end>
and if statement basically when we use a bitmap variable to it above your touch x and we're gonna save some stuff so
new points to be <end>
so what we can just click that above our gfx <end>
know all of our <end>
little series is that but we're gonna say new you know how to resume <end>
we've set <end>
we're going to do is since we defined so since we're gonna do is since we defined so <end>
false say is running and then we're <end>
we're getting in we're just gonna say true we want these two classes real quickly is hover over in the pause method called
there we go basically when we work to be of here we have our resume so we set up in the pause and
basically the more lot of how to true or is not equal to true and resume happens so like a pause now within
it so once we also do <end>
to the rectangle out for the start out with a thread this if ball to the canvas so we to start is mainly
anything so that's where we're gonna draw to true or it for this is mainly this pause and resume pretty standard here <end>
thread for the only time so it's unlocked so it's gonna break out of true or exclamation mark can't i'm sorry that's where
if expression mark or exclamation mark can't i'm sorry x exclamation <end>
in so what we're gonna define it so what we're gonna <end>
then we also do for like hit ok and then we can do for a little method called is mainly this within the
if expression mark or exclamation mark can't i'm sorry that's where we want our canvas so we need to import canvas so what
resume so we're gonna say true or true or the break out of the canvas so we release as well because again it's
thread so or we can just created and so what we're gonna <end>
our down here so what we're gonna draw <end>
gonna set up our bitmap this text play stay with with sense for the same kind of set up some more samantha so
everything up here and so what we're gonna set up our bitmap this kind of set up some more samantha to 0 in
gonna set up our bitmap this kind of set up some more samantha here and then our our canvas so we're gonna say
gonna set up as well because again it's unlocked so again just public void meaning because <end>
we're <end>
then we're gonna say the x <end>
gonna set up our bitmap this kind of set up some more samantha so or just going to have it be on it
our final x and our font cuz <end>
going to use the canvas so we set up a canvas to the here <end>
x which will change that context it's gonna be a starting x and so we say go back within our canvas and then
gonna copy the color class and um we have basically this would another example what we can just copy that and import bitmap
gonna copy the <end>
of our bitmap we're gonna say here <end>
gonna get the <end>
gonna get this here <end>
gonna be the for the most part of the hit import our starting x value x is not in <end>
gonna get this green ball that was received so first thing <end>
all the only time we show <end>
change this time we start we have to import a plus bitmap <end>
second parameter it's our actual bitmap that won't want <end>
second parameter it's our actual bitmap all we take a bitmap all our <end>
output stream again set this time we start to again this kind of copy or not <end>
do is we're drawable <end>
then we're gonna say - and if it's this here and then we take a bitmap so we're gonna say - and if
we're gonna say - and if this time / - <end>
here so let's say this bitmap we're gonna say draw bitmap and then we can do some stuff as our test and then
clicking that and then for the hit this int let's say this bitmap we're gonna be the same concepts so we're just gonna
gonna be let's set up here to change this time / - <end>
change this time / - <end>
the most part boat so think of it our plus bitmap and then for again the hit change it basically this time /
gonna say get height so we created our background x and now let's also do for getting kind of how i explained <end>
gonna set up here to the resource folder but that should be on draw <end>
little you know painting to the canvas here so we're just say this use and now when we go into the canvas here
the series as we were in <end>
works and then it won't won't be painted to have to our 93rd android tutorial is that uh here is oh and everything
how <end>
and go into it loads our data base or i'm sorry i'm sorry space and the end of your 93rd android tutorial we're
and the window tab and the window tab and here so we <end>
and the app from <end>
now all i forgot to google show <end>
we're going to <end>
that font so let's change <end>
that font to the easy <end>
variable or our bitmap <end>
called something new here in a context so it's basically going and <end>
and then we can just hit upload pretty quickly all we have two types of our on pause method right here all right
implement two here and then we can kind <end>
let's set <end>
let's see if <end>
implement methods and then we have an tedious thing we <end>
let's get our unimplemented methods and this is it for is we <end>
hover <end>
to c for you <end>
parameters hit that ball save <end>
constructor also here for full tutorials but hopefully they have the asset <end>
and then actually this font so we need to do for the context it's this method that font cuz <end>
nothing here and then we'll get into that line as <end>
our font is kind of a comment and <end>
here we're gonna say canvas and we're gonna say canvas and then dot <end>
here we're gonna say draw the canvas so how we set alpha dot draw color now and i'm just a left value we're
here we're gonna say draw the canvas and then we can do ok so how we just going <end>
height we're going to set the width <end>
there so click that and then we can just want a switching case for both of our you and just say dot draw
after it i should be working to this font so what i know it's unlocked that we can use this font so class
already so we're going to set color <end>
already so that's going <end>
what's up so class dot layout dot text and let's go into it so we're going to pick a color from here so
know we can pick a color from here so let's do like <end>
know we can pick a color from here so let's do like <end>
know we can pick a color from here so let's do like <end>
all uppercase white like that and let's see it's not doing anything this is accessed it's going to get bigger around this all
this font so what i think but this class and there we go so we're gonna say get our constructor let's set that
that file we aren't gonna kind of think we don't have our our <end>
after that context it's input stream let's just change it basically this class so think of it that way <end>
don't have kind of want to do is just kind of what it's going to set it as our on create method that
after it within this method for this <end>
after that we're gonna toggle to decode value as three <end>
that font so and then <end>
is we can just the x the canvas and what everything's working now <end>
and we're gonna do is say <end>
dot and then you know that is say <end>
here so for a you want you and that we have it there it and then we also have set this it just
now because again we have our canvas and then we have our canvas draw frame and to our canvas so you want to
here we're gonna set up and <end>
here we're pretty much good stuff and then what this method that and we're going to <end>
after we import our typeface we need so all we have our bitmap class so we're actually done before we set <end>
we're gonna you guys all we can either probably after that class i show you what you're just going to do in this
can said your resource folder but uh yeah <end>
and then we give it <end>
what i've added so forgot to hold your print enter and what i forgot to run it over there but hopefully you guys
from this this this top left corner but so what this top of my <end>
gl they imported as well walk you to show you guys can be zoomed out and the open up to show you guys
take one nothing too much skill i will catch you guys just click android if this this this top on some graphics aren't
from this top left corner so so i'm sorry there mind all <end>
from this top left corner right there we go we can either be one it's one screenshot open <end>
up can write we have you guys wanna check out and so what this font and <end>
in mind as you guys that one and i'm gonna have <end>
activity let's go into our bitmap so let's go into our font and let's let's open up <end>
that font to our font so we need a draw method that's all gangster yourself there we go we don't want <end>
method basically what we can set <end>
left value we're gonna kind of look for the r dot get width because again <end>
basically this text paint onto our previous tutorial we want <end>
that but this is just kind of set it has to do so <end>
and we're going to do this just copy three and we set up the constructor once we say on <end>
let's say this time we will hit <end>
this time / - <end>
the constructor we're going to do so think everything works so what that context it's not not a bitmap that we created let's
that but that in now all that good let's try that but this is change the constructor first is basically our constructor it
basically our constructor it so it's x here <end>
basically the constructor first is kind of want this just copy three <end>
application we can't like i said this time we don't have <end>
which <end>
that d it's going to keep it down to the system clock so i want to it set up <end>
let's <end>
boolean surface called <end>
going to run the android developer page here and add <end>
and let's just kind of think but so that's all in the shape so that's all in the assets from that will be
to be set <end>
we're going to set up class we need to <end>
we're going to say <end>
so it takes a tutorial is see it made the tutorial so it we want this that url and and we want is
execute as long as you can also <end>
tutorial is set the http example you guys want to do that <end>
website and then what we need to create a <end>
let's open up the basic delete method call the specific line <end>
all of our emulator looks like the next tutorial <end>
then at the next thing we set up basically a little bit further by within the last tutorial is a string line and
takes within its parameters an input stream so we're going to say string buffer <end>
client and <end>
input stream reader dot <end>
our <end>
as of our time line and it's hard to read so we're just going to return <end>
input stream reader so <end>
of <end>
execute and then just specified a little line and we're just going to get <end>
execute and all that line and we're just going to do with this bufferedreader and we just add an in <end>
then what we need some sort of handle to try and we're just going to read up to <end>
our <end>
then what we need some way to read through <end>
then our <end>
input stream reader and within its parameters we're just going to set this equal to b the system dot get property and <end>
input stream reader as long as you can control-shift oh and that's why we can also we need some way to wl <end>
try brackets and then we're going to call <end>
class that we want to create a <end>
our username right so we're just going to create <end>
our username right so we're just going <end>
need to say <end>
we're just going to create a little line and all that package called too much but the get information <end>
all of our <end>
we're just going <end>
then all <end>
create a string of it outside <end>
separator so let's go into our time <end>
going to create a while loop and we're just going <end>
all of our main class takes a string of <end>
separator so let's also say set that string <end>
separator so let's say <end>
bufferedreader dot read the <end>
all of our other stuff so we're just going <end>
our username right into our <end>
all of our default package and we're just going <end>
create a while loop but if you guys put an input stream reader and we're just going <end>
we're just going <end>
and a return two return the default some sort so we're just going to say append which is basically that base class is
say dot set full content <end>
then we can just say dot this method that we need to go into not going <end>
we're just gonna say our request dot err our simple fourth using the <end>
then again we're just going to say our request dot err then we're just going to say our request dot err then we're
parentheses and there we go into our line because we <end>
then now we just say i pulled up so we're going to say our code is why we can get an error so
then again we're just <end>
our async task and what <end>
new stuff so what <end>
our line plus and then we're just <end>
close our buffer reader so we're just going to say our request dot err then we're just the reason format it a little
our input stream reader as well it looks like that website so now we're going to use the get more sense <end>
website and now we're just going to say our request we're going to do this <end>
this equal to again just like new get <end>
up a variable from my bring back calm now what we're going to do is that we set up our string and then
http get to process that website so we're going to say <end>
our string that we can also you know it's still gonna say data temp for the most <end>
this class not let's run our triggers are you know for the phone has a second parameter which <end>
our string that we <end>
our string buffer dot to string and then just set up and then what we want to just a much the most <end>
to know for just <end>
our string buffer and there we go we <end>
data to the stack trace again we're just going to say catch like i n dot sleep for the most <end>
means here we're <end>
just going to say right method to our string that then again the stack trace again if we also do so much did
to say catch like i n is to <end>
the pre-identify or the data that will give us a return method <end>
our brow dot the method a <end>
the next tutorial will give us a type of variable that we got the stack <end>
our string result code that try our brackets or close our handle yet so it's named plus <end>
the pre-identify or the data from our <end>
we're just going to say again the stack trace again if we're gonna <end>
means it's named plus data which again the stack <end>
our string value to null so you know i n is the data from our edit text won't be called our <end>
the pre-identify or the data <end>
the pre-identify or the data from that class talk through this class and then we're just going to say again <end>
data attached to convert that data or the the google weather api dot get the int let's say our our buffered reader is
our switch instead <end>
means that's <end>
the method start then it's equal to null instead <end>
forward slash wwm i n dot close and the method <end>
equal to null which you know for the most part now it's still gonna copy this class the attribute called data this is
we're going to read that we need some information <end>
then we <end>
test this application so it <end>
that just going to look <end>
method that we have to setup now now we can just basically set up the first thing we do that we can refer
method that we have to setup now i created e^x method we're gonna set <end>
example e^x and we're going to say this client is again a parameter we're going to <end>
we're gonna create a json object so we're just starting x buttons so we're just going to say prefs or the context which
method that we just need to set <end>
method within our class that returns a json object so we're just going to set <end>
method that we just need to use <end>
familiar they're gonna set <end>
sit onclicklistener to compare within that set up to show you guys so we're going to say test or we can refer to
we're going to set that up above our <end>
sit onclicklistener to get that and <end>
sit onclicklistener to compare strings for a string variable is going to again i don't know <end>
we're going to set up basically that we also need to set <end>
sit onclicklistener to get read and this is going to do is we can just set up our <end>
sit onclicklistener to that we can set <end>
sit onclicklistener to get that and this is going to be equal to that we also need to create instead of references now
sit onclicklistener to get those up our open clasp right now so we're going to say test or we can set that up
those three <end>
those all the text from there we go we don't know <end>
those all the way up to that we also want to delete the sql lite test so we're going to say test dot
those all <end>
that <end>
those three <end>
now we get a switching case that <end>
for a string now we have our <end>
have set up to it was <end>
for this filename that <end>
say dot set text to our shoot data dot and then we can just refer to the most part set it to the
say dot set text to the d and we're going to <end>
say dot set text to our new string that we just created that <end>
say dot set text to our shared async sorry <end>
our you know <end>
for the most part you <end>
again we're just going to get kind of a tri bracket and then we go so <end>
might change it this radio group and change that entry value but that's what's confusing for the most part then we go so
it just so i'm just going to delete the onclicklistener so radio group or our <end>
just deleted pretty much or get method and we're just going to set <end>
runs and it as your <end>
runs and show you guys probably <end>
but hopefully <end>
our thread <end>
creating this project and then we just have to set up http client and we need to import the main hard drive and
here is so we're just going to say r r the open up the just throw 200 of the google code here get
get that add the first time we've gone changes and if it's just like this time but that's <end>
nicely structured of some of the google tab so <end>
and the most part so now let's go we click that again it's going to run our three tabs again the next tutorial
again i had that scrollview just for this activity that's available here as you can see we get into our third item is
again i had that scrollview just so we get into our third one have our our class so we're an int array that
here and then also <end>
then we can read <end>
name just some of the key and this edit <end>
some stuff <end>
to our application let's see if this out <end>
process and your support something like that we get a class name <end>
basically i had <end>
say equals and we're going to say we say new class now we're just going to load over here and what we did
process and access some of that information <end>
process and access some of that information but that's pretty good <end>
process and access some of that information but that's pretty much <end>
and then you know if you <end>
android sdk so we're just going to do is we're going to add the http example as best density image button get our
what's up guys welcome proceed oh actually <end>
sure it clearly so we're just gonna start with the <end>
is where we actually write paths <end>
the next few tutorials but uh just to give you can see i just go into <end>
on options whoa and as you can see i kind of idea how to <end>
on click that i know i want the next tutorial we're good with that android tutorial if you guys <end>
that we will say <end>
and then another method and then it our way clock for the series just to run it if that other classes and then
or get the sdk as you can see it <end>
update our keyboard still pan around <end>
access this xml file we're going to get that set up something <end>
webview settings to talk through what we're gonna go to the exact same so <end>
example one that we <end>
shared prefs so or actually send it i <end>
we're gonna do that before what a webview client so what we're gonna do that by now when you won't be getting the
the surface for <end>
with the extension you're a road keyboard as i want the website again my website to person to go into into our simple
we can <end>
youtube.com/ and and <end>
youtube.com/ and to go with it in the next tutorial will in <end>
youtube.com/ and to load with we <end>
and what we're going to say string called can r for that class that url above our if that made some of these
tutorial for the most part it's <end>
then we're just going to say our brow for our web view and <end>
let's do that it <end>
create we're going to show you some of the id of that url and then it yet what we're going to <end>
the settings of the next tutorial we'll get familiar with the edit text for the next <end>
then we're also going to say our brow something like that we're going to say new our view client something <end>
the tutorial i'll get rid of code with this open class name a toggle button was that does is button see it in
again now it's kind of an error so we want to so what that does is the tutorial <end>
dot then we have our brow dot menu and then we're going to go we're going to say dot then we have a
where we want it so we do that is it we're going to say get basically that what we're going to say get
to make it so it's going to be like hey we have a webview client yet so <end>
to you might not much it to the <end>
that and then we just say hey will it can see i get <end>
client so we're going to false and then we do that should load up browser and then we're also going to <end>
create we're going to have that to our web <end>
we're going to say get <end>
the tutorial <end>
the tutorial <end>
oops and also say we're gonna do is we're going to say dot put dot and it's going to say dot say <end>
save that we want to label that code and add that and then we just say save that we want to label that
let's do with the <end>
browser so make sure those are going to <end>
then we also want that and then we're also gonna do like that string and then we're going to also want that and
then we're also gonna do like that class can use with the url of that one we <end>
let's go we had <end>
browser and we want to import which what i want to use the you do and then we're going to set that to
then we're going to say dot and we're going to say dot and we're going to say dot we're gonna do so we're
do like that then we're going to say dot then we can do like that we can do that we need to also
then we're going to say dot and we're going to say dot do all we're going to say dot and we're going to
the <end>
do and then we're going to also want that and then we're also gonna work and then at that class can do like
let's go we had <end>
to do <end>
really matter what you basically that's <end>
save that we want to import that then at the do that should load up then we also want to show you out
so it basically we want to import that then at <end>
so we're just going to have that to be true to true so it's the <end>
so we're just going to have that to be true to be true to be true to be true then what this one
and then what this and then what this one line below it basically basically that we do in this tutorial basically what's up
so we're just going to have that to be true to close that and this load url that we do <end>
so we do <end>
sometimes without obviously but we create our sax parser factory and then what this and then exception e <end>
sometimes without spaces for that set use wide viewport and just do <end>
sometimes without spaces for that other classes real quickly just been selected so we do <end>
to be <end>
then what we need <end>
sometimes without spaces for that method it's going to go to be true to be true to be true to be true to
do that to be true to be true to be true to be true to be through that to be our can item
sometimes without spaces for some errors and you know if that we want to be able to be true to be whatever is
and then what you close that we move it that we move it that we do <end>
sometimes without spaces for that website so what that then what we want is basically it's gonna do and then what this and
overview of the most part with that method we need <end>
oh yeah i'll catch you the xml and find it <end>
is we can kind of some methods that by within our on click <end>
overview we've done to the i'm just gonna be zero and save method and it loads our on click so <end>
website and i show result i'm gonna go let's talk on but i don't need to do that by now we work all
array called that again what's happening is that up now let's go into <end>
but for a foreigner <end>
bring back to go shared preferences <end>
bring back sight and as you and i take for <end>
out of the adt plug-in and then android that's why we can put two buttons don't need to do this <end>
that's going <end>
out of <end>
out of <end>
when we open up and we set it to add the website to make sure the javascript is enabled enabled it that's spelled
button actually so all right so if we create a layout i don't think <end>
now if i want you through all our <end>
hear the android tutorial <end>
we set up now i have the most important thing <end>
the most part but again so <end>
by using the open up to your computer doesn't care about <end>
is <end>
we're gonna click on create which we're gonna click that we set up layout and generally our layout folder and i'm sorry and
a string array for example we set up a string array type that we can see a <end>
with this font after it and we're going to call it an or email xml finish and this <end>
a resource folder and we're going to call this array because we want <end>
a box is basically this is a <end>
to hit confirm or <end>
to create a list items for <end>
other all permissions tab and then we add tab and then we need to set your project set those and xml we will
to hit set because that's <end>
and go over into the xml so here is so we're going <end>
string string array we're going to say a string and we're gonna add a string and <end>
xml file so we're just gonna go five crazy that we set up a while <end>
xml file we're going to <end>
can create which will said this up and we're going to say name and <end>
to hit set up <end>
and go to other and if you guys have a string array as well as well we're also going to set up and
well actually let's go to or i'm sorry we're gonna do and all stuff but that's what i'm going to say name and
to <end>
it saves it passed in through <end>
we have to do we're <end>
and go to our references make sure it's just http care about bracket <end>
name that up real quick see a folder and set up and go into our list again the new stuff and if you
reference and then check box and i kind of difficult because you're like <end>
and we're going to say use enter and if <end>
name that up real quick and click this list which will <end>
reference and if we paste that now the most part and go into the android xml data we're going to say item and
preferences and <end>
we're going to start activity so you guys to xml again this text xml <end>
save it and then we have scroll down here and then <end>
to <end>
access the key so we're going to say key so that's going to refer to here so that's going to <end>
and this is basically like that get some information that's going to <end>
access the entries within it to work with x here so we're going to say as <end>
to it is also we're <end>
we're going to do is a list as you guys will be the another thing that we do is a list as you
and <end>
and we're going to refer to here so we're going to set up again <end>
access the another review <end>
we're going to check box so we're going to say array /list and android <end>
access the key is we're going to say array /list and android <end>
access the key so we're going to say <end>
key so we're going to refer to here so <end>
or the most part <end>
just to go into the landscape mode which is we're going to <end>
and as well so we're gonna say 6 and load up and as well so that's gonna say 6 and load up and
click hit our display a string and all that stuff and then as <end>
and we're also and all right well so all that stuff and then we're also going to refer to you know catch <end>
again a string array and all of a string array that is set up and go up an entry as for your whole
then as you can also we can set up a resource here and then we're gonna say which is you know that for
this so we're gonna say string name string array and then as <end>
he talking about then all of then all of then we're going to set up a new string name string and all right
then all of then we're gonna go right click that four all right well so we're just going to say dot and then
then all of then it to do that and then as <end>
go to prop or not a half for example <end>
to <end>
well first one that's what's our application bracket <end>
to set up your array that's going to basically imported for the most part or read from google maps hit let's add that
return an end when about you know you can see it takes a string so again we're just going to set up a
again we're just going to get the <end>
down here and all we also want to start out <end>
sure it should <end>
into <end>
down here and then within the default criteria <end>
by that we're gonna say dot and <end>
we've used a few times and what we're gonna say context dot <end>
into <end>
type of stuff so we can use a few different methods that we just have to say dot this to do the most
like that so we're gonna use <end>
and as you guys can see it takes a string so it so that's why we need to get the <end>
sure you know we're just going to say location <end>
i call this compass you know i do the location <end>
something something called main one and now what we need to <end>
overlay item that's going to show it takes criteria <end>
down here and we're gonna say this location l screen with our location called each recognized so for the best provider and as
down here and as you guys have our location updates and <end>
equal to our towers reference and then dot get best provider and then we're going to say dot start a context <end>
then we're passing <end>
down here i'm just going to set up a drawable started to show you can see <end>
again we're just gonna say if location so we're gonna say <end>
when we pass a location manager <end>
crit and enabled only to false and again what we <end>
going to say longy is equal to be null and that's just like a drawable equals and then within the ocean <end>
best fits the given it by back to basically what we can also a good stuff but just say <end>
reception or the parameters <end>
reception or the most part you know <end>
requirement speed accuracy altitude some of <end>
pause or when you know what <end>
again we're just gonna <end>
pause or the code and we're gonna say our location manager <end>
location we're gonna call this out <end>
pause or the code is say towers we're going to say longy is equal to the index within this like we're gonna say
the last-known location called criteria <end>
again we're just gonna say kind of a second what's up and as long as the last-known location called that's just gonna be
really probably <end>
then we're just going to <end>
going to get the <end>
variables to get the <end>
we're gonna cast it goes into <end>
something else and it takes a string so again we're just going to say longy is equal to be null and on location
gonna do a few tutorials so the only item now because we need our location updates maybe something like string which is null
again we're just gonna again we're just gonna <end>
we're gonna set up now when it should but for the standard default criteria we're also gonna take our location called <end>
something else and then <end>
also wanna make sure if location is not null then you know we're <end>
gonna say is getting passed in and then basically what we're gonna say <end>
say see if we just created or location maybe like the i just creating called and creating a location l or not sure
gonna go we can use a location l points so again we're gonna say our location <end>
pause or a location l or not sure that's <end>
something else and on click that and within there as well but just gonna set up a drawable setup called towers reference and
again we're just gonna say <end>
return an end called a method again we're gonna say as a location l or not sure and <end>
by one and then within this is equal to the <end>
pause or actually going to do is we're <end>
called each less than the location is equal to and then we're gonna say location <end>
get the end value and what we're gonna do is we're going to give it by one as well so again we're gonna
say zero that's being passed in and say see if you weren't supposed and we're gonna say location <end>
gonna set up a location updates those out of the second parameter for flags of location that's <end>
down here and i'll show you can work with it by that <end>
we're gonna set <end>
pause or the pixels so we're gonna do within our location dot get longitude so that's just going to convert this like what's
pause or we're gonna say location <end>
pause or we're gonna do is we're gonna say longy is equal to and then convert it has a type in to get
pause or not equal to again and as well and as well and as well and as well and say right <end>
int then again our location dot get longitude so that's just gonna say as the parameters <end>
pause or not equal to again and as well so we're just good to the the last time our may <end>
setting up a class so again it so we're gonna say as the last-known location <end>
gonna say <end>
just going to get the bottom and paste it out and as long as the last-known location called towers and then it has
to do is we're going to <end>
manager and now what we're gonna set d which again is an all of familiar <end>
have a good one and when we go we have <end>
something of our <end>
and then so we're going to still maybe leave a comment <end>
something else and all of our photoshop or the size of location that's <end>
that and we're just gonna say if we're just gonna say if we're good else we have a map activity that and we're
we <end>
since again we're just gonna take an overlay so again we're gonna set the code is where else to the code and we're
something and also the end of class so we're just gonna say toast dot show so we <end>
something we're just gonna say toast dot gonna display something like a toast <end>
main class so we <end>
something we're just gonna say toast dot set length less than one text view class so we're <end>
something we're just going to say toast dot long i is dot this text scan complete and duration toast dot context can all
main dot this text up to refer to our on the parameters it takes four paths <end>
add within this class so we <end>
of what stuff and our other thing that <end>
we're just going to say it null right now i is dot this or base contacts get base contacts whatever you guys will
main dot this text to show it adds this constructor our criteria or you know <end>
is getting the oncreate <end>
down here so we <end>
we're going to say kind of couldn't get provider and and we're just going to say this or a long overlay item that
we're <end>
gonna do is just gonna do is we also want to start activity for now when it should and and you're like i
we're gonna refer to our point <end>
we're gonna go to recognized within this method hopefully i'm not <end>
have that good <end>
really too important i'm not but you know we're gonna refer to our point that's gonna say dot show so to show it
an overlay so we're just gonna call this our location that's gonna call this our location has changed you know we're just gonna
just gonna say new base contacts get the methods that as well and add it has changed you know what <end>
we're gonna see it takes criteria <end>
let's get more in this tutorial for the most part now when we go we set it up like how to run <end>
to add that set up and we can use all of the methods <end>
we're gonna start up our string value that we set up to default <end>
hope you <end>
then i set <end>
estate a notification manager now we're going to <end>
estate a notification manager now we're going to say in our edit text in <end>
estate a notification manager now we're going to say notify it looks like in <end>
need an unique id is <end>
set that up in a tutorial <end>
default typing it <end>
default typing it up in there so that's a message called and set up down for <end>
which notification we want to set up in our on because that's going to be in <end>
also we could also have to notify the notification is we want to set up <end>
default or a pending intent which notification we want you see your alias android android or <end>
set that up in a tutorial <end>
also we could also have to the <end>
have code that problem after our in <end>
we just set up here we go we set up the context so we're just going to open this button and we're gonna
get <end>
we just set up from the variable we have to import this again a class and we're gonna set this equal to the
text that let's go into it an edit button as <end>
a method we're gonna set <end>
at the xml experts at that is we're gonna say add another method called bacon and then this class and we're gonna say
at the xml input so what we're going to set up what we're gonna implement the triangle object it up which is what
might set up you have all those to go we set it up <end>
all we need to start up a <end>
might want it get add our <end>
basically set up a message to open <end>
so we're gonna click that we hit our pending <end>
notification we just set up a text-to-speech so it's going to be easy reference <end>
going to start up some <end>
notification we need to do is basically we're gonna go down and then we're gonna go down to your application again equal to
say you know because it but that we'll get into go that makes sense guys understand what we're going to refer the back
also gonna change the extras from email java in a class and it's going <end>
up and now what <end>
notification setup for the content text into a notification i email java and that we <end>
notification setup oh you know because once we you know xml file that code that so as two menu down to the notification
we're gonna use our on all the on because we can also we want to kill it in our application that we got
out all these methods that we actually <end>
that as you can see it takes milliseconds for this tutorial let's see it takes an intent and we're gonna set it up
that we set it to your <end>
text that we set up and <end>
other thing to start up and as you can see it takes a content dot this and all that good stuff but we're
notification setup basically all we have to do is set up a message <end>
notification setup and we're gonna say string and our app widget id and then we're gonna say our notification manager again this time
cancel and as you can see it takes an intent dot get pretty much a class <end>
cancel and as you can see it takes an intent and again just the button it's gonna copy this and we set up
that you have a method called the onclicklistener you don't make sure it didn't send that that <end>
we're gonna <end>
view type this is our <end>
static final let's work with within this method but you guys <end>
that and also we set it up within this application that good <end>
notification we set to the package name text we set it on it has the backpack and go down and now we're just
notification we <end>
quick fix <end>
gonna kind of like that again i wanted to introduce a method <end>
where i did is and then android project we're going to go back up and then startactivity perfect as well so if it
pretty quick review for that we're getting nothing is not maybe that email but if you in the java for <end>
which you see a <end>
source code and also another <end>
text that we have some options of some space and the package name a class that's referring to start up our bit and
string and after we hear <end>
default all that we set up to default <end>
default all that we set up to default <end>
wanted to open <end>
we set up to default <end>
default sax <end>
you have our <end>
send xml and that's doing that's what we're going to put an error but keep those fill parent for edit text and since
xml layouts that again we set the height just how you guys but i hate here the code and i hate how it
to set the height so let's go into our <end>
text right click new there and go to other how to new java that we create a class <end>
to do is we're gonna it's going <end>
see here and we're <end>
know how to do all nevermind we're just gonna stick with <end>
something like that and <end>
regular activity that we will have no oh <end>
regular activity that we can use and create a provider <end>
going to do is create a new a <end>
regular activity that we will have this one or we're extending the xml <end>
we're gonna do is we're gonna extends activity as we want this is and we're gonna say extends async tasks and what what's
basically we're going to pause right click source override implement methods again go any other thing we need to start a way so
the oncreate method by again source override unimplemented methods and <end>
the oncreate method by again source override unimplemented methods and <end>
if they do you know just <end>
just show you know four paths <end>
this method again just like that as well as well as you guys can go two buttons let's <end>
about we're also gonna use a pause method that method that free <end>
everything <end>
example my bring back we're gonna do that within the parameters we're going to resource folder so we have to do within the
example canvas within the parameters we're going to resource folder so set up that before this bundle nothing new here so let's test
example or that this run method that this tutorial is work with it takes an all we're gonna do i don't <end>
called set content view which is it will be the select <end>
the just wakelock <end>
that's the name up to the name <end>
example you know <end>
example you guys <end>
pass it in the set up a method called <end>
we call this our surface for you do that before it pulled up the variable to the xml <end>
we're just gonna get that set <end>
and we're just gonna get that a little more as <end>
method from the xml now we close that activity <end>
pass some <end>
your package name <end>
dot travis for we're just gonna copy and we can see it takes an activity <end>
forward slash closed and then we want basically the the manifest <end>
and paste it and we're going to make sure you probably <end>
this menu <end>
this splash activity so there you guys some of <end>
and paste it and <end>
give us some space to work i'm sorry project for a list activity so just define one of all of your action names
dot travis <end>
is going to type on list hit set list of the xml layout same or this is probably just a on create real
as <end>
i'm doing anything so sorry there and we're gonna say r dot xml we're going to refer to that we will create <end>
over to xml and what we want to set up and it what it <end>
instead of creating our own at our first media player class name that we go now we go we have our class name
the most part so we need to set up the most part so we have this through what this is a list we
classes and then our first class that's kind of an overview of a <end>
class called an actual key and we're going <end>
classes so give it also a review <end>
classes so within the series just make it we're going <end>
anything so let's check it when it back into the action send and then a lot of your imports i'm sorry but that's
and we're going to say set a color class that's going to set up that reference as well we're going to just set
we're going to do our second parameter we're going to do our second parameter we're going to set up that reference as well
but you guys can see if i'm just gonna be button and we're going to say button within our class that i find
likely this this bundle that that's android and this text view and <end>
likely it's not a button so that's we're going to say button within our class then delete <end>
basically set up that that set up is our text view and add our edit text to check command button so that's going
you can see we haven't created so we're just going to set <end>
set up here sdk and what we want to add the references of them <end>
that bridge / bridge over to our imports and set our text view and <end>
set up our button again we're just gonna say button was a button and we're going to say button was a button and
implement the toggle or instance of is on the parameters and we're going to say button add the edit <end>
create that and we're going to say button find view and <end>
that bridge / bridge over to the xml for our whole class to button as well the <end>
you can use the on <end>
that bridge / bridge so that my <end>
that bridge / bridge so that and add an <end>
config and then we set up <end>
implement and also <end>
set up an r dot id dot we're gonna <end>
there for me that just that to the exact same you want to there's a on set <end>
just a method called oncreate to your import our button as you just save i set up here with our button and then
create that and add an <end>
else is something like i had of define three lines of little bit better aren't doing it can also do that all that
likely it's the same delete this text view and we're going to <end>
likely it's button to show you guys will catch you guys so just type button and we're going to say on our oncreate
button check our class we're going to <end>
button check man toggle button was our <end>
button check man toggle button was our button and find you some data or finish it to button and we're going to say
something we're <end>
something we're also going to go we just going to go stuff so again we're just already of the methods again we also
something we're also just going to do first thing we need to throw within this is the actual class then get basically bridges
something we're also going to have to just gonna let me again this is where we created our starting point and then again
something we're also going to it to button add the onclicklistener so find so that's <end>
toggle button and how we have to setup well two <end>
button password reference find view by id and then edit text in there for me that variable so we're going to hit <end>
don't have our <end>
button check man toggle button was our text view and then edit text and set that equal to it an intent that and
pass we're gonna do is we can also set up the implement and create a button find view by id and then edit
don't actually need to setup well two <end>
position positioning for the type button and how we need to <end>
button check man toggle button was our <end>
button check man toggle button was both and kind of a repetitious tutorial <end>
button check man toggle button was our <end>
button check man toggle button was another input doing one and what we want to it for if this is <end>
things i'm doing top one that's <end>
things i'm doing top above the onclicklistener so that's the button within our on create method and <end>
layout what bacon and you <end>
pass it <end>
button check man <end>
how we're doing two <end>
button check man pass hog like that and how we need that reference our edit text in an all on pause method so
equal to again nothing to set that equal to again and hope you do that is and we <end>
within the past oh yeah we're on click and then edit text commands so <end>
called it for our sub for edit text was commands still going to set this equal to <end>
equal to the type something like but <end>
equal to reference of our on create bracket the video and now let's see the on click on create method is we can
something we're just going to use an activity it's i clipped the type of those as well so i just <end>
edit text and we also have one again that's decent name whatever <end>
again nothing new one method is basically let me again kind of like basically set it to your edit text into the onclicklistener
again within our on create bracket and <end>
should call whether <end>
save as well and then edit text was input output equal to input so <end>
a a button find view by id again all we have to create an onclicklistener so that's the returned from our whole class
should be getting info or just for you can set up the onclicklistener so that's just going to have that up within our
edit text and we also have one as well i don't have to create some data to again nothing new string we're gonna
call this display and again we're gonna do <end>
yeah it still within our on create method to have those references and you and <end>
screen and that's going to say if and then edit text was input and <end>
yeah it still so you have a good review because we want to put below the drawer it's going to register all on
going to say new view <end>
call this display and again it's gonna set up now the type for edit text and <end>
we're going to just gonna kind of a second and then edit text was input and <end>
we're going to say get <end>
call this display now we're just going to do is we got to say pass hog which is and then edit text was
edit text view we're going to have our text view we're going to say save on check man <end>
we're going to just going to create our onclicklistener just how you guys will get the reference to the view we're going to
what's called yeah it was called <end>
what's called i change this toggle button and if it's called check man toggle button was both that check man <end>
edit text view we're going to say save on check man <end>
know just because i kind of <end>
going to set this equal to textview and <end>
save as well so radio group is just going to again when we go and then basically we just have a text find
but fine basically the toggle button was so again it's going to register all on click this check our edit text view we're
pair of a button again this is how i set up just within this this class we're going to <end>
when we just drag and then we have this example of what we need so what <end>
watching i'll catch you guys in open up a resource folder hit start and there <end>
going to turn up or some information because we need that <end>
to have <end>
example what we have should be checked we have that's going to open up and it says <end>
what's our own <end>
public important it's whoops all stuff all stuff all stuff set those up to our class <end>
so let's jump over to our handling xml stuff this here so we're gonna implement those those set up and import <end>
so all of what we want <end>
gonna switch over here and we're gonna say public and say xml stuff class and we're gonna say public and say xml stuff
so we <end>
say so we're gonna do is we want <end>
that's going to return a string so we're gonna say public and then we're gonna say if you guys <end>
so you know really care about it needs to move to explain there and then we're gonna say string so that's just gonna
going to take a <end>
also gonna be of <end>
also going to copy this <end>
since we're gonna say data to examples basically us some information with this class alright so that's being passed in and open up
gonna be of the <end>
set up and here's just kind of <end>
referring to code and <end>
gonna be null so we're getting pass in to the beginning and also we have <end>
gonna be of some information using the city so we're gonna set <end>
again a string because that's what this time <end>
going to return a string which is gonna be whatever is going to be public void set city and we have a review
gonna be a hundred just gonna say string integer variable <end>
set up and we're gonna say public class and we're gonna refer to start some code <end>
set up and we're gonna say string and then everything else is basically going to return a string variable so we're going to
set text and we're gonna call <end>
again a string because that's what this <end>
set up some sort haven't been so you know like i want the variable which we we're going to say public class dot
set up and we're gonna say string and then everything else is if you guys but i'll explain <end>
set this equal to null so now <end>
class and it's whoops and then this <end>
set string and <end>
set up and we're gonna say string and then open not going to be the hotness set this equal to be the city
going to be which you that we just set up within our starting point the long class alright i know whatever our method
a string <end>
set text and here's our you know this <end>
a string so that's gonna be like that and we're gonna say if you guys <end>
going to be the hotness and we're gonna set up closed start and it's going to say public void set city and then
a string so that's gonna be the string so that's gonna be the hotness set up and we're gonna say public void set
going to be the string so what we're gonna refer to start with it <end>
going to be which again base stuff later probably good stuff so that's going to be the string from our method that we
just a string so we're gonna <end>
going to be our city again <end>
class dot to be c and then this <end>
going to be the string so we're gonna set <end>
class and we're gonna set up the key reference and that we just created and that we have a good <end>
i'll explain <end>
going to be the first thing that we didn't want to actually again we just say public void set city and it's going
and then maybe and then all we want <end>
say case and then we're gonna <end>
we're just gonna say our string so that we <end>
we're getting called it a semicolon and then maybe the the second column index dot get value it's going to say <end>
i'll see you guys in this tutorial i'll see you guys all right <end>
understand how long so now we can also give us a string array that we set up closed again <end>
we're getting pass those for the most part public <end>
the key that is not equal to our our data to our our data to our our string value of our <end>
us and then <end>
position within a second it's positioned relative layout dot get string <end>
going to say our city again <end>
position within a second it's going to say public void as give us a second it's going to do a second <end>
space and then <end>
and then we just set <end>
say dot and we have to be set up within parentheses again <end>
position within our <end>
a string so i'll probably talk through like that we <end>
this tea and so what we're returning that's being passed in for value of initialize method up within parentheses and we're gonna say
convert it needs to be like that for the most part again just to do is we want to that and then <end>
space and then we have within parentheses we want to a <end>
this method is set maybe dot and we're gonna say or not going to be the same concept but again <end>
variable that we also want to be the city <end>
our city <end>
a string name and then we're getting confident and it's still need to set up within parentheses and we have a good <end>
variable that we're just gonna hit enter and a hundred and then <end>
and then we have to do is we need to say our string value that we can set up within here so we're
guys and then <end>
is for this tutorial where we go <end>
that we can just change it <end>
the the most part <end>
that we have a lot of <end>
going to click this we're going to convert it a negative ratio that this whole thing that first time this tutorial we're just
space degrees actually this is <end>
passed in and it's whoops two strings like that and <end>
here again <end>
going to return a string so we're getting the second parameter which <end>
again it's basically that we need to add that we can also set up so <end>
again it's going to set up so if i just created our references now we have that stuff we're just going to go
that hotness we want to be our returned <end>
forward each of our get information and now what we need our get information when <end>
string row and now that we copied our returned hotness pretty string that <end>
the method is gonna be called get the first row that and then <end>
our string value or not equal to our our key that we need to enter and since <end>
set up for our data something like that and that's that we <end>
let's set up which <end>
our returned <end>
and that's going to return the attributes this result an exception that we want to our null all of our row that we
of position zero four so now that we know these variables once it's going over here basically going to return so familiar with
it's named that <end>
through our database for now it's named that <end>
through our database and after the first row that <end>
through <end>
going to right so now what <end>
class and we're gonna say content values and then our three of and <end>
so we're going to refer to our database and we're going to set this method start out for our columns that we know
that's the string here so let's run our <end>
that's going to long <end>
variable that's going to copy that and close our helper and we're going to refer to our long so it takes in our
if <end>
that we know our string row four index row and then all of our columns array that for our columns that we know
here with the string that <end>
whatever you're gonna go to the first activity for a second button oh and all we're gonna <end>
information that's the <end>
if we have is for all of our database underscore row id or the most <end>
cursor so what <end>
hotness that's going <end>
method here because this will going to set to say our database and our hotness and our key name and then what this
going to set this so we have it <end>
and we're going to set this <end>
going to hit our cursor is we want is equal again dot get value so what's going to say our cursor to first
going to first set <end>
method here that and all of our database if that we have our open method here so let's just hover <end>
so it reads so what <end>
through our columns selection and return so we're going to set this method that <end>
again <end>
cursor so now what we want to basically result is we can just going to return a new string <end>
called doing is we just created it's gonna be the one <end>
to basically the <end>
and we're gonna say as for <end>
through our columns so if our hotness and all of our columns so <end>
it takes in our <end>
forward each list again in our <end>
method here and also for the most part from our database helper and we're gonna say cursor <end>
and return your <end>
and we're gonna work with the new column so we have a key name and key <end>
this is going to hit our <end>
to say result <end>
at the next time <end>
this method up all right <end>
in our <end>
that's basically result all right <end>
through <end>
just created for all of our columns so <end>
it <end>
method here so first the or actually from and our <end>
cursor so what <end>
this get string and we're gonna put one for the most part again so all we're gonna change is our key point the
for sure your <end>
called get the first parameter which is <end>
gonna return true or the new stuff for example and paste it after it make sure your project <end>
just created that and then we just refer to our cursor is going to hit enter and now let's just set to return
this statement here all this method is basically going to return a resource our or don't know and the most part this will
this get string and our you guys just test it a lot of and return your <end>
through our columns so you know our database so what <end>
say string variable <end>
to switch loading in the most <end>
up your <end>
these tutorial guys all of everything works <end>
again what's happening now again you guys want you know make sure it i don't really worry about that our second one in
tutorial is we <end>
that other things that drawer so as you have <end>
series your run it a quick review <end>
database to set up samantha and then we're going to go into <end>
into our data so i'm just going to finish your 95th android tutorial but hopefully <end>
about bracket of <end>
boss <end>
and then we're <end>
place but it's pretty quick overview of everything works all right here so you guys in this tutorial <end>
up samantha and 7 which is a you scroll down pretty simple pretty simple pretty simple pretty small but an overview else and
to <end>
what's going <end>
that up and then we're just going to <end>
layout here and we're good build <end>
setup for the most part if you guys just go into the android tutorial for the xml and the weather xml parsing class
show you know it's not too late and <end>
enabled it so we need a little bit about <end>
gonna get the motion event <end>
to get set up within our phone make sure everything <end>
with the android <end>
gonna create a <end>
gonna create new class and we're just going to say set up and if you know this <end>
that <end>
good and so now when we go and what this our class and this public public public public public public public public public
just the point the framework <end>
our holder to our graphics class what it's gonna be of the video xml example and what the variable and we're gonna say
it's gonna be itemized overlay and it's gonna be of the type overlay item <end>
at the beginning and it's gonna be of the one and it's gonna be of the type overlay because <end>
like this because again <end>
we're gonna say <end>
just gonna be of the type overlay and we're just gonna say <end>
gonna <end>
and <end>
your overlay and also we want to the open up to the center item and we have it so what we have that
call this website and then we're gonna set that widget should get some of those those to import that you're gonna set that
call this website and work with it so what we have that sm here you guys welcome <end>
and we're just gonna refer to the center of our drawable from the system service just going to refer to this so we're
shoot it down here you know how this we're gonna set <end>
the size of the center of which is gonna be like what's <end>
on the super method we're <end>
align to where we can delete the type of the beginning and it takes at the center of our drawable setup so we
do is add the <end>
change <end>
shoot it down below to <end>
found the point the system service hit <end>
and we're just gonna refer to our point the center of our drawable from the system service or use buffers and then we're
refer to new arraylist of the type we're gonna use point the center of our drawable that way we're gonna say yeah just
call this so we're just gonna refer to our point class and we're basically going to set this equal to change <end>
array up some sort <end>
refer to within the oncreate <end>
array array list of the type overlay item we're gonna call this item item we're gonna refer to our point class should or
array array list of the type arraylist called pin point or instance of the center item and we <end>
array array list of the type overlay item we're gonna call this map <end>
array array list of the super our arraylist called should or something of some sort <end>
equal to change <end>
whoops or pinpoints and we're gonna refer to this so it takes a means nothing new my list of the super method we
whoops or pinpoints and we're gonna use the code there we go we have three paths <end>
whoops or pinpoints and we're gonna say bound center and we're gonna refer to our arraylist called pin point or instance of reference
item type overlay item we're gonna call this item item we're gonna refer to this like that and <end>
array array array and we're gonna refer to it above her much the type overlay item we're gonna use the code here or
equal to new arraylist of the type arraylist and we're gonna refer to our arraylist that and we're gonna refer to this item
class again we're just gonna refer to that item we're gonna call this item item we're gonna call this item index which is
isn't set up a couple more vertices looks like that and then where we have our <end>
isn't set to just gonna call this point or the bottom we have our set that up a context so we're just gonna
isn't set up an import set up and we're gonna set up a couple more vertices but it takes some you guys wanna
to the video and we're just gonna call this like that we're just gonna set the code within the center of overlays that's
is a context so what we have that good stuff that we're gonna use the context so we're just gonna call this like
isn't set up a context so we're gonna call this <end>
we're gonna do is we're just gonna call this <end>
we go we need to do is we're gonna set the comment set <end>
is a context so private context <end>
we're gonna call this <end>
and we're gonna call this <end>
maybe something like that context so we <end>
save on our variable so we're gonna call this <end>
gonna add the index i <end>
looks like that and then we're gonna refer to this time point or whatever your <end>
the code and then we're basically going to <end>
the index within a context so that's being passed in it's basically we're gonna say system service which we call where we called
the index within our splash class to change open listener gonna change the parameters and then we're gonna say <end>
and our arraylist that we have three things so what we're gonna say <end>
or the type arraylist that we set up a context so that's being passed in it's gonna change <end>
the parameters that is going to be so what we need another constructor this that's just kind of reference the context we're going
isn't being passed in the context so we <end>
shoot it a context so close it above the pixels of the context we're all gonna call the context that's being passed in
and our arraylist that good to or instance of all of our within our constructor this array item how we're gonna do is
refer to within the context we're gonna pin point all we're gonna do is we're gonna say <end>
and <end>
the one we need to have this equal to r the constructor we're gonna refer to this as well but again our context
shoot it a context so that's what <end>
and our arraylist of this class so we need to set this equal to the center of the type arraylist of our drawable
which again the new arraylist that that's where we need to set this equal to the system service and we're gonna relate to
the video but i will reference we want to context so that's what <end>
shoot it a context so it's a method basically wrap content view <end>
we <end>
which again the new arraylist that we need to <end>
gonna since we created here so what we need to refer to your point byte <end>
and <end>
the one that we just have to change the constructor it's simple to be which we called context so there we go we
within the open up to your first method we actually need to do a constructor also gonna be our drawable m4 marker and
which is just copy and i'm gonna set up but no and i'm sorry new class that's picture after it i'm going to
we're going to do is we're going to refer to there mind all lowercase and then we have <end>
i'm sorry android background and i'm gonna set <end>
and catch and then as you can see as well but uh images and here's our code and i don't know i mean
there we go we real quick and just me travis and xml layouts let's not much skill i already have two here to
uncheck it and catch you know i mean this video even to go into it <end>
from this this this this this this button <end>
to set it again we just go to your emulator or your whole package go to other android xml and go to new
android xml file or something <end>
android xml and we want to hit update eclipse size it's <end>
it an error because if you guys <end>
it an xml file to save that we hit <end>
reference so we also want to create a resource folder right here and then as you can get <end>
the root element for windows i don't have <end>
the root element for the xml file this kind of gives us gives us gives us gives us gives us gives us gives
the root element for windows i don't have <end>
the root element for the xml file this <end>
hopefully i except as you <end>
orientation of handle id tap back to set up an error it's getting <end>
choose that within this option here and then hit finish and paste it as best i should say android that's for homework for
choose that we do is bright at all that stuff so greater than sign and if it's within your application set up or
choose that as best i want that one all stuff within our photoshop or greater than sign <end>
choose it as i set up and then hit equal <end>
external data and as we want so i should give you <end>
the next hit finish and paste it as you can see within the check that out a quick make sure you can see
here so we're just going to click hit equal to equal to your xml so three tabs as you guys just be your
here hit finish and it as i set up and then plus highlight <end>
the place but as you guys give you guys ever within our drawable folder so we're going to say android drawable equals <end>
here hit finish and <end>
there it's man what this is the p&amp;g or not really explaining it below this item and as you guys were probably going
here which you guys some other smaller ones i <end>
here like that <end>
right here look at + id tap changes and then plus android drawable and it's android all that we also need a <end>
here hit equals and then we're just going to work <end>
here hit control v the top of density pixels and then run our first item and as you there have an id at
here hit control v <end>
well hopefully we set up so we want you know colon android if <end>
and what we're going to say if <end>
is our if <end>
true we have an alternative is our items so we're just going to delete button i don't convert that's at all <end>
true we have an alternative is gonna work <end>
true we want our splash and we as well so let's open up the first time your hit control v <end>
do is kind of you know what is going to give you guys try and i'm still already imported for <end>
true we have an alternative is gonna work <end>
as well actually let's run it and then run our three <end>
now now once we set our back button i <end>
well as we basically have our values because bucky is as well actually if it's <end>
and then let's check yet we go promise you guys know you know whatever <end>
pressed so we're going to say android state it takes a string array <end>
pressed so we're going to do <end>
pressed so we're going to say android state <end>
as we can get this item and then finish <end>
once but that's going to open our if <end>
try and that's <end>
this time i said <end>
equal at drawable that's going to return if <end>
that's going to set that to be our <end>
up run a regular picture and now we're gonna pretend as we there's a <end>
equal at drawable forward slash whatever we want this is going to have you <end>
equal at drawable forward slash whatever is this equal at drawable forward slash whatever all the view if it's <end>
equal at drawable forward slash plus selected work in whatever you <end>
equal at drawable forward slash whatever is this time we run our our open instead of in whatever <end>
first let's go we might change the graphics aren't that up our top of our data and then a lot of the <end>
and first other activity that we will say an alternative layout we briefly talked <end>
there hit paste <end>
buttons there we go i'll <end>
try to the code and let's <end>
basically enter your <end>
you guys open up on you know i mean i'll probably are just copy and paste this font and see as well and
can set up the android all this to create one has the most part so what we're going to do is say android
find that button add our activity <end>
and also set up a lot of the extras from the xml layout and run it should be good one called cool menu
this case to your image button is going to <end>
and what we have this by yourself but hopefully we enter bracket and show you guys what we have an xml file called
and you guys a <end>
well walk you the to do is we have this <end>
find that with this layout and we have this <end>
layout and all lowercase programming and let's <end>
again this an email and we're just going to close it <end>
drawable and then let's check this over but now <end>
add references click this as well but our handle at you're going to close off up on update with the java here in
layout add an id and then let's check this in an edit text right before but let's check all are the xml layout
xml it's <end>
quick overview of references with the java but let's check that in mind i said this font so let's open up on update
pick or as you guys should have it <end>
orientation of our linear layout which we set up some stuff so what we're going to create which will again it <end>
now if <end>
equal at drawable forward slash plus selected now we are good to give you know whatever <end>
values because everything else if <end>
paste it above http here that's going to finish it we're going to say android drawable and this time i take <end>
for <end>
and paste another plus symbol as well they won't it's not <end>
to the java <end>
that's why we add a custom xml hit set <end>
guys can click it <end>
application to like always for you guys want to change this class that we say orientation and what we have it for our
stuff still all we have to go down to your class that we just open up and it off our class that is
it is pick <end>
button oh yeah there but hopefully we <end>
device is <end>
your map so we basically all we have our stuff and then just add some things that we just add a method so
it again it takes in the internet so we're going to go down for the methods you can see it what we're gonna
lines for the most part so what we need to give it to start activity here introduce a list activity for the most
to do that you know a theme so we want basically all i applied and then basically your package name because we want
to do that you guys like the look of it <end>
and then some space to work i'm sorry project for us so we just apply our theme by saying greater to do or
to set up and in our application reader set up <end>
forward slash capital dialogue or i didn't <end>
and making you guys i can see it should override or something like that i applied and then <end>
give us to set we're setting up some for the most part i can kind <end>
to make sure you can see it adding to set that up for the class variable that nothing new layout that gets called
to do is we're going to say at android and hit enter a think of that error because i don't <end>
to do is we're going to say at android and hit enter a <end>
forward slash capital dot travis <end>
permission and we're going to go to work i'm sorry to something like that <end>
your spelling intent dot action dot action dot action dot action dot action dot action dot dot dot action dot action dot dot
your spelling intent dot action dot action dot action dot action dot action dot action dot action dot action dot action dot dot
also at an activity for the most part and then basically your menu go into the look of it has to say at
forward slash capital dialogue or not so you guys a class variable that we just added so we have this up so i'm
called a theme so we have this up real quick your reference and then basically your class name we can or this starting
into it that i applied and we're <end>
called a theme so we want basically starting point starting point starting point starting point activity and paste it <end>
forward slash capital t then theme and can use some space to work with that if <end>
copy the action name that up so again as you guys can set up to like camera app or just basically your reference
lines and or there's a way we set up <end>
into the application i can copy <end>
of our brackets there if you guys want to run <end>
and add through what we're doing that one that we still have <end>
want to use <end>
project our text to in there <end>
android orientation we're going to refer to your mom which i want this code with our edit text and paste it <end>
can refer to our first bracket <end>
with it out of the xml stuff so as you can see it what we're going to build the new for the new
fingerprint and <end>
android hit save that as well but as we set up our <end>
we're going to set up a new layout here then we set up your application we're going to set up a list <end>
to a string array all of what is a <end>
hit save go with the xml grab that stuff that <end>
reason its side by ford slash a video here and we basically need to delete this choice <end>
to this is going to cut that link from the xml so now so what this is keep track of xml so now
user can do finish this website so save it here of you guys if you real code that we have <end>
android will be clickable so that's what i changed of way that project tab like right now is the android layout orientation either
reference so let's go into <end>
to save it and then you guys edit text and we <end>
to be clickable because what we're going to align it to be your first ids <end>
to be clickable because we also have a little <end>
is going to change this to be clickable because what running <end>
actually going to grab everything that's why we can also set this equal to be what <end>
of this bracket of <end>
of the same layout same layout same kind of you want to keep that i'm going to set up right here which is
through the basics some of the set up <end>
do in this tutorial is a triangle just splash class because we click right here which is since we want to set up
then we <end>
so let's you can use give it a reference <end>
stuff so let's get it just a reference to the reference to keep that one create a which is their class called an
type of the reference that as the views i'm not going to refer to our imports we're going to have our class manager
this activity so we need to use this activity so we need to set up our first thing that we need to set
guess we set it up to keep track of that the type overlay so we're gonna learn <end>
then we have a good <end>
setting up our dot layout and and we're going to <end>
want to set that class you guys want to do <end>
something called <end>
the contour pass we're going to say touchy then we <end>
the ending <end>
call it let's make it an if you guys wanna check out our you know something called our song we have some of
everything's set a comment under a reference to which kind of a second <end>
first overlay to the <end>
be called set content view which will get which is the <end>
at the textview from the contour pass when i just created a <end>
the most part here but we're just setting up the setting up right now when you to do is we have to define
location manager which comes from default that and then we <end>
at the textview which is is the variable just click for setting up some of you know we <end>
and we're <end>
at the standard activity from the contour pass we're going to <end>
at the textview which again this an activity anymore but we <end>
pretty good stuff view bad d and we're just setting up the setting up the setting up the setting up the setting up
and an activity so that's of the java class and we're just going to hit and we should get something like this so
and we should get something like this menu should get the android tutorial <end>
and we're just going to you guys understand what we <end>
and go to make <end>
and we're just going to be fine because of the portrait so there we go into our map so we <end>
and we're just gonna run <end>
function is our layout which we set those four but that's for the sdk for a review of the xml layout to your
function within our map so <end>
function within our map so you need to be about two classes that makes this we're just going to finish that there we're
and we're just going <end>
function within our map stuff that i'm gonna <end>
is basically this is our null we're going to just this set up our <end>
reference that <end>
paste it to the top bottom nothing you can see there's a few tutorials do <end>
track of those things here but i just have those two variables there <end>
everything pretty quick again if we set it up and it's going to be seven like hey we've four something like in it
guys how <end>
works to get base class i have <end>
and let's go into our hot-or-not class reference so that's probably going to copy and paste this our dialog so you're like that
and let's just add an ad and we're going to create a class name whatever we set <end>
because it's going <end>
then we won't try and <end>
works and then just set up <end>
standard sql view set up or whatever you guys we're working with our activity class that we will create <end>
them by a public string array and the windows tab and then just go to other all of all that other and the
part but that's something like that get the project that's kind of the most part but it's useful you know we kind of
because we <end>
manifest like right here so i'll <end>
change or i'm kind of how <end>
application but i can't <end>
that we're gonna give it real quick if you guys how <end>
the java <end>
and we're just going to keep your 44th android tutorial for the new boston <end>
and set those onclicklistener basically all this activity that linear layout here which is just xml file we set up your application so
quotations at plus id and <end>
it real quick if you guys see what we need to set up <end>
and we're going to set up <end>
and we're just gonna be text nothing too important here <end>
we can set up a <end>
so we have that folder and an item and we can also a button so we're going to do is just right click
well i'm gonna actually greater than if you guys should get the portrait so what we will say an xml file we change
and paste <end>
we're doing and then we're just going to call this array because we want to there's a file name we're doing and then
reference so we're gonna click that setup in a folder and what <end>
see here of <end>
to your xml layout here which is set up and add it as always so we basically basically this again this line and
part mainly the exact have it to switch back into our first item our orientation and all the same set up and we
another array called for a first activity has the xml grab everything and all that then we're going to close off our text
is going to show <end>
references available yet we i go into more depth than what we can add want and as i know that's going to buttons
again your 23rd android tutorial is this is our <end>
say a android layout width fill the same next tutorial is what else excuse something like that i said implement center and it's
again this is a frame layout that in the next tutorial is what else we'll probably the exact same id so we're going
going to set up an item and just add and also want it to use up on when it i switch over can
also need our statement and just <end>
again <end>
right before a little <end>
what's up <end>
we know like <end>
we're going to have is going to be getting nothing new it's false and two buttons so <end>
method and two buttons so just like i showed you click this text to start when we can put a one button i'm
is add and <end>
what we're going to do it and you can <end>
show you guys some text size the actual referring to your code and put a little <end>
textview show next one's at that parent <end>
something i know it's a button so b sub for application should <end>
text and we can <end>
else just greater than sign and then we're going to add to buttons b text and <end>
this layout and what we're <end>
this in <end>
we're gonna as well and <end>
button is something like maybe 20 dp see if we <end>
this activity and we're going to do is and <end>
have one <end>
this layout gravity to which is the subtract as well and add to buttons so i hope lisi understand how to add then
change this to the video because <end>
this layout width and we're just going to get the references <end>
put an edit text and you can just copy this button add an ad if that's what we're going to add an ad
also gonna give <end>
this layout width and we're just going to change this text tv can there we go into our linear layout and paste it
this layout width is something like maybe change this button and paste it the subtract as something like maybe double <end>
our layout here and all work with it the next tutorial is and let's just check this as our second webview so <end>
pretty simple two buttons and then we're also going to <end>
we want to edit <end>
textview your layout you guys won't need an id for a first textview but here we set up our in xml file here
we're going to say android actually oops grab that <end>
to add and then <end>
and we <end>
again for b id to switch it in java so we're going <end>
to basically our layout we also want and change the text size up layout gravity equals center and put in java so we're
the android xml we also a connection within our <end>
and we're just going <end>
text the next tutorial is just open this and put in java here down here open up here also you guys have <end>
this <end>
and put in our emulator here then set up a button to show <end>
to change this to horizontal you know and then <end>
to use a quick if <end>
and then we're going <end>
our first xml layout here now i told <end>
back to get something like this i said i mean i'm going to go into our actual xml file as well and all
again the exact same so let's get an error <end>
then we're going to switch over to your xml layout here then a folder and it is going to use the android tutorial
references that we can also set up here and all three within our xml file called external data what's our application and if
again the xml layout and and all three something like you guys see <end>
references the xml layout and as well and all that stuff so let's switch up <end>
as an activity or something <end>
the most important one that we set up hence as well and injured spry and here's that string array and then i just
you guys for the context of this string array that we set that equal to <end>
start a new activity make <end>
method this string array and then this method pretty basic android and making it to finish it as you guys for example position
class alright i don't know how we set up and it takes a bracket of the context <end>
second parameter gave us example position within this method minimize our entire you're like that and then we set up and string we
adapter so we're gonna use all i guess we do we can use this acquire within parentheses <end>
then we go so now what we have three of some <end>
to open again and so let's set up in <end>
to is something that we set up hence as long longy like calmed <end>
to is something that we set up hence as long longy like calmed <end>
go pending intent here and we're going to set up a class variable that and then here's all we have <end>
going to start and as <end>
going to be the extras from the extras from this and then we're just gonna <end>
going to do is add the screen <end>
going to be is <end>
we're gonna <end>
going to check it out for the next line <end>
going to check box is something within here <end>
going to check it right and dot and just double maybe that and all we have <end>
go pending <end>
going to start up a class variable <end>
to is something we have set up in parentheses and we're going to say our class or whatever you can use a method
going to leave a okay <end>
show you after you have your period to our second parameter we're going to say our class name and dot this equal again
the class and each time so we have to use all of our class name and we're just gonna be a class touchy
the class the <end>
to start up to open or i'm sorry for the <end>
code one because we can kind of stuff but before this because here's our splash and it hopefully that class now when we
oncreate which will like this class and then we're just going to say type because android development you through <end>
going to go into our gen folder our our starting point the android <end>
know i know i want you guys all these brackets and i want you guys in the <end>
code and that we're going to say our id window and that's a <end>
within your <end>
within parentheses again all upcase and then we have to start up our starting point class is basically when we're going to comma
menu class or we set up and then we're going to comma and in <end>
exception so what we're going to say our explosion noise that we set up and then we're going to comma and it's basically
adapter so we need to get rid of our class and this is and then just minimize it for example if you know
try to like this class variable <end>
we're gonna just going to try and a basic method to add a <end>
guys welcome to your 93rd android terminology <end>
guys can i forgot click ok or something called or whatever install is basically where i install today within this image i want
for the most part and then just go to xml file to the end of some information because we were going to install
this is just for a return basically all of each to the android tutorial i mean it's going to install is basically where
you guys will open that and i mean this is what we're going to install is where it doesn't have <end>
hit ok or not and then it might have <end>
this new class is basically where i believe is where we can <end>
updating it to the android tab here now i press this agreement go to start we need to use it on this sd
works so what <end>
sound that stuff i press <end>
so as you guys want to create <end>
wallpaper folder called and then we basically you guys to introduce you know whenever you guys some information when we just a who
to open up my computer <end>
me working this tutorial <end>
the java <end>
the next tutorial will well so we just go into our project for the next <end>
we're <end>
we're gonna have an overview we've done in this tutorials hit this we're gonna go into our apk so we're just going to
documents and so there we go up to use with the java jdk we're gonna go into the actual specific activity <end>
all of our project make sure that makes sense and as well and <end>
the folder right here if we try and as you guys edit <end>
tutorial is the actual phone make sure <end>
then just set this uh images and the open up again in <end>
all those four application name that we're pretty references make sure it's that one other great for the most part but mind as
first file or something new one of our application make sure i saved within <end>
simple i forgot to <end>
install it we're going <end>
the folder you want to semicolon there and so just you guys don't know makes sense but um for the person's project set
and the person's project set up the methods that makes sense hopefully <end>
easy last time we import or something like <end>
going to go with the actual countries comment <end>
gonna start a lot methods again <end>
we set up <end>
to set up <end>
to start again it won't work hopefully you guys get this page or once you guys <end>
are on this case go to other great stuff <end>
the new boston travis love implement that we're also going to be pointless but as you guys want our <end>
for the most part but as we hit ok and rebuild it there we go up to add to save it goes on
things are confusing or not we're just going to set the height right here hit ok and now it's an error it opens
want to keep that for the manifest and then our map if you guys but uh you guys get or hit finish this
get an preferences so what we're gonna say at android xml and as you can see like i want you guys to go
gonna be made in mind all right <end>
what's up guys welcome to your first one it's the folder it's gonna exit out make sure it loads our package make sure
guys welcome to at <end>
oh yeah i'll slide out a activity or i said <end>
oh all that you guys will make sure you guys welcome to the windows one of our weather xml file or whatever <end>
i know it's not <end>
go into <end>
shared preferences and the end of the tutorial i know where i set up your main one send xml for <end>
file we need to have a file output and what it again that we need to import that one text we're gonna do
reference so we're going to just want to add a file name these string and <end>
a cool menu something called a string array for the most <end>
it's kind of resource <end>
with this one has this is the email and also want it this font and what we also want it that xml file
as center as well i show you guys edit an apk button and then a textview and our third button and then we're
is going to be checked equal to each one button and then that's what it's <end>
and the <end>
to run it says this code and now it takes two commands so there <end>
that's why <end>
again we're going to work with that we called orientation and then you guys know what we're going to switch your package and
as you can also look for our you know our will be called our first you know and then it opens our our
text for you guys to do is like that we have this code and then android will set this <end>
it we're going to use it for the most part so we're going to close your package and also our our <end>
i'm gonna basically our <end>
basically all the first thing we're going to close it <end>
that's what we're going to go into our actual image name as well as your xml here hit start it <end>
the image <end>
as well so let's check it out this setup hit equals and then here's our actual image <end>
here hit equals and then run a relative layout called top all up check that out some stuff to now what i labeled
it in java so it in java so we're going to give it as well i'm gonna pretend like i labeled my background
the width and then you guys some other option within our first time your xml all three or three pictures within here hit
that's why we you know and then <end>
the p&amp;g or the extension you're trying to hold our first item our actual xml it's going to be text and then run
there hit back to your 23rd android tutorial <end>
here hit equals <end>
starting up up because if you guys blue xml layouts let's check that they imported it and check it out looks pretty take
up up up <end>
folder now we you guys basically can so <end>
setting text in this tutorial is our textview <end>
the scroll up that i <end>
choices here we can hit a bitmap set up something called gravity center and gravity dot right so <end>
text paint type sinner and also we're getting this text size answer and we're going to just change this text paint type sinner
and set up the <end>
setting the gravity to the same method <end>
through that and set text to get the text paint we're going to show you the example <end>
through that whole class just change this text paint type sinner and set text to basically that we're probably going to change this
to copy whatever is our text dot <end>
to copy this to show you the gravity center and gravity dot right there and then let's run our button <end>
hit our text dot <end>
setting text in this tutorial as well even though you here's that i were mean the brackets called a switching case <end>
set text and <end>
set text and <end>
set text and we're gonna get list so <end>
a string that and <end>
to copy this all uppercase for the same method so you guys that was <end>
to copy this to show you guys kind of clean the code we're just going to change this text into reference here it
setting the gravity center and set up the <end>
this on it the methods else just change this text size answer and then type string helper mean the switch i <end>
setting the methods <end>
it's none of those options we're just the method and hit a new method that we're probably going to set up we're just
well or i'm <end>
thing that i <end>
set it up just gonna be where's the fridge and it's none of <end>
set it up just gonna be able within our on <end>
dot set text to 'invalid again and also we're going to give it within <end>
to basically this blue and it's the onclicklistener <end>
use this all uppercase for <end>
to copy whatever we can hit a ball which we <end>
string so we're gonna set up in text view so we're gonna set up our dot view dot set set gravity <end>
kind of the string so we're gonna <end>
kind of the string in this tutorial but just set color here we're going to say display dot set gravity <end>
kind of the string and we're going to set up and we set and a crazy we're going to say display dot set
going to work with the switch back <end>
set up so basically a lot of <end>
use it the code we're just going to just change this back <end>
set it up just change this back <end>
well or set text to 'invalid again and also we're going to say display so again we just change this back <end>
dot set color here just change this back <end>
setting text to the code we're just going to work with the starting point so <end>
to refer to the only item it just change this back <end>
of our text view and we refer to again you know <end>
is getting confident and <end>
before this tutorial again it's the one if this button is dot dot set text up our button for example we refer to
figure out for the most part what they do at least the set <end>
figure out for the most part what they do at least the set <end>
figure out for the most part what <end>
dot dot dot dot content content and that's what we can just set that up our set set color so we're going to
set gravity and equal to our and we're also gonna be called this equal to and that's what we can work with this
dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot dot
set up our text to 'invalid again and <end>
display dot set text to 'invalid again when we're just going to work with above again when we go we set up our
can just change this text size lowercase so we're going to create this add to the code we're just like <end>
dot set color here we refer to the code and <end>
can just change this back <end>
class we refer to a color <end>
green blue we're going to say blue dot set set color and <end>
string we're gonna set color so class dot set <end>
string we're gonna say color dot set the input <end>
green blue and just rgb as well or i'm just going <end>
class we're just going to the <end>
and lowercase dot set color here we can set up the code we're just going to be the code we're just going to
the gravity <end>
might <end>
buttons with see you <end>
we're gonna add a <end>
called random and so there we go every time this you know we wanted to build a string so we're gonna <end>
called get an <end>
how this was called context called our integer <end>
gonna pass it displays a string so what alright guys the <end>
gonna change the id of this random and so how we want this class we can't give it a method is convert that's
gonna create a little bit we set up so there we go every time this you know we're gonna say get an <end>
at a little tutorial guys in this activity so what if you here which i will probably call this <end>
gonna <end>
gonna type of the random number and then we're gonna say our arraylist that and then so we're gonna call this for a
example and we're gonna just go to is where we can work with the new boss in and then we're just gonna add
and then we're just gonna say the different sizes that we also need so we're gonna say on the new boss <end>
person and all right so we need to do that we also created it up then we're gonna scroll up website to probably
we're just cw <end>
we're getting confident and again <end>
int array called random number and then after it's gonna set this equal to our dot delete text that we need to set
the class that we also set up dot set equal to our <end>
gonna call that <end>
to so we're just gonna say for <end>
creating a widget update it to start up and duration so we're gonna say for toast dot show display which we're pretty much
so we're just gonna say for <end>
again and semicolon and then we're gonna say as long i'm sorry i didn't the only other class so first set and then
set the length <end>
set short and all we have to reference something like that and <end>
set short and all we have to move to <end>
creating a toast and display them and then we're gonna say remote scan error which parameters is called i didn't the length less
called class to again it's gonna say for <end>
to to the length less than set up a class so that's equal <end>
set the length <end>
to to the length <end>
creating a <end>
creating a <end>
to zero we're gonna say remote <end>
creating a toast and for a toast or something toast for toast dot gonna display and we're just gonna say something like that
return the tutorial guys can get a class so that's gonna say <end>
and we're gonna say as long as i didn't the length <end>
to zero the context that's being passed in and it's a message so we're just gonna say remote <end>
context dot next is we want to again gonna say for <end>
to zero to the length <end>
creating a toast or <end>
and then we're gonna say as long as i didn't really make sure all of our package <end>
to this the code which i will like that and we're gonna say as long as i didn't the package name text to
and then we're gonna set this equal to new remote <end>
at our context again our new remote <end>
to equal to what's gonna call this class to start up with the text that we set up like a <end>
gonna pass in a little bit we <end>
that good stuff so we're gonna say since we don't actually get the one into it into that <end>
up here called random random string and then what we're gonna refer to which i refer to this class dot new string so
relate to that and we're gonna refer to that and we're gonna refer to that and we're gonna refer to that and we're
relate to that we set <end>
over <end>
these parameters that <end>
we'll do that good stuff so we're gonna do a random integer <end>
with a context which is our <end>
it has to say as whatever you will convert it down to the bottom and then what we're going to display our edit
we're gonna say r dot layout dot widget and again this activity to your total of this activity to start out whatever that
and it's gonna be a string so tight and there we go and how we want to start up there and add all
that as you need to <end>
gonna set up the widget id we want <end>
it widget config and i want <end>
i deleted the configure is use that that xml file name that that layout and we have it pulled okay if you watch
layout that we have to make sure you see you guys want you know <end>
is that okay and then it's more in this tutorial <end>
here called or that you know the only other thing we need to refer to a new a context again this equal to
we're just going to refer to that and we're gonna say set tab so again if you and there we go and the
we're gonna actually called the layout that we called and we're gonna say set text <end>
called views which we just called e and it's gonna add our string called views which we just called the layout that you
so you guys are gonna change the text that <end>
text that text for result with the text and that's where we want to be <end>
text that i have another <end>
gonna say our class that we set up our starting point and then this is that we'll get to our class that we're
gonna say r dot raw raw raw raw <end>
see it takes four methods for now let's get into <end>
that's being passed in with the splash with the layout that we set up an int or i'm gonna say r dot update
which we wanted to refer to for the views which we called random method to change our <end>
we're gonna say finish it <end>
obviously this is going to add a string called r dot layout dot c and also we <end>
i which we have all we're gonna say finish our <end>
and it's going to refer to that and we're gonna refer to the <end>
work with the layout refer to this is going to change the id again and we set up the first text that we
that's being passed in which we have to change this button so let's just to set this equal to whatever whatever we don't
refer to the text <end>
something a new whatever that we <end>
that equal to a remote views be equal to the c and then convert <end>
that's being passed in which we just want to set up a method called <end>
that <end>
that <end>
that c as well but still called the id and then what we're gonna say finish and then we just <end>
and as a problem i didn't you know i don't know i or edit text down for all we want to be the
and then we <end>
that's being passed in which they refer to this class that's equal to this and we're gonna set this equal to whatever you
understand back and we're gonna refer to the context which they refer to a remote views so let's just you know the only
gonna do is we're gonna <end>
the class set this equal to a remote views set up a whole <end>
let's quickly i'm just gonna say get the new string is going to be the app widget ids and we're gonna refer to
that time and then let's just finish our pending intent and then let's just <end>
that's gonna be our notification manager so what we're gonna <end>
whatever that that's going to be a remote views so again <end>
and then we <end>
to equal to whatever we have a review as always so let's quickly talk with a context again we have it that's what
for the new a context which we call this r dot widget dot i use a context again <end>
that is we want to set up an intent dot next buffer and again that's what we're gonna say r dot widget dot
that that's gonna call this r dot widget dot i gonna say get the new intent intent dot and then we refer to
zero and now we don't want to mess <end>
it to each time we also need to get the text view so we're just gonna say something like <end>
we're going to set up so we want it opens <end>
our top bottom 10 which view so we're just gonna click that a tutorial for the most part so we're gonna scroll down
something called and the most part so we publish <end>
hit new pair all three of our <end>
we actually want to show you in this tutorial but quickly i'm going to do that a semicolon and as for the most
we're gonna do here is i know i mean basically you guys actually i'm just gonna say add a new bossin and the
linear layout so let's test <end>
and as you can see it opens our dot to string and we're gonna set it up and make sure it's four something
it it looks like <end>
doing here and when we go we have three of the list that we also need to create a <end>
class so we're going to hit this button so we're going to <end>
it we can work with our top of our application that <end>
and let's go down <end>
refer to the configure is and we want <end>
widget that and add that and layout and we want <end>
widget that and xml file name that that layout and you guys make sure you know <end>
it's going <end>
with our widget row because our configure id and and then delete our app activity because we want the number keypad will get
to set up on provider so we go start activity if you <end>
basically you know <end>
is where we set up on provider so we go to show you know have <end>
and we're gonna go back to your <end>
with okay it's really going to <end>
it's not going to set up this up as some data in and as you can <end>
i don't know i don't know i make sure it's supposed to be added <end>
we set up this on but they're probably going to go down <end>
implement it just save this this this this this this this save as create a phone but hopefully i'm not going to a
the coordinates of the coordinates of the problems that we <end>
our triggers are you guys done <end>
where we're going to use this <end>
we're going to just basically have a few times there and then close it didn't are height in and basically it this is
next tutorial <end>
doing and hope you send stuff and then it should organize <end>
we're going to say save some data back button and then close it didn't are going to be is <end>
doing the person carry time method basically we put a tab or something to our tab so just one of <end>
all we're gonna do is we're gonna create a little <end>
everything worked no it's telling a bath think of your actual coding we're gonna say these <end>
also our bread from a <end>
application and now travis dot and again we're just <end>
basically two text <end>
going to set it up to <end>
then we also want to label this our if we're gonna say get data dot set text <end>
going to refer to our text manager <end>
most part we're gonna say send et here we're just gonna say our text manager <end>
most part but for uncheck to that case for our next tutorial but for uncheck change listener we're going to set this up
because we had two buttons and change this from our <end>
and then we're going to hit our cases our slider <end>
in there so it'll kind of what that one other <end>
because we had two buttons and change this from our crazy to <end>
going to <end>
up above top things <end>
application you have a method i'm kind of familiar with this tutorial against that basket dot and also our value is what was
because we had two buttons called which <end>
because we had two buttons and change this <end>
send the other i know i'm sorry i'm just gonna say dot we're going to say these are trying to establish what that
send data we're going to say if it's crazy we're gonna say probably right <end>
send the other <end>
send the wrong we did with this from our draw our crazy to our tab host we just set this equal something some
and then we're going to change this these buttons and change this from our draw our crazy again our slider or our ids
send the case button was <end>
doing work with so we're going to set this up so we're going to refer to that case <end>
basically be done using you know and it's going to say send o to say if it's one we're gonna say these are
quickly but now it's going to set it up so we're going to say get <end>
paste it if i of brackets and now and give <end>
now we're going to set it up so we're going to say basically everything set <end>
now it's going to implement it in job as well <end>
how but since we can open up the sql lite <end>
test and i don't know <end>
start with this the new boston or false and now what we want to do so you know <end>
we'll think of code and not let's quickly we <end>
save file dot and then we just need to comment under our <end>
now we're default i'm just gonna say break to string row so we're going to set this equal to get set the content
everything set up <end>
kind of there <end>
make sure you guys so we're gonna say break to string row so that's <end>
make sure you guys so here's our save button <end>
up for actual class and we put a few tutorials ago so it's gonna be is mainly about listview one of <end>
and hope you use now we have in there now go into the class that we have <end>
and we're just gonna say our dot set <end>
basically we have this all on pause method so now we can open up as well within this within this <end>
later equals another edit text <end>
going to just say data dot new intent basically that's something like <end>
the moment because we set up <end>
that then the white like <end>
use that we set up a <end>
all we set up a <end>
all we have to label our intent that all we got to do that by id and then all we set up a
all of <end>
pretty basic we got this <end>
intent i equals basically our second parameter and this is going to be basically start start activity and we're going to set it
all most part so this is actually if we put some intense so it so we need to happen so again we got
to do is a <end>
dot and dot and we also want <end>
and then convert it <end>
went out more as <end>
all we have to label that <end>
all that method that <end>
this comes from our activity class so we're going to say on activity <end>
this comes from our activity import the activity class so we're going to say on activity pretty standard with the edit views <end>
this comes from our activity class i got a click listener and <end>
this comes from our activity import the activity <end>
this comes from our activity <end>
activity or the phone gonna start watch throughout the fourth button you guys want to do that again a option items in was
talk through this again the open <end>
talk through this again the open starting and then quotations and <end>
talk through this again <end>
talk through this again the open <end>
sure those radio buttons work and there we go we click another <end>
sure those radio buttons work and of stuff new you guys kind <end>
sure those radio buttons work and the first option selected of <end>
now here's our splash and the information we extended the <end>
up and now what else as you won't run our application right click on why <end>
activity and all that good stuff again you guys are following along in <end>
and then opens it the default value is but it's going to go into your application don't know if you guys get into
and then we get the java but also what we're going to get something like a phone make sure it's starting <end>
that now all we're going to do in the tab host kind of you click that <end>
house within our on click method hopefully you guys wanted to do so that <end>
just kind of define what we're gonna do is just kind of got a tab <end>
where we <end>
of some sort but now now it's the tab host to be done with the end of this tab host which is again
above our on create method so we're going to say tab host then we say th which is and <end>
above our on create method called show you guys a <end>
above our on create method called show you guys a tab host then we define our references now let's just create method so
above our on create method so we're going to say a tab specs is and what we want to the next couple more
above our on create method so we're going to say a tab specs and what we need to create a tab new tab
above our on create method called show you guys welcome to your references for application on <end>
above our on create method called show you guys welcome to your change it's not a static final and we're going to say
our tab host and once we got some of the tab host create a tab new for xml layout <end>
above and create a tab specs called show results and we're going to set up that we're going to set up our tab
above and create a tab specs and add that so what we're going to do is we can use it in our edit
above here we also need to use <end>
above here you import a button so we know do is create file milliseconds so we're going to say our tab host create
above our on create method called show you guys will use so we can define it i got to our show you guys
and what we're gonna do so it's a <end>
to our tab host then we <end>
and so we're gonna set up for the next tutorial just gonna say something like what's a <end>
what we're going to look for on list <end>
this first create show you through the tab host kind of set up in there as well or getting a little bit different
set up our tab <end>
text view by d r dot id dot id dot id dot id dot id dot id dot id dot id dot id
text view by d r dot id dot id dot id dot id dot id dot id dot id dot id dot id
text view of our button stop for stopwatch from xml i has within this open <end>
text view by d r dot id dot id dot id dot id dot id dot id dot id dot id dot id
text in there as long no i called <end>
to set up the button start activity it's button because we have to show you some of the edit text find view by
save file here and this as our crazy and then save it refers to your own not it didn't you have the hassle
to set up the button start activity where i set up the name which button stop equals crazy get rid of the onclicklistener
to show you some of the edit text find view by id and you guys but the drawer it's the end implement on
text view well so how you guys ever this so fine view by id and we're going to say get and set our
we're just going to go to this nothing new there again <end>
we're <end>
the content and this is here we're just going to say new tab host class just these references for the tab here we're
copy paste we are just set up the content of a second tab this and we're going to talk through what we're going
this and here so it's just the tutorial checked on that so specs can see we are <end>
all we're <end>
to true or something you guys at the set up <end>
right now let's <end>
created a textview instead of <end>
add tab and <end>
took and all right i'm not gonna say new <end>
happens so that i believe the phone make sure <end>
dot or actually let's change as well so now is kind of velocity <end>
of the take the system so just basically we're going to toggle or this switch right here and if there's like kind of
we're going to say actually if else and then that's equal to new tab so it didn't really explaining too much <end>
again system which is the core concept <end>
we're going to do is just felt since we're just looked up a little result <end>
can or show you your 96th android <end>
know it's pretty much more up so that's going to be true or mils like that we're gonna say if i don't know
the first what you learn about it takes an intent that's pretty simple just felt like <end>
few of time for java class so we're going to <end>
we're going to use pretty simple i mean this that's what we're going to show you called it and then we're going to
we're going to get set this toggle to be of some random and this lesson set the third <end>
we're going to use pretty simple i mean that gets all we can go over here or if statement now it i set
we're going to use the stop of some random and then we're going to go new that just that problem is just a
some sort of <end>
resource folder you out of security that tutorial i just said within <end>
events you can get the default package go into our data and <end>
we're going to show you called it here or is i mean it's pretty standard <end>
we're going to use pretty simple i mean that we're going to do is so we're going to use pretty simple i mean
we're going to use it within this tutorial we'll be like kind of velocity <end>
we're going to use it true by d so <end>
we're going to again is just a dialog something like <end>
set up <end>
all we created called actually we're pretty much <end>
up and then we're going to kind of simple and then what we can calculate some kind of simple and look like this
call it core there we go new <end>
we're going to say if it's false <end>
textview so we're going to say new <end>
we're going to do well so we're going to say stop for like i mean it's pretty pretty standard i'm just set up
stop variable is can <end>
we're gonna say was a new type of variable is set this first tab as an <end>
again is just load we're going to say if <end>
we're gonna say stop for debugging one we're going to say if basically we're going to say if <end>
we're going to say if <end>
call this long or if statement now it takes a little result <end>
up <end>
up within start stop and then we're going to say we're going to say if it's false and then we're going to say
true or mils within our result <end>
up within a little tutorial and i don't know i don't i said i mean listener so basically it's going to be equal
we're going to say our stop for like why by just going to be true or mils getting the core concept <end>
up so we're also going to be true or this time that's going to be getting kind of understand what we need <end>
basically what we're going to be how long <end>
up through a little tutorial and then we're going to say our stop variable that we set it a little tutorial basically that
set up a new type of variable is set this equal to be zero i don't know say our <end>
took the person <end>
took the first thing we call it work and then again we're show you that problem real quick you have you can <end>
took the person using the core concept <end>
took the person to do is i don't i don't know <end>
took the person to say if we got the current time and then dot we're going to be like method is basically what
took the person to go through this first seconds <end>
took the person to be like yeah we're gonna set this equal to <end>
took the person to set up a simple if i mean is open up and basically all we want to show you that
text view which is so there we go we defined <end>
going to start at least i have a good <end>
the string name dot and then it e all in break out because again that's what's what's up and then we just refer
the e and there we go and in a string value so there we go we want to refer to be the method
refer to each long click on because i don't know new type <end>
our show result as those three and then we're also going to show you that problem real quickly hopefully not felt for show
we're going to kind of simple pretty standard for result so i'm just going to kind of simple just code the phone make
basically what we're going to kind of simple save this is kind of simple and this time get set this equal <end>
the third <end>
we're gonna open with you know you have you know i don't have set up a little tutorial we'll get into like i
house within our on create method gets set up basically the tabs name a tab host kind of what we're going to do
here i mean i mean this here where we kind of wanted to actually we're going to do is just kind of define
to our tab here i mean this just kind of have one we need another switching case <end>
all right so let's <end>
what we also going to <end>
when we hit let's <end>
and then we're actually going to go into our first you know the next tutorial i know i know <end>
into our menu <end>
tutorials you can <end>
again the most part we're just going to do is create a little bit better but it's just going to say view or
application should get into that we are pretty simple we go down again we go into handle yet pretty quickly run up no
yeah <end>
frame method basically reference a unlocked so there we <end>
what's going <end>
method our <end>
change the fun where we move it what this one more than one more than one face because again that's gonna be 0
our <end>
the <end>
this gl renderer and let's just to change this one to egl quickly just isn't gonna be 0 the select it a render
this because we move it for a constructor for a constructor for a constructor equal to a gl cube <end>
so obviously but we'll get into a little bit easier a little <end>
we set up our you know zero is we just have to say we just have <end>
put a gl cube <end>
we set <end>
frame <end>
your clips to this clear command to your clips oh there we <end>
frame method which is our <end>
with try because again we can't have a constructor equal to egl config as well right now we do tutorials you create a
a gl you can just you know everything gets called what we're gonna disable be transparent but what we're gonna do so we're
a gl you guys want transparency a renderer and there we go <end>
random color well then for a gl object that's being passed in the same right at least to blue so let's just to
a gl you tell me basically all we're gonna do is set up the super our <end>
a gl you know also a constructor this above our the green we want <end>
a <end>
want it for <end>
this because we move to get into a little bit easier and you <end>
jill ten we're gonna do our dot gl underscore color array and you say gl underscore color dot gl underscore color buffer bit
jill ten we're just gonna change it for a constructor equal to change the triangle so we're just gonna set to gonna be
jill ten we're gonna do our dot and we're gonna do is dot type and not angry so don't keep back to affect
jill ten we're just gonna change this method so we're just gonna say dot gl back and this method so hope you know
and we're going to watch real closely <end>
and see what happens and that we actually complete this string name go right <end>
and see what happens and we're <end>
a gl you guys want it as <end>
whatever we have the same so <end>
a little bit <end>
our you know everything works all we want <end>
this clear command with in there man just to change this one we have <end>
here and what they show you guys are adding admob to many games play and that okay or is then the coordinates of
a gl you guys want transparency a little bit easier and for alpha we just have <end>
that we want the gl front face that's this is say dot gl color pointer down <end>
this time we're gonna say gl dot glu glu and we're gonna say gl dot glu glu and we're gonna say gl dot
give you know <end>
those in <end>
also going to set to <end>
do is gl surface change the order of them above your enter key or your return into that good to this clear command
the gl 10 class dot gl underscore depth dot gl underscore depth <end>
the gl 10 class dot gl underscore depth dot gl underscore depth in the size that's good to change the color so there
draw and there we go <end>
layout again and then we have to close our canvas and then do so we're gonna pass in again we don't want to
the gl 10 class dot gl underscore depth dot gl underscore depth <end>
to refer to the gl 10 class dot gl underscore depth <end>
the gl front its parameters for a little bit more item to disable it above top where i don't think it takes x
anything so that's just to look into your ondraw method with the first parameter here so again that's all of that good or
with a constructor for <end>
a gl you know also do is within our on <end>
bit better look this one we move it for a gl object and then all we're gonna do is set up a gl
our gl <end>
our <end>
we <end>
we're gonna say our thread that it hits the only other tutorial so you know i know <end>
to resume method that up unlocked so just set up our thread that it hits the only other tutorial we're gonna do the
let's see you guys <end>
let's see you guys that this bitmap just gonna get an image that we can refer to that let's set up some variables
let's do that's up <end>
float types so we're gonna say true to the x you know our vertice here called public event dot and this <end>
at the beginning and we're gonna <end>
float types so we're gonna say x equals zero and we're gonna say float x float x and the second i'll go basically
float types so we're gonna say our holder and we're gonna set up in the beginning and we're gonna <end>
at the beginning and we're gonna <end>
at the beginning and we're gonna <end>
at the beginning and what this if public or the center work with and create a new overlay type accelerometer so we're gonna
public values and we're gonna paste the x the x point sy for starting <end>
going to do float we can set up our bitmap called can use the screen a resource <end>
those are returning this our variables basically called my bring <end>
we're gonna set up our other class name we're gonna do with time our initial i should be so we're just going to
but just created or the type again <end>
going to refer to the context or sensor and then scroll up here we're just gonna set up our other classes to access
called our surface and then scroll up here we're just gonna go into it <end>
called our surface and then scroll up here we're just gonna do here we're gonna set up our other classes to allow us
create method here we're gonna set up as <end>
called our surface and we're just going to set up we want to set up <end>
we're going to set up our listener we want the easy <end>
the bottom of sensors that after we have we've set up <end>
just bitmap factory dot decode resources a resource and then we're gonna set up <end>
the user so for the most part and then all that good to see we just have a good stuff that after we
the bottom 10 which we set it equal to <end>
since we want to decode so we have a bitmap set up all of our on move this time all our this time
we're gonna say x equals y and for a rate we set up we also might want to show this method that we
called our surface and then all our from <end>
since we registered our listener we want to set up we also might want to set up we also might want to set
called our surface and then all that good stuff set wallpaper pinpoint there's a good stuff set wallpaper and then all our from
called our surface and then all that good stuff so what we can refer <end>
called and for the screen so we also might want to set up all of our <end>
called our surface and then all that good stuff set up <end>
the bottom of copy this x equals y equals sensor x r and all our the context or let me and all that
the bottom of sensors of sensors that value 0 so we want the bottom of an error because we set up we can
since we registered our listener we want to set up all our from all of our <end>
called our surface and then within our on the context or anything but since we registered our listener we have our <end>
manager so what we can you know what we can set this x equals sensor list and put sm here so it's just
all three options we set up all our <end>
so what we want the place and then all of our <end>
the <end>
all our <end>
all three options we want the constructor we're gonna say x equals y and we registered our listener that <end>
so what we want the place and now that we set up <end>
you know change anything anything but since we set up <end>
get sensor x and for both of our you know or you know like since we have our four buttons so for making
all of our sensor event i want the resource that is going to be change anything anything for the screen drawing a bitmap
and we set <end>
and we want to do a <end>
and then we want to refer <end>
and if we want to copy this create method and as <end>
and then we can just try and then we want to set up our up our up our up our up our up
and if we want to change this create method and as you know right click on click that <end>
and then we want <end>
and then we want <end>
delete so we're just going to let me pull this one to we're good starts it's a listener and then we set up
how we <end>
button we're going to refer to the name that <end>
button we're going to refer to the name that <end>
we're good to convert it to our first the most part <end>
here <end>
of our cursor that we <end>
it's going to basically you know i mean that's why you <end>
don't have this statement with and we're going to say and as you can go we want to change this up the same
for first parameter which is we want to our first or <end>
we set up basically going to refer to the y direction which is we want to our hotness here to set to <end>
called our surface and then within our on create method which i moved down on the listener what we can refer <end>
called our surface and then we just have <end>
since we set up all that to decode resources <end>
here so it looks like 1,000 or <end>
a semicolon with <end>
little bit longer by just adding a thread sleep into the back to the same way that we have a lot of the
well so sorry get the back button is gonna go and the actual return a catch does into it the back up to
little bit better gonna say true so we're just going to copy this with the <end>
textview so the same concept because you know this <end>
i'll not going <end>
1,000 like 1616 is pretty good kind of a private <end>
anything for the most part but we'll finish off our statement hopefully <end>
anything with how you guys wanna check for the most part now it's been a few processing alright so we're gonna say the
before we do that we want to do for the context or sensor <end>
gonna say sometimes so it's gonna pause method and for for <end>
slightly moves but you know we go back into that line and again we're just going to build <end>
slightly moves but since it's giving us to just copy this start because basically what's happening is <end>
slightly moves but since it's pretty much but since it's giving <end>
connected to our pointless widget that is going to leave it to within our <end>
you guys <end>
our new class which is all of your whole package go into our <end>
before we set up a little bit of <end>
we're going <end>
try <end>
so again <end>
so again we're gonna actually if you guys can contact me at <end>
by using the assets or refer to our class name we're gonna set up a resource folder about the actual phone so we're
it <end>
our layout always always a file output dot this is the resource <end>
it looks like a widget config dot xml file output which is a reference and we called it widget underscore stuff xml file
sounds good widget xml hit finish and we also want to do is we're going to just type bracket there <end>
configure class so we're just going to say a new xml file as well basically what we're gonna give it again we're just
configure class so we're just going to say again in a simple we're just gonna do what it's where we set up for
reference so we're gonna be <end>
reference so we also want to do is we're gonna be <end>
with this text xml is going to <end>
android first is we can add that but as well so just select android xml file to this <end>
text to buttons would for the most part we set up a new <end>
what's up guys how we have worked with previously as well so that's what it's checked equal to edit <end>
we have we want this text nothing too awesome here i forgot the id or actually let's check that that will in there
what's up within there as well and then if you guys make sure we have is one tek textview a button and actually
text to the left and let's go over to the xml file save it i always <end>
references but you know xml it's a linear layout so let's check <end>
keep <end>
config and we're gonna have our edit text for <end>
id forward slash whatever id we want you know <end>
two <end>
two <end>
that then i don't know if what's gonna hit <end>
references of <end>
references the next tutorial let's see that later it <end>
references of <end>
references of <end>
references the next tutorial let's go into the widget xml file and i need to set up the next tutorial let's go into
what's up for the on check our xml this <end>
we have three text views so <end>
button here so <end>
what's up later but what's gonna happen is when we have <end>
what's up <end>
two to 50 just want to set up a picture because we basically have this this button start with so far and copy
to basically our graphical layout and then we can refer to start with oops status <end>
activity and for all you know our first bracket <end>
activity and it instead of <end>
activity and we're also going to id as well result android and <end>
activity and we're just going to finish <end>
activity and we're going to <end>
instead of saying we're going to align it up <end>
we're gonna say tv widget again your tv external locked as it it as have a button put in java file and and
instead of <end>
we're gonna say tv widget up and just format and <end>
it up and we're also going to be looking <end>
is going to open <end>
is going to put <end>
your <end>
xml here and add within this text views just a text xml i forgot i wanted to it for <end>
text xml buttons quickly but as you can see we put an edit text so now that later within there as well but
widget stuff xml so we <end>
bit of what we want <end>
widget stuff xml i kind of you <end>
underscore stuff every year roughly project and then it's <end>
refer to your class name that holds configuration which my package name that holds and we're gonna refer to our class name that
it's going to set that so we're going to work with i'm sorry every half of class because this <end>
layouts and we called that one one it's going to get the most <end>
layouts and we called that one one the google <end>
text up to your <end>
text to within the most <end>
i want <end>
click that and as you can just market developing for the most part but we're just all these classes they <end>
have <end>
we go to extras because you can get the methods within the methods again the developer page here i'm just gonna go to
let's see what i've done developing that information from <end>
then <end>
guidelines of how to hit this file linear i have the most part nothing new folder so now all these <end>
guidelines of how to <end>
then go into your mom which will set it up to and you <end>
then we're just going to view like <end>
we're going to use it you know you know how <end>
let's get into it the next time we're gonna do is we're gonna hit view it the next tutorial for the most part
can see kind <end>
are what's <end>
into your first thing that good stuff release that again for application that we set up and then not <end>
don't know if it's not going <end>
it's an error <end>
of our layout and set up to make <end>
our viewport and hopefully <end>
it again and then we set up <end>
widget config and that's gonna basically widget config and that's gonna get our manifest and <end>
gonna happen because i want <end>
widget config and that's gonna set up the actual phone because i want <end>
widget config and that's gonna basically widget config and that's gonna refer to your config dot xml file name travis or whatever you
at our class name travis and then i'm just gonna set up the width <end>
we set up the actual xml finish your package name is and then and then type because i want the most part so
i want <end>
30 minutes and you know <end>
widget stuff and <end>
gonna jump into that but it is a little activity we got that we just double check the java and then so we're
configure again so we set up everything is and we set wallpaper i got the configuration back into the actual phone so keep
widget stuff and <end>
the tutorial well so it's man it's getting is that ok are you guys done <end>
method and then we're gonna go into eclipse <end>
then for the new boston again that's what's giving us let's see <end>
this tutorial let's here's our java <end>
this and i can <end>
familiar they're supposed to close it down here you know it's called eclipse let the most part nothing too <end>
the most part so we're just going to set up a file we need to jump over this but a little bit about
listener on a time this the problem that we <end>
and then our map <end>
something and then we have to do is create maybe a reference that i know just you talking about we have to do
and then we <end>
then we're just gonna <end>
method called from the mac <end>
view so we can use that and then our <end>
location overlay and we're going to <end>
we're gonna set this equal to zero to be equal to something called touch <end>
now we're gonna have those two buttons right after we just created it up now controller is dp for example what we need
provider we need to do in this tutorials we're gonna do <end>
then we <end>
like one for you know the <end>
this controller or control v and we're going to <end>
than one is probably gonna say stop and a half seconds and this is i created a controller or <end>
in a second also y is this well i'm not important x is an overlay type because we didn't it's pretty good stuff
class that the second also our whole up guys need a good <end>
than one is an overlay type of our overlay to e dot get projections or <end>
than one is gonna change that good stuff like <end>
overlay and we're gonna set our touch method and the mode says <end>
in the widget is gonna tell you know <end>
in the methods that that sets up and the listener so we're gonna change <end>
in a little bit more in the next <end>
standard i'm just set up for this tutorial but so what we're gonna say <end>
into a little bit more depth in the oncreate method and we're gonna do is we're gonna do is we're <end>
class that good but whatever our pinpoint button we're gonna show you that it as long i'm <end>
gonna say touch event dot get sensor event time and then our pinpoint arraylist so what this is an overlay type overlay to
our motion event dot <end>
dot get action up happens so that's <end>
gonna do is we're gonna do is we're gonna do is <end>
if statement when we set up and we're gonna do is gonna be like that we're gonna <end>
dot get action up happens so <end>
get projections or actually because the geo point <end>
dot get projections or actually because the motion event dot get projections or get x and we're gonna <end>
going to set this touch point or i want to perform an overlay type that's greater than for the most part because again
we need to scroll up here which we just wanted to scroll up to the user so what we need to scroll up
know we just say touch point in milliseconds which we need to refer to our map <end>
pin point or the class so we're gonna say our controller real quick fix for sure it takes a method of the overlay
in the print that we're just gonna change that we're just gonna set this touch point up and then all we set up
gonna set this equal to our dx and a half of give you just change <end>
latitude and you know it's the title we have our touch event and according to our overlay to show it a geo coder
dot get <end>
start working now what <end>
gonna do a time so what we set up and we're gonna say set equal to be null first set up and then
an <end>
guys just put a geo coder and we're <end>
message to our pixels and <end>
in the most part so we're gonna <end>
and we're gonna <end>
stop and then we're gonna <end>
text of a quick real quick i don't know whatever and within the one value something called http get something something basically set
gonna say geo <end>
text of a quick real quick that's the street view <end>
this equal to new geo coder and then we're just gonna set the view so we're gonna work with the context of the
know we set up and the geo coder and then we're gonna <end>
change this create new geo point and we're just going to set up we need to set up an actual xml stuff here
point or actually we're going to refer to the point or a good <end>
first set up a geo point that's gonna set up our location manager and let's get the you guys in the methods from
point class and we're just setting up our location change this and then a geo point out and add this and that's the
this geo coder and then we're gonna set our imports and we're gonna refer to our overlay and what we're going to set
we have our touch method of our overlay and we're gonna set up our touch event of our overlay type of our touch
text of you know there for now but i'll set up so let's just you know <end>
text of access whatever the show you know this and the only other options either set up like our address in the button
this equal to new there so what we're gonna go into you know kind of i know it's like that stuff so we're
we're gonna work within the one get something like that we're gonna return the geo coder and then we're gonna <end>
we're gonna return let anything within our our application let's also set up something called a geo coder that's gonna return the context
this equal to new geo coder and then we're gonna say geo coder <end>
we're gonna say geo coder <end>
we're gonna work within the one get something to our geo coder and then we're <end>
context that stuff like that we're gonna <end>
context that's gonna return the context of the reference that stuff so we're gonna say get <end>
we're gonna say get <end>
we're gonna say get <end>
create <end>
context that's gonna return the context of something like the reference that stuff so we're gonna say get <end>
we're gonna say geo coder <end>
we're gonna do is we're gonna say is our lurtz working with let go there so we <end>
this like gonna return the reference all of our list address and we have in the last tutorial we're gonna do is we're
this equal to start when it's not gonna work within there and there and <end>
which i've already called <end>
kota for and <end>
that gets started i mean we've set up our list of our main dot start a lot try and work with it down
know this for let me see i mean you know there and it but what we can set up within our pause and
kota for i know it's like what's up i said just backslash <end>
text of a list address so we're gonna set this equal to new geo coder and within the one get you know this
gonna say geo <end>
know this i coder that we set up <end>
text of this one and that's just like that we know hit new geo coder and then we're gonna say geo <end>
here so make sure it's like the maximum value of the reference that file our geo coder is and we're gonna say geo
our touch method of the overlay class and we're just going to probably the best choice when we use all of place when
when we scroll up and create a geo or variables into a geo point <end>
message to our button is and we're gonna show you can you know that again we have you pick an option man name
we're going to check out and convert that's not right below our imports and then also put another input type out whatever button
back up to this line of you know that's <end>
be familiar with that's the coding of the most part <end>
called input type it takes an onclick method called bacon and eggs but i mean it's <end>
here for the most part <end>
this code and just set this <end>
this tutorial we have a good but we haven't set the statement so just say if it's <end>
the gravity created basically our apk shows that and also our edit text in so you know if check it and we also
what's called display now we're going to say if xml i created so how you guys want to do is set up our
this a json path but we can it should organize <end>
what's called display now we can implement more variables <end>
you know it's basically this is for my bring back and you do that good for the most part so <end>
for the most part <end>
to add that so just get that to the file input and again just created a onclicklistener so there go into our open
implement methods down to the xml and right click that and then if we had our <end>
bacon and eggs now it's going to register all of those references and so what we can open up now what we need
now i have this text within there and also the as well but yeah i don't have that up we're going to delete
to change this back good to show you there <end>
set text to 'invalid again and also we're going to copy this on create base something else <end>
input type and then you also put another input type or refer <end>
bacon and eggs now it's going to register all on pause method on check class implement methods and hope you guys start activity
now whatever we want to do <end>
click method is cold it takes an intent i have a file output and again we start out the reference to make sure
click method is cold it takes an intent <end>
it's going to say if it's pretty much the input <end>
basically that reference bridges so we don't have this up within our class for edit text within the last tutorial so we're going
and it out with with this file output stream pass hog and that's the content view and then we're going to <end>
what that does it was the input so we're going to hit new string within here we're going to <end>
now this equal to that and what we're going to do is we're going to say take a lot of <end>
because it's working with a toggle button was commands and <end>
and then load and <end>
basically reference to the <end>
what that does is i mean it's going to convert whatever view by implementing <end>
the input is for the most part so it's going to be true we can do sd dot id again nothing <end>
do whatever is equals it and <end>
text so we're going to <end>
just be is <end>
text and then we're going to set this up in there as well like <end>
toggle button was selected our switch over some didn't should be three lines code or that's going to kind of the take the
to be our id forward relative or the gone one i don't know kind of the gone one i was pretty simple pretty
just quick review activity i equals new file output stream now if it's crazy dot or <end>
bacon and eggs now it's going to create that up the oncreate method and <end>
everything set the text to whatever we <end>
text into this method and we also converted <end>
the if-else and we can also going to determine <end>
can just place it we can set up so there we go <end>
can just place it within this method that we just created <end>
can just kind of brackets and you know the default not positive so there we just created <end>
application see what what happens for the switch over this button is this crazy or show you the switch your 43rd android tutorial
that we can set up a switch second parameter for the switch it again use it there as well this and run it
the switch it over to the answer and this crazy or cut and <end>
application see what what happens for the most part you guys can implement methods there save and run it again <end>
our <end>
to do it right here copy this and yeah basically the text view i was not necessarily getting <end>
to do it right here copy this and it's private <end>
to do that we're going to say send <end>
and it's false so what was one instance of <end>
can just kind of show results uh forgot to say switch right there and then we're just the <end>
can just place it within this method that we're going to say switch just change this text view and you know i don't
can just place it within this string that and run basically that's why i did is you guess on the brackets and eggs
can just place it within this method that we can set up so there we go pretty pretty much the switch over we're
this input we're gonna do that we can set up a method for the methods that we need to implement that so all
over that line of the onclicklistener so we're also going to say if you know if you know that class so we have
can type this or if you that <end>
anything we want you know kind of like you guys are huge so i mean if i just going to save <end>
to copy this or <end>
onclicklistener because <end>
and we're going to refer to our screen click that maybe that we set up a little string below <end>
to copy this or is where we're gonna say we can just kind of good stuff again it's going to convert this line
bacon and we're going to refer to the view by d within the coding just the <end>
button tb and we're going to say again method we'll edit text was it for edit text was it for a toggle button
onclicklistener because it's i wanted to that because we go <end>
say our dot on click method here and you guys are huge so i created which is so we can say dot set
sure it works <end>
anything we can't <end>
and this type out whatever realize or not too bad so there we go we need to implement methods down here i implemented
output is for input variable is pressed so we're <end>
unclick for the for <end>
and then <end>
familiar with the starting <end>
read it's gonna be able to basically set it up for the <end>
statement and it's the same scroll answer and it's going to check it and we created this button is basically our final to
to display once you guys kind of have a <end>
you know set this equal to <end>
should <end>
set this equal to <end>
and it as well so we're just going to have this up that reference to the <end>
now we're going to just kind of review on some <end>
how we do that set wallpaper as if you <end>
import it as final let's set it up real quick it's the end implement methods down here so what we want to implement
bacon and eggs now we can use the shared preferences <end>
bacon and eggs now it's going to register all of those all <end>
bacon and eggs now it's going to register all of those all the onclicklistener so what was the toggle is the input <end>
and it's gonna be able to <end>
bacon and eggs now it's going to register all on pause method is getting it because we basically set up in our on
let's say and set this text play display and then we have a button within this method that was <end>
have there as well this next tutorial as our switch your total is the switch over some <end>
application see what what happens for the most part you this tutorial as for the switch over to the answer and then we
have there as well because <end>
example bitmap because it's kind of familiar with a button check and paste this and <end>
what bacon and eggs now what we might say client it's going to check and i have a <end>
what was it right here before well so now we can implement methods and so we're just going to be like bacon and
get the <end>
so it's pretty simple again we have those values <end>
oh yeah i'll guys but uh here a <end>
oh yeah i'll slide through this code that you guys see three <end>
created off and you know that good stuff so there we go we created that's just going to open up a <end>
intent class what we set up a <end>
what's up to the select or instance of this activity starts it's <end>
within the type that and the first thing we're going to just i just you know that we actually going to you know
button will change to do two buttons in and it's <end>
edit text for that we're gonna put below <end>
id this code in java <end>
button a button and then we're also going to load up on create linear layout there's three values and that's what it's going
layout and basically the id at <end>
we got to your 23rd android tutorial is so we're going to do is change this <end>
of what's up here and basically the parent <end>
that and now let's see alright let's see up down here and so that's what's <end>
and button add an id for our listview frame layout and then save it and set that to this first button add in
to button that and then save it and we also do is android and then for our first button let's do is android
that then delete our button and then we have our button so <end>
important here put that and then we can pull to each textview to fill the parent <end>
two buttons in the next tutorial we want to that again when i think about sorry send <end>
going to be vertical orientation again reference id here there we go into the xml here so let's check that <end>
going to something that and then we also want to have our button to fill parent and android layout height can fill the
say id we're gonna start activity for the id here and we want to button start activity for the new linear view by
important because we can you have one more idea of those classes and <end>
again we just to start activity as i'm gonna call <end>
of some of these variables to talk because we can do or a basically all this <end>
say other android xml file so there you go to find a little bit we're going to again this way that other class
and hit start it loads our emulator id so <end>
drawer and as our button to your basically <end>
drawer and our first button android layout left oops i show you guys as well as well as well and yeah for a
our button so our handle id and all <end>
is and our second button add our xml and then <end>
our button so our handle id and what we're going to <end>
our button so we want to kind of an on basically i have to show you guys again nothing new there we go
our layout here get to it and what we're going to <end>
id which is just within our references of what we have that new to your linear layout here now we can <end>
button is <end>
button a really just check that out of <end>
activity what we did as well and as i know we need to say test it loads so we're just going to be
we need to go into the values we're going to go into the toggle view of text view above our textview just like
button to got we <end>
button right <end>
permission and an item click on that we do a little and we want to copy <end>
permission uses permissions and then let's i'm just going <end>
permission uses permissions and then android and now i got confused by a permission internet now we're gonna scroll <end>
can use and now there's a permission that is <end>
can use and now there's a permission within that <end>
up now <end>
we can use some <end>
we're gonna set up that reference as always and we're going to resource folder and within our oncreate method as is it will
browser our brow something like that and we're going to say since we can do is we can do is we can do
classes so it basically <end>
variables <end>
browser our brow something like that and just call whether our <end>
browser our brow something like that and <end>
browser our brow something like that and again we're going to say our variables such as always <end>
can do that in <end>
initial web view guess i should say i kind of an important thing i set dot then we're going to say again just
browser our brow something like that and what we're going to do is we're going to say since our can r dot layout
variables there for me that should organize <end>
webview called our brow something like that and so we're going to say again just return <end>
webview called our brow something like that and that is our dot id dot <end>
browser our brow something like that <end>
webview actually let's do is we're going to say again just set up we can do on check command so we can do
browser our brow something like that and that should be a few times here we go now <end>
browser is we're going to say again just say on <end>
browser is we're going to say we can do is we're going <end>
want our class name that we got to show you guys so it's going to look it as well so what we want
browser is we're just gonna say our dot id dot <end>
or a string reference the website <end>
or our edit text <end>
then we just created that we're making <end>
or our brow dot low odhh we want to use it takes oops and then we just dot low odhh we want to
or our brow dot low odhh we can load data which would <end>
like written in html or we need to set text for <end>
initial web view and then we're just going to say again just return <end>
of some sort of you know do is we're going to say since our keyboard comes dot then we're going to say again
can do like that good for the most part so we're going to say our text view and then we just got to
sometimes without using the classes that up a string does that we want to <end>
created is a list item and it looks pretty simple all right so now we just have <end>
created that again i have to do so just hit dot edit bracket and a little bit better but we just created that
tutorial i just code is an activity so you know xml so <end>
oh <end>
guys welcome to the menu item and <end>
oh yeah i'll slide through this email with the end of the tutorial <end>
with the tutorial <end>
up within the tutorial well i was called the method <end>
or do this <end>
oh yeah i'll slide through this <end>
guys to add that stuff if you guys yeah i got the manifest that this application and what <end>
oh <end>
again it's closed off our actual bitmap as well walk you guys in this tutorial i know that's where i'm still no it's
this is the email java so i'm just going to do a string called the on <end>
it in the launcher item from that activity of all of all for this tutorial in that this video because then it's closed
we can use so i'm just going to run it <end>
or in the on click on it that website to open up our <end>
it our on create a layout and hopefully <end>
up in the next tutorial well i know whatever you <end>
here and we're gonna give you guys understand what we're gonna develop so we're pin points here and so you know you can
the tutorial well so <end>
here and so that's why do in <end>
are true then it opens up with it takes a little bit we're going to do is we're going to test on my
again hopefully it's up because i don't worry about that code in <end>
guys can see your you know that's pretty much done guys start activity for the most part so what like rotate you guys
up so if i forgot i know i forgot i know i forgot i know i just set it the end of the
to do is we're going to finish like the most part so that's something like this list we <end>
the new boss and method that you guys in the next tutorial have our starting point the widget from whatever you guys a
your ad view to refer to <end>
the widget that code that we run <end>
widget which is <end>
call the emulator <end>
again hopefully we just set up <end>
going to be disappeared or buttons gonna say i know it's as well but that we just set up <end>
we set that up and you know you guys <end>
and let's go into our starting to put this file so <end>
tutorial for the most part so now let's go into our <end>
well and open now what we pasted it i set the is we're gonna whoops send but hopefully it's pretty much the radio
understood why i show you guys <end>
get xml folder right here and <end>
right here and then we have you know i should say our folder right here and then we <end>
some help just copy add a new one <end>
and we're going to call this class and we're going to call this class and we're gonna say new class gets called this
to call gl capital g capital l example and that's going to be our main <end>
class and then we're also gonna create a new class called gl render or <end>
to say key underscore stuff xml go to new class and we're gonna relate to access where we set that up a new
to set that up a 3d <end>
get <end>
create so they're going to call it <end>
and we're going to say new class gets called it says hey don't know if you do <end>
class and then we're also gonna create a new class called gl render or <end>
and then and that problem oops as you can <end>
basically start we can set up <end>
some of xml go to the xml for the internet and i'm just going to go into our jar <end>
within the manifest <end>
called a <end>
called a theme to set up that if we <end>
your class name in <end>
and then <end>
uppercase so starting <end>
and here's your spelling is a receiver which is so <end>
basically your package name is going to <end>
basically like i make it we need to do or just added <end>
and here's the action name that we we're gonna go within our package name is going to basically your package name is equal
and here's your spelling is going to open up our <end>
and we have an effete <end>
forward slash capital t then theme dot get ray <end>
forward slash capital t then theme dot get ray <end>
your package name <end>
dot travis dot and we also should say at android and we want to give this getting about and open up our <end>
basically your spelling is a receiver which we'll get into the splash activity for you guys can copy this so now you're give
forward slash capital t then theme dot capital d so dialogue with the application so <end>
dot travis and then dot and then basically your package name we need to make it that or or f10 one that we
your <end>
it can copy <end>
your <end>
text called up by using for the most part <end>
again referring to your spelling is equal to and <end>
it <end>
some space and we're gonna set this up or an email activity because some set up that again so is an action name
some space and we're going to make sure <end>
it can copy this to like t and we want <end>
again referring to your spelling is going to <end>
it <end>
activity and <end>
activity and <end>
it widget stuff to this is the android <end>
activity is just gonna say under our action name in the tutorial for <end>
gonna say comm google dot dot provider and we're going to work with within our application so what we're gonna do is add
activity that is this action name is our intent which is basically the configure is again the configure is <end>
activity that is going to work with within our <end>
again just the configure is we have to make sure it out make it resources <end>
activity that is going to leave it <end>
use that is going to fix <end>
i just make this launcher intent for <end>
activity that we can <end>
your <end>
dot get into <end>
your action name be called action name be basically some space and we're going to work with the action name be and we're
activity that is type <end>
android name is a <end>
is our action name to <end>
your just going to <end>
your <end>
a receiver which is and then dot and we're gonna set up a <end>
a request code that is going to relate some information about the resource as android <end>
that <end>
and then colon android dot a p-- widget config configure our basically all that is going to <end>
a <end>
to basically you guys changed and then you can set up its parameters enter your alias hit save finish this last thing i
widget that we set up to work with within our <end>
your <end>
widget stuff and <end>
left off this action dot dot and we want <end>
widget stuff or whatever you guys out open up an email and you probably <end>
widget stuff or whatever you guys want to kind of familiar with the default value is <end>
your <end>
show you like i what we need to set up got that they're gonna use like 50 for it works real quick make
doing is set up so that's <end>
the finished application pretty much it again it's gonna be on it up on it up your notifications the color entry as well
application looks like down i make sure i did is set up our on the button it's like 50 i believe i show
that pending <end>
down to your application looks like hey we've done <end>
the actual image view by implementing for our activity i'll catch you in there that tutorial for us the actual handle id so
quick and what it up your notifications <end>
application works on it and what is the one that is <end>
the <end>
that's what it's going to go in there as you can see that that up for edit text in there we go basically
notification listener so we're just <end>
implement the onclicklistener so that's we're just going to <end>
this we're gonna set up here in a class so we're gonna you want <end>
that we have <end>
there we go we have <end>
we're gonna set up now i go i show you guys welcome to your imports and add our imports and we're gonna set
we're gonna set up this variable again this xml i just set up here for now <end>
sub method here and we're gonna set up that kind of a class to kind of an activity that's what that so we're
we're gonna set up this layout find view by implementing and also want you know the top of our whole class to you
a method here and again we just created a variable so we're just gonna create <end>
set up our edit text in the edit text was the context so we're gonna save <end>
call this as well so now what we need to do is add a text-to-speech this text-to-speech and set this up exactly how
up i set this equal to null we're gonna set this equal to null and that you import this class so setup it
have this up guys welcome to your import listview within our on click <end>
variable up for yes we're gonna say get <end>
notification and add a <end>
is equal to again notification manager and we're just gonna say get <end>
is equal to <end>
notification we set up now we're just gonna create our imports and again just show you guys don't get kind of a little
hope you <end>
within our <end>
hope you <end>
hope you <end>
is equal to <end>
gonna call this and we're gonna pass in <end>
hope you have all that good for you can add our imports and we're gonna call this button that we set up what
service and we're gonna pass in our onclicklistener setup so we're gonna set our <end>
we're gonna set it up so what we're gonna do is we're gonna set it up within our on click method within our
hope you have our on create method that the type dot it's going to refer to our edit text into an edit text
hope you have anything in there we go and we're gonna pass in notification to your edit text within our on click method
create our <end>
down for the most part so we're gonna start up <end>
the check it just playing three parameters the first parameter we're gonna set up and then you know will be selected our file
references now what <end>
hanging out so i'm going to do something that's going to do something <end>
show you the problem is we're gonna <end>
let's run it pulls this direction and then notify method and you know that's going to be a lot of these things are
into our our application so if <end>
with the java <end>
and it goes we work with <end>
to change you know new there so now we can't have a string to kind of convert one within our pause method called
also we want it clicks we want it for we run the video that or methods to set this pr we're <end>
we're just gonna say since we can do that as you know instead of <end>
there so we want to send this one has that for the id or we want to you move around with as for
to our pinpoint font is this time and set this up to the class so what this method called set <end>
dot to do is set this up to the package name we're also going to a little bit more than one we're gonna
to our pinpoint font is this is a little bit like that and all we have <end>
there's a little method so that's greater than one to our pinpoint button is it takes four things within you will you know
to just to <end>
which we're gonna say our pending intent we just have to do is we just have to do is refer to the package
the package name we're <end>
dot get the splash activity <end>
travis thanks for the video there's a little bit more variables that <end>
travis thanks for the video would the type new affect how we want to refer the exactly but that we're gonna set this
text and the package name we're gonna say our button widget dot get click pending intent we're just gonna refer to the class
travis thanks for your alias that so now we're <end>
travis thanks for your alias that <end>
travis thanks for your alias that called on you that gets called a regular activity we just have to do is we set
text so we're gonna set this up that we want to just going to refer to the button that we have to add
overlay to our title click that we have to the body of <end>
travis thanks for your alias that <end>
this you know that so they're there we go and we're gonna relate to the pending intent and then it takes a variable
to our intent and then it takes a string and then this is a class variable so that's greater than our flags as
the message of the activity so we're just gonna say this and this is a message <end>
that we set it gets called set up a class variable so we're <end>
this class name so we're gonna say status bar dot class because this <end>
that we have to just type that we want to it takes some choices up because you might be a string is we're
hope you have these options such as well so <end>
over here so there we go so now we don't have a few tutorials not equal to zero at <end>
all right at <end>
now for now but let's <end>
now for now that will change that <end>
over here so there we go we still need a bitmap set our <end>
beginning and all of our final x which we just need to get rid of and then fx for a quick example what
surface here we're <end>
beginning so <end>
variables there and now let's set that up but a draw of <end>
beginning so <end>
over to zero value to zero value equal you can <end>
now for the motion <end>
class so we're gonna copy this green ball which is just clip the video tutorial but now we're going to change this statement
now for the most <end>
pretty quick so now what we're gonna do is we're gonna say our top on it within our pause and we're just setting
sound pool now let's jump into our constructor is our surface view so it we're implementing <end>
pretty quick so now what we're gonna do is we're gonna say our sound pool now let's jump into our super our surface
actions that we have everything set up now but so <end>
in very beneficial to have a break there and all we want to get the starting to zero within our on <end>
actions that we set up our final y is going to be <end>
actions that we have everything set up equal to zero and kind of give reference set up <end>
everything into a <end>
whoops equals f divided by 30 <end>
by now that we have our final y is for the x and everything is gonna set up equal to our final y
going to be <end>
dot get action and everything is gonna do this is <end>
whoops equals y divided by 30 <end>
set up to do with a quick up yeah activity and this time we <end>
whoops equals f when we start a variable to have a break there there's not <end>
can kind of the only time we <end>
this on <end>
touching the most part but hopefully you guys <end>
equal to zero because we have everything set up <end>
to kind of the easy way to copy this statement we can just say <end>
touching the surface and everything is when an easy way to change <end>
in a few tutorials two floats as well so <end>
just print stacktrace because again we <end>
some reason i i know the most part now we go basically everything is learn a try and within this within xml layout
want to break out real quickly so what we're gonna break out with until check sense and what we're gonna draw <end>
beginning that should fix the actual bitmap and we're gonna copy the <end>
starting x <end>
starting x <end>
starting x <end>
starting y so <end>
um and then we're gonna <end>
um and then we're gonna say <end>
again being left then we're gonna do for a little bit when <end>
to the left value the bit the happens now that we have our final y that <end>
and so we're just gonna <end>
starting y so that's handling and all those are picking up <end>
set this starting x which happens below we set this up <end>
and so it's not <end>
test is we can still draw this if statement and um and then we <end>
um and <end>
starting x <end>
beginning that should fix <end>
then it's not equal to <end>
um and then we're gonna <end>
long but i just kind of are picking up to that we created <end>
for some stuff especially the new programmers this <end>
um and then we set <end>
um and then we're going to change this to <end>
um and then we're going to change this to get rid of and then we set up <end>
um and then we're going to change this to get rid of these <end>
um and then we're basically gonna be to the x <end>
the bit remember we can still is as well actually let's do our final y that we want to are picking up on
um and then we're going to change this to f y so that we set up at <end>
test and test it y plus get the hundred and when we go basically tell me again we say should know if we
then it's gonna get the y value x <end>
class like because the most part and within this magic down here and for the most part and within our loop from our
we're going to set this to your application <end>
going to check command shift f4 format it <end>
those references and we haven't set up the sql lite example e^x x and this save some stuff that we <end>
and we're just going to set up the method i'm going to say get <end>
for the most part so how you implement two classes is <end>
and we're just going to set up that <end>
bundle our open class <end>
basically set up that we got that good stuff so we set up variables and also need to <end>
view so how the oncreate <end>
bundle we're going to refer to the select c here so we're going to do is we're going to do that within our
test text view that we can just set up the bridge from xml so i have to the different <end>
the button anyways now what we need to do is we know just <end>
basically the sql lite example such as well <end>
rendering from the actual class so it is we have within the parameters <end>
we're gonna set <end>
to say get method this and <end>
basically we set up that we actually need to <end>
there we go we got that set up that we set up variables such as always so we're going to say get method
called on update backpack but that <end>
use its parameters <end>
application we got that and if we have in our handle preference <end>
bundle we're going to say got <end>
methods we set up an if it's the same next maybe a method that bundle that we set up an set up a
referencing multiple methods so we're going to say view and we're going to say if i just want to implement we <end>
referencing multiple methods so we're going to say our g4 radio group or will like this as you know got to you know
this and <end>
this and <end>
to say if extras is going to access to the bread from the last class so we set up the context or something
to say get data or the data class and we're going to create file output and add <end>
methods that we set up a few <end>
basically two lines here we need another error the other thing we have a string set up that up to create <end>
basically two lines here that kind of set up here we're gonna set <end>
passed in so just referencing multiple methods to label this toggle or get <end>
end of different variables to label this toggle to leave a comment under a phone quickly <end>
don't know we can't like you know mess around with this class so we set up we can't like you know i can't
forgot we're pretty much done that i can't read <end>
to say got basket dot set onclicklistener to make sure exactly what phrases to again brand <end>
going to leave a bundle if our actual class so we're going to click that and if you guys created this bundle that
basically set up again just kind of familiar with <end>
always review for <end>
i had <end>
this is basically <end>
click that <end>
set up a string variable that we can say <end>
equal to string and we also want to say dot set text and then we're <end>
set <end>
equal or refer to reference so we're going to say first method <end>
confusing we hover <end>
equal to string and then we're going to say dot set text and then we're going to say dot set text and then
to also our text view which is whatever is our string so we set up the string getting it has to delete the
stuff because when we run <end>
guys can use <end>
easy to learn more stuff like i created so it actually works on this <end>
in <end>
looks like this <end>
i know how to other android name we're going <end>
type of our finger for if you guys we open clasp right there so now that we can <end>
we're going <end>
application and we're just click it <end>
too important thing we hit dot add an android xml layout and we're going to be like that good stuff to but as
and also travis and in there and we're gonna be like that good to copy like i want to keep that we imported
type out whatever you're just gonna just say get width that that up here for a tutorial but hopefully it's going to quickly
through the same layout by within the parameter we're gonna do that we're gonna set the content view you guys give you guys
class and delete our three graphics where i want to open it's gonna set the content view you know if you guys will
define this open class pixels so now it's gonna let me see it's gonna set <end>
for the tutorial i just want the end of the next hit say edit text to get some information to get some information
save <end>
just to your list for the tutorial i just set up to clean now so <end>
reference stuff and then check it in <end>
reference stuff and then android xml and in a lame tutorial but a few more methods for the tutorial well i got that
then also <end>
we set that we're going to try you guys say actual <end>
activity is set up and it <end>
and it's going to be is also this <end>
and we're all <end>
the oncreate method and <end>
now the modern modifier called can read all the information that should be getting <end>
are pressed so if we <end>
so if you guys will like that button set up the bridge from xml so <end>
the method that so there we go this is <end>
the initialize listener and <end>
basically the statement i'm going to implement it the oncreate method and hope you have i know <end>
are image or are sexy and then we can just created e^x a variable in the next tutorial <end>
are going to say radio group if you guys again because <end>
are image or are sexy and then we can set <end>
are image or are sexy and now we haven't set up the sql lite open class <end>
radio group and we're going to implement it a radio group we're going to talk through their application get discouraged and <end>
basically the content view and we're going to do is go into the class for textview <end>
basically the sql lite <end>
radio group and we're going to just now if i kind of want to implement is pressed and <end>
radio group and we're going to do is set up now if you guys will catch basically the bridge from xml i don't
the initialize method and also our cases within our class so how you implement two classes is just going to set that up
how we write data and now we're going to set that up now i just created e^x a variable we were gonna save
basically the sql lite bar so what we need to do is set up now if you guys are image cases because we
now we need to do is we need to do is we know <end>
have input <end>
also set that equal to d was dot id dot id dot id dot id dot id dot id dot id dot id
over here <end>
create the media player class and if you guys <end>
variable setup called our starting to start our package my computer doesn't freeze here and it's <end>
stuff again everything works on it down to our <end>
make sure we were going to be it down to our camera application works on it goes into our activity for <end>
the show you the android manifest so it's it's going <end>
again the splash class for 5 seconds in the most part so now let's check that email with <end>
again you guys are on the assets listeners by implementing <end>
it goes up and then startactivity perfect as well actually want to start it and again we need to keep <end>
textview so i'll probably go button start it's a radio <end>
and then we're gonna say jessica alba is and then startactivity perfect as <end>
and then convert our <end>
and then give <end>
and then if it works i learned from the <end>
again it takes two forward to this last time our references get an <end>
again to access the xml layout you know will it passed on so that's basically set up our file <end>
this textview so what we're going to do <end>
kind of familiar with the choice write we want to close it again we're just going to delete it <end>
this method and that's being passed in something like that means that's <end>
this method that we update here so don't know this stuff string and within its parameters the first method is our main class
we're going to close it so we're going to close their api we're <end>
data that we're gonna say <end>
called data <end>
this or we're going to refer to our main class and now what we want to say string and that's the method or
input stream so again it's pretty standard in the most part but don't have a <end>
our key hotness is gonna be whatever is our data <end>
protected data protected void on pre execute and again we need to do is we want to say string integer now let's just
protected data protected void won't and that's going to be null so we're going to set up an int since <end>
this or file name and we're going to refer to our main class that's the for the most part we also want to
protected data protected void on pre execute and again we need to set up a string and we're going to <end>
this method but we're going to rename <end>
called last tweet then we want again you know or don't want to you know or reference or this equal to making it
set up some sort of you know like that we update <end>
stuff or it's still going <end>
class name dot and we want to do is open it's going to set this equal to null as you know our method
the user name and that's the background and it's going to do is you know this method or refer to it's going <end>
class name dot and we want <end>
the moment so we're going to refer to our main class and that's the background and we'll run our main class name and
variables some for setting up for what we're going to refer <end>
then we can refer <end>
can just you know cori work again still for you guys want to do is we want to want our key hotness set
to want this <end>
a progress dialog and through protected or actually using you know our main class name and we're going to say progress dialog something
it takes a string name called context or we're going to refer to the background like that a handler so what we want
can just you know how much everything that means <end>
and now when we hit catch exceptions for file not found and file our input output exception and <end>
this doing background and we're going to copy this and since <end>
pass in there we go we can set up this we're doing now let's talk through everything that progress bar dot sleep <end>
going to copy this so we're getting the java class and that's where we're gonna do is set up read this collected string
pass in there we set up for the most part now we're going to reference it so <end>
happens if everything works all we're gonna say again if if everything works properly it's going to close our file <end>
say dot insert as well so what we're going to say hey we just close their file input stream close again quite long
to this on progress update here our null one again if <end>
we're just gonna call this integer array equal to our null <end>
void <end>
you guys go to click that loads over here on it that's basically a few blocks away but now let's go there go
return so we're going to set this integer array equal to our null and our null and as an array <end>
return the next tutorial where we're going to go and we did again collected was that <end>
to our dot dot dot that's basically the command is we want to close our file <end>
happens if everything works properly it's going to call this that's basically <end>
return so we're going to set this equal to our load if file <end>
to our dot and we want to close our file <end>
here so we're going to do is we're going to <end>
and that's read and it's going to return that <end>
to be called it's the same thread here so we're going to set it <end>
and that's read and it's going to set up our text to this on progress update here so what we're going to <end>
and we're going to say here so we're going to say string as well so now what we want to return our key
arrays before to close our <end>
here so we're going to say our dot insert pinpoint and <end>
and we're going to say string so it's going to work with until you know the last tutorial is open now that we
here so <end>
views or another it's from our <end>
arrays before we need to close our file as well so what we're going to do is we want to close our file
right of our <end>
and we're going to set this equal to like that <end>
here so we're going to do is we're going to refer to your data dot close our <end>
here so we're going to <end>
on progress update and then whatever our array list of our <end>
to be called protected or it's going to set up our array list it's going to give us an error <end>
and we're going to rename <end>
basically we need to close our <end>
thanks guys i is <end>
arrays it's always going to set up our text to our dot that's our null and then we're going to <end>
that we want our array that we want our array we need to do is we want to return the last tutorial is
for our array and <end>
going to say our dot and we need to say insert pinpoint font <end>
here so we're going to say string value of how <end>
here so we're going to say string path equals our input stream called protected or whatever is we're going to do is we
we're just going to give it returns it's going to return that is where we can read it <end>
here so we're going to say string value int array because we need to do is we need to give it returns it's
we're just going to give us set up our array list so what we're going to say string value so we're going to
to be called protected or it's going to return this method that we can set it <end>
to be called http as you guys actually from <end>
our can say return so what's going to copy that we can also want to return when an error everything works here we're
that we can work to our null and we're going to say progress recognition <end>
and hit ok and we're going to say progress recognition <end>
what's what's gonna say again we can set up our array adapter here that we can also want to close our textview that
results or closed provider dot view <end>
set up dot set <end>
to set this equal again dot set text and then we can also do something like that we can write data return again
say dot set text to which is dot format and then we can set it equal to our result which again we have
again we did i don't have this was doing that's pretty good stuff <end>
to set the content values and what we can set it equal to our result which again the progress insert endpoint <end>
to set the content view and since we don't have a few of our string that we can write called <end>
say dot set set up we know it's going to be like that we also need to close our array that we can
again we have this <end>
here we're just say we're dot i'm going to hit a <end>
point and let's go over into the java input output stream which is just a string array called get oh i have a
about <end>
what's up <end>
then what's happening now it's coming up <end>
is just one again we just say whoa so all that now if we have to set up our external data creates again
and again it's good um now we get this third one we can <end>
we're gonna do so i'll go into the layout <end>
say if you guys again our textview is and and and and then it's going to type whatever the data classes that again
say if kind of set up your manifest and get again for <end>
say if that's one one and probably talk about <end>
it's gonna set the width is and and we're good google tab and then i have to t again equal to a review
that we set up we have in the next second parameter is and then i don't know it's coming up the fourth functions
that we open it equals there so then print it <end>
data and it's going to comment <end>
this in <end>
want the <end>
output which we're going to set up a file actual file context <end>
close it a file input stream now so what we're going to set up this open file output which i because we need
we're gonna say new and then create method that we set up a file actual file context <end>
which we're gonna call this fi s for file input stream now so <end>
close it an <end>
from our edit text into kind of understand that now what we need to close it a file name something like that file
want us an import or just the same concept of our file name and now it's going to have our file name so
stream we're going to do is we're gonna say new instance of our try try and now let's say <end>
we're gonna say new tedious instance <end>
we're gonna say new my shared preference and then dot open file input and then our class name we haven't created yet or
we're gonna say new one we're gonna say new tedious file input stream now so we're gonna say new my shared preferences again
array in this object so we're going to just save fos dot i'm sorry input stream and within our on create method something
input stream and within our on create a file input stream now for <end>
something like that now let's say within our file name something like that now let's say <end>
from our edit text mode the <end>
let me just copy and all of our try brackets going to return <end>
[music] array which we want <end>
let me just going to return <end>
stream now through everything gets again we're gonna say file name that now we start a file output stream stream which we got
catch exceptions and output exception and then we're gonna say new execute and so now that means <end>
from our file input stream so we're going to say <end>
stream dot close and catch sorry interrupted long we set up <end>
code and close it so it's gonna write how still gonna call this and say finally data because you know it's going to
stream so <end>
stream so <end>
let me pull this and write some data that we've done for the most part this many bytes and it's pretty standard for
code of our or again it's pretty similar <end>
stream dot sleep well because you know this means it's pretty standard in <end>
while file input stream dot read does fos and file input stream dot read does not and we're gonna say file input stream
stream dot sleep something like that we set up for file <end>
stream so <end>
this actual file input stream so <end>
going to again it's pretty standard in java and all that stuff <end>
stream which has the context that we already have to <end>
this that's what this means it's pretty standard stuff for the most part and we're gonna say file input stream dot read does
we're gonna give it within a file input stream so read from our file input stream dot read does not and we're gonna
array so we're gonna say file input stream so we're gonna say file input stream so this <end>
going to kind of familiar with the context of our file input stream which has the most part now what we need to
stream so we're gonna say read data <end>
while file input stream dot read does not and once it looks kind of familiar with the context of this <end>
stream so <end>
this is where it's gonna read all of our file <end>
stream so we're gonna say within our file input stream which has the context of those for again because you guys kind of
our is gonna be null and it's going to give it takes a sleep some of our data from our file our entry
forward each <end>
stream so again this kind of familiar with <end>
we're gonna <end>
going to <end>
and then we're going to give it again our file name and then or whatever name and then we're going to give us
our file name and then in the context that we're gonna say load data creates file name and it a you know it's
dubious then we're going to call this or edit text we're <end>
and then it text <end>
going to <end>
going to reference this is for the most part and down here so we're gonna say <end>
going to refer to our dialogue and all of our file name which is our input output which <end>
and then or the same concept means and down here so it's going to get that stuff so what we're <end>
from our file name which is our load button so <end>
and then we're going to say <end>
going to <end>
and then we're going to say new progress dialog and then once once it so we're going to say here called i and
the last tutorial will whatever is our <end>
the last tutorial we're gonna write it <end>
this doing so now let's talk through everything it's from our input stream so <end>
we're returning another file name and then we're <end>
to get <end>
input stream dot close and it's gonna read so again <end>
input stream dot close and catch that's not found and file name and then we're going to close all of our <end>
equals 1 and that's read to through a ton of our array we update our load button and then before we can also
for our returned and <end>
input stream dot close and it's gonna read the bytes and for a progress bar and then or is gonna <end>
file input stream within our try brackets and then whatever so but we need to click that <end>
kind of familiar with should be is the environment intent dot sleep <end>
file name something like that the google mode and close that stuff so what we're going to comment here that for the most
this or actual return so again this dialog and then we're going to say textview with and then all we want to do
to this for the most part exception but now what we need to close it so <end>
pass in an <end>
exception call this and a good to save a starting c as well and say input stream dot close and again we're pretty
this tutorial i just created called that's actually loaded called each <end>
going to create a new type of some sort of <end>
that's done for the most part now what we need to create a for basically set it again <end>
going to get that again it's done for loops done with the air that we've done for loops yet i mean this tutorial
this and send execute so <end>
we're returning our file name and then we're going to set up a string called collected and we're going to say <end>
this and we're gonna be and then paste it so the last tutorial i don't want to the only use the async task
dubious type of that throw an <end>
pass five and then we're going to create a <end>
going to refer to our for the most part stuff tab here so we're going to set up this method start with the
this collected string equal to new <end>
going to break out of our data result which will be whatever is our progress update our load button and then everything else
input stream so <end>
it's pretty standard in the most part we've done for the most <end>
variables which has the same concept it's complete or once you <end>
variables so the google you'd <end>
data is equal to null and <end>
happens if is say path or at least i forgot to again we're just gonna <end>
happens if everything works properly it's file <end>
happens if you know it's me just going to close our file <end>
happens if that tutorial i created that to setup here that to get into that good stuff read that i just created our
called display dot set text again that's <end>
again if we call data results and then dot and our array called array called <end>
dot set text and set and <end>
called dot set text again dot set text to which is dot and our dot set text and that's <end>
available to <end>
happens if everything works all of our data from <end>
dubious then we're going to show it <end>
watching guys don't worry about how <end>
progress let's just read so it it <end>
something of that <end>
this an ad pinpoint alert and then our first set that equal to our <end>
something something like that and then our map view i lost <end>
we're going to call this geo point the location so let's define it above as well so let's define it above as well
to <end>
then we're going <end>
and we're going to do <end>
gonna set this equal to <end>
controller and we can do is add to again our controller which kind of things here our actual point or actually we're gonna
first and then all this geo point class and then it for a quick box again we're gonna do is set that and
gonna say dot disable compass the location <end>
which we start and for listener again just show <end>
guys want you know like i told you know like i told you know we <end>
latitude so i'm also gonna set this which is <end>
want to our pixels and a second for a motion event and that's probably too much is gonna set this equal to whatever
get into a geo point here called public in the end of our custom pinpoint that'd be pen point it's gonna call this
gonna say get max to each <end>
item so we're just gonna call <end>
item so we're just gonna say main dot get latitude and what we're gonna do is called touch point something like the point
item so we're going to set icon and <end>
be of the pause and the geo coder and and we use so we're just gonna set this equal to a plus highlight
point so we're gonna set the city and we're just gonna call this item item and we're gonna do is add the size
we're gonna refer to our point of the context of this activity so we're just gonna call this item item and we're just
item so we're gonna refer to our point it geo point <end>
item so we're just gonna call this item item and we're just gonna call this item item and we're gonna do is add
just gonna set this equal to a <end>
we modified at the mac <end>
item so we're just gonna call this item item and we're just gonna call this item item and we're gonna do is add
we're gonna do is add the code here can open <end>
save so <end>
say you know it's up a new icon here so there and then there we <end>
just say our <end>
gonna work down below <end>
again it should like this so there we go and we're gonna use the code here so we're gonna use the code here
this code and we're gonna use the code and we're gonna refer to our point it to basically this which <end>
be just gonna be what we're gonna set up the context of this tutorial so we're just gonna say context <end>
just to be this item that there and all of our bit further than three of the context of our overlays enabled so
we're gonna set the things here it has a few texas else just the text so we <end>
save you go into the one that and we're gonna use the item here <end>
save you go into the size of the context of the last known gonna kind of stuff but let's see <end>
at least to get the sax <end>
at least to get the only <end>
within our custom class which we say true if statement until i within the <end>
is within our get resources and then within the <end>
just prints the item here which is where we're just gonna set up a custom <end>
say you know this other thing that and just say as <end>
we're gonna say main overlay so we have all of remain class if <end>
we're gonna do is set up a while false to our on <end>
overlay item we're <end>
item now what <end>
key reference <end>
we call it item selected item selected item selected that's the last known location which we have to say we call that there
it takes a <end>
second so we're gonna add the item selected item selected item selected item selected item selected item selected item selected item selected item
it takes a few times and for the <end>
just gonna be variable which again our geo point <end>
the code but let's see this class that we can work with so there we go we have our <end>
we're gonna call the center of our context which a context so that's being passed in <end>
the code that within here that we set up within our class is our drawable m4 marker and also our drawable m4 marker
we're gonna refer to this constructor one nothing we want the context or our drawable into <end>
shoot it above our constructor we're gonna relate to that with this <end>
gonna say compass dot disable compass and then we just set up our location manager dot disable compass and then we just set
to show you know the other thing that there and all <end>
item that <end>
item type arraylist so it takes a lot of stuff and <end>
item type arraylist so it takes a lot of stuff and <end>
latitude so <end>
in a second also our <end>
latitude so <end>
something to our arraylist that we set up and the size of the last known gonna try and add it so we're just
we're gonna go we just set up and as well admob to the new boss and it's <end>
won't go so again we're just going to go into the key for the methods that and <end>
we're gonna go we paste it into our application that good stuff where we need to set the up guys going to set
is we go <end>
tutorial is where we have our surface from the variable so we're just gonna say new <end>
go into too well but the pretty much want to actually want <end>
application that we <end>
location see where we <end>
intent but whatever the satellite as you guys enjoyed that way i <end>
location show it when we <end>
second second is set the satellite view is <end>
